
SET_FP_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000437c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045dc  080045dc  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e4  080045e4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e4  080045e4  000055e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045e8  080045e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080045ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000006c  08004658  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004658  00006300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e663  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022af  00000000  00000000  000146ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000169b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b00  00000000  00000000  000177c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c7  00000000  00000000  000182c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114ea  00000000  00000000  0002f58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000978de  00000000  00000000  00040a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004070  00000000  00000000  000d839c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000dc40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004504 	.word	0x08004504

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004504 	.word	0x08004504

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <encoder_init>:
#include "encoder.h"

volatile int16_t encoder_value = 0;
volatile int16_t last_encoder_value = 0;

void encoder_init(TIM_HandleTypeDef *htim) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    HAL_TIM_Encoder_Start_IT(htim, TIM_CHANNEL_ALL); // Aktifkan mode encoder
 8000588:	213c      	movs	r1, #60	@ 0x3c
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f003 f820 	bl	80035d0 <HAL_TIM_Encoder_Start_IT>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	f023 030f 	bic.w	r3, r3, #15
 80005aa:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f043 030c 	orr.w	r3, r3, #12
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f043 030c 	orr.w	r3, r3, #12
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	4619      	mov	r1, r3
 80005e4:	f107 0208 	add.w	r2, r7, #8
 80005e8:	2364      	movs	r3, #100	@ 0x64
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2304      	movs	r3, #4
 80005ee:	f001 ffab 	bl	8002548 <HAL_I2C_Master_Transmit>
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af02      	add	r7, sp, #8
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000606:	78fb      	ldrb	r3, [r7, #3]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	f043 030d 	orr.w	r3, r3, #13
 800061a:	b2db      	uxtb	r3, r3
 800061c:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	f043 0309 	orr.w	r3, r3, #9
 8000624:	b2db      	uxtb	r3, r3
 8000626:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	f043 030d 	orr.w	r3, r3, #13
 800062e:	b2db      	uxtb	r3, r3
 8000630:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	f043 0309 	orr.w	r3, r3, #9
 8000638:	b2db      	uxtb	r3, r3
 800063a:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	4619      	mov	r1, r3
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	2364      	movs	r3, #100	@ 0x64
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2304      	movs	r3, #4
 8000650:	f001 ff7a 	bl	8002548 <HAL_I2C_Master_Transmit>
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ff96 	bl	8000598 <lcd_send_cmd>
    for (int i = 0; i < 70; i++)
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	e006      	b.n	8000680 <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000672:	2120      	movs	r1, #32
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ffc0 	bl	80005fa <lcd_send_data>
    for (int i = 0; i < 70; i++)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3301      	adds	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b45      	cmp	r3, #69	@ 0x45
 8000684:	ddf5      	ble.n	8000672 <lcd_clear+0x16>
    }
}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
    if (row == 0)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d104      	bne.n	80006ac <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	e003      	b.n	80006b4 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80006b2:	60bb      	str	r3, [r7, #8]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4619      	mov	r1, r3
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f7ff ff6c 	bl	8000598 <lcd_send_cmd>
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80006d0:	2032      	movs	r0, #50	@ 0x32
 80006d2:	f001 f8a7 	bl	8001824 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80006d6:	2130      	movs	r1, #48	@ 0x30
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff5d 	bl	8000598 <lcd_send_cmd>
    HAL_Delay(5);
 80006de:	2005      	movs	r0, #5
 80006e0:	f001 f8a0 	bl	8001824 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80006e4:	2130      	movs	r1, #48	@ 0x30
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff56 	bl	8000598 <lcd_send_cmd>
    HAL_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f001 f899 	bl	8001824 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80006f2:	2130      	movs	r1, #48	@ 0x30
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff4f 	bl	8000598 <lcd_send_cmd>
    HAL_Delay(10);
 80006fa:	200a      	movs	r0, #10
 80006fc:	f001 f892 	bl	8001824 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000700:	2120      	movs	r1, #32
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff48 	bl	8000598 <lcd_send_cmd>
    HAL_Delay(10);
 8000708:	200a      	movs	r0, #10
 800070a:	f001 f88b 	bl	8001824 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800070e:	2128      	movs	r1, #40	@ 0x28
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff41 	bl	8000598 <lcd_send_cmd>
    HAL_Delay(1);
 8000716:	2001      	movs	r0, #1
 8000718:	f001 f884 	bl	8001824 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800071c:	2108      	movs	r1, #8
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff3a 	bl	8000598 <lcd_send_cmd>
    HAL_Delay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f001 f87d 	bl	8001824 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800072a:	2101      	movs	r1, #1
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ff33 	bl	8000598 <lcd_send_cmd>
    HAL_Delay(2);
 8000732:	2002      	movs	r0, #2
 8000734:	f001 f876 	bl	8001824 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000738:	2106      	movs	r1, #6
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff ff2c 	bl	8000598 <lcd_send_cmd>
    HAL_Delay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f001 f86f 	bl	8001824 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000746:	210c      	movs	r1, #12
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff25 	bl	8000598 <lcd_send_cmd>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8000760:	e007      	b.n	8000772 <lcd_puts+0x1c>
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	603a      	str	r2, [r7, #0]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4619      	mov	r1, r3
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff44 	bl	80005fa <lcd_send_data>
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f3      	bne.n	8000762 <lcd_puts+0xc>
}
 800077a:	bf00      	nop
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <debounce_check>:
/* USER CODE BEGIN 0 */
#define DEBOUNCE_DELAY 300

uint32_t last_interrupt_time = 0;

uint8_t debounce_check() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();  // Dapatkan waktu sekarang
 800078a:	f001 f83f 	bl	800180c <HAL_GetTick>
 800078e:	6078      	str	r0, [r7, #4]
    if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY) {
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <debounce_check+0x30>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800079c:	d904      	bls.n	80007a8 <debounce_check+0x24>
        last_interrupt_time = current_time;  // Update waktu terakhir
 800079e:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <debounce_check+0x30>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6013      	str	r3, [r2, #0]
        return 1;  // Tombol stabil
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <debounce_check+0x26>
    }
    return 0;  // Abaikan jika tombol masih bouncing
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000178 	.word	0x20000178

080007b8 <toggle_led>:

void toggle_led(GPIO_PinState state) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, state);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	461a      	mov	r2, r3
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <toggle_led+0x20>)
 80007cc:	f001 fd46 	bl	800225c <HAL_GPIO_WritePin>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40020800 	.word	0x40020800

080007dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0 && debounce_check()) {  // Filter tombol dengan debounce
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d160      	bne.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
 80007ec:	f7ff ffca 	bl	8000784 <debounce_check>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d05b      	beq.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
        if (current_screen == 0) {  // Screen 1
 80007f6:	4b30      	ldr	r3, [pc, #192]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d121      	bne.n	8000842 <HAL_GPIO_EXTI_Callback+0x66>
            switch (menu_position) {
 80007fe:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <HAL_GPIO_EXTI_Callback+0xe0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d008      	beq.n	8000818 <HAL_GPIO_EXTI_Callback+0x3c>
 8000806:	2b01      	cmp	r3, #1
 8000808:	d14e      	bne.n	80008a8 <HAL_GPIO_EXTI_Callback+0xcc>
                case 1:  // Menu "Set"
                    current_screen = 1;  // Pindah ke Screen 2
 800080a:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
                    secondary_menu_pos = 0;  // Reset ke posisi menu awal pada Screen 2
 8000810:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
                    break;
 8000816:	e04a      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>

                case 0:  // Menu "Start"
                    start_status = !start_status;  // Toggle Start/Stop
 8000818:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800082a:	601a      	str	r2, [r3, #0]
                    toggle_led(start_status ? GPIO_PIN_RESET : GPIO_PIN_SET);  // LED On/Off
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	bf0c      	ite	eq
 8000834:	2301      	moveq	r3, #1
 8000836:	2300      	movne	r3, #0
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ffbc 	bl	80007b8 <toggle_led>
                    break;
 8000840:	e035      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>

                default:
                    break;
            }
        }
        else if (current_screen == 1) {  // Screen 2
 8000842:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d131      	bne.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
            if (is_selecting_scaler) {  // Jika sedang memilih scaler
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xec>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d007      	beq.n	8000862 <HAL_GPIO_EXTI_Callback+0x86>
                current_scaler_index = selected_scaler_index;  // Simpan indeks scaler terakhir
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a1e      	ldr	r2, [pc, #120]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000858:	6013      	str	r3, [r2, #0]
                is_selecting_scaler = 0;  // Keluar dari mode memilih scaler
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
                        break;
                }
            }
        }
    }
}
 8000860:	e025      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
            }else if(is_selecting_frequency){
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d007      	beq.n	800087a <HAL_GPIO_EXTI_Callback+0x9e>
            	last_set_value = set_value;
 800086a:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0xfc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x100>)
 8000870:	6013      	str	r3, [r2, #0]
            	is_selecting_frequency = 0;
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	e019      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
                switch (secondary_menu_pos) {
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d00e      	beq.n	80008a0 <HAL_GPIO_EXTI_Callback+0xc4>
 8000882:	2b02      	cmp	r3, #2
 8000884:	dc12      	bgt.n	80008ac <HAL_GPIO_EXTI_Callback+0xd0>
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <HAL_GPIO_EXTI_Callback+0xb4>
 800088a:	2b01      	cmp	r3, #1
 800088c:	d004      	beq.n	8000898 <HAL_GPIO_EXTI_Callback+0xbc>
                        break;
 800088e:	e00d      	b.n	80008ac <HAL_GPIO_EXTI_Callback+0xd0>
                        is_selecting_scaler = 1;  // Masuk ke mode memilih scaler
 8000890:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
                        break;
 8000896:	e00a      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
                    	is_selecting_frequency = 1;
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0xf8>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
                    	break;
 800089e:	e006      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
                        current_screen = 0;  // Kembali ke Screen 1
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
                        break;
 80008a6:	e002      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
                    break;
 80008a8:	bf00      	nop
 80008aa:	e000      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0xd2>
                        break;
 80008ac:	bf00      	nop
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000018c 	.word	0x2000018c
 80008bc:	2000017c 	.word	0x2000017c
 80008c0:	20000190 	.word	0x20000190
 80008c4:	20000188 	.word	0x20000188
 80008c8:	20000194 	.word	0x20000194
 80008cc:	20000198 	.word	0x20000198
 80008d0:	2000019c 	.word	0x2000019c
 80008d4:	200001a0 	.word	0x200001a0
 80008d8:	20000184 	.word	0x20000184
 80008dc:	200001a4 	.word	0x200001a4

080008e0 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	encoder_value = __HAL_TIM_GET_COUNTER(htim);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <HAL_TIM_IC_CaptureCallback+0x20>)
 80008f2:	801a      	strh	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	20000088 	.word	0x20000088

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 ff1a 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f826 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 f962 	bl	8000bd8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000914:	f000 f88c 	bl	8000a30 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000918:	f000 f8dc 	bl	8000ad4 <MX_I2C1_Init>
  MX_TIM3_Init();
 800091c:	f000 f908 	bl	8000b30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  lcd1.hi2c = &hi2c1;
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <main+0x4c>)
 8000922:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <main+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  lcd1.address = 0x4E;
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <main+0x4c>)
 8000928:	224e      	movs	r2, #78	@ 0x4e
 800092a:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd1);
 800092c:	4808      	ldr	r0, [pc, #32]	@ (8000950 <main+0x4c>)
 800092e:	f7ff fecb 	bl	80006c8 <lcd_init>

  encoder_init(&htim3);
 8000932:	4809      	ldr	r0, [pc, #36]	@ (8000958 <main+0x54>)
 8000934:	f7ff fe24 	bl	8000580 <encoder_init>
  menu_init();
 8000938:	f000 f9cc 	bl	8000cd4 <menu_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      menu_update();   // Update logika menu
 800093c:	f000 f9e6 	bl	8000d0c <menu_update>
      menu_display();  // Tampilkan menu
 8000940:	f000 fb06 	bl	8000f50 <menu_display>
      HAL_Delay(1);  // Refresh LCD
 8000944:	2001      	movs	r0, #1
 8000946:	f000 ff6d 	bl	8001824 <HAL_Delay>
      menu_update();   // Update logika menu
 800094a:	bf00      	nop
 800094c:	e7f6      	b.n	800093c <main+0x38>
 800094e:	bf00      	nop
 8000950:	20000170 	.word	0x20000170
 8000954:	200000d4 	.word	0x200000d4
 8000958:	20000128 	.word	0x20000128

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	@ 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	2230      	movs	r2, #48	@ 0x30
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f003 f94a 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	4b28      	ldr	r3, [pc, #160]	@ (8000a28 <SystemClock_Config+0xcc>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	4a27      	ldr	r2, [pc, #156]	@ (8000a28 <SystemClock_Config+0xcc>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000990:	4b25      	ldr	r3, [pc, #148]	@ (8000a28 <SystemClock_Config+0xcc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	4b22      	ldr	r3, [pc, #136]	@ (8000a2c <SystemClock_Config+0xd0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009a8:	4a20      	ldr	r2, [pc, #128]	@ (8000a2c <SystemClock_Config+0xd0>)
 80009aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <SystemClock_Config+0xd0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	2310      	movs	r3, #16
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	2302      	movs	r3, #2
 80009ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d0:	2308      	movs	r3, #8
 80009d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80009d4:	2354      	movs	r3, #84	@ 0x54
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 f909 	bl	8002bfc <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009f0:	f000 f96a 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f8:	2302      	movs	r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fb6b 	bl	80030ec <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a1c:	f000 f954 	bl	8000cc8 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3750      	adds	r7, #80	@ 0x50
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a42:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a44:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <MX_ADC1_Init+0x9c>)
 8000a46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a70:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a72:	4a17      	ldr	r2, [pc, #92]	@ (8000ad0 <MX_ADC1_Init+0xa0>)
 8000a74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a76:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000a92:	f000 feeb 	bl	800186c <HAL_ADC_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a9c:	f000 f914 	bl	8000cc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_ADC1_Init+0x98>)
 8000ab2:	f000 ff1f 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000abc:	f000 f904 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	40012000 	.word	0x40012000
 8000ad0:	0f000001 	.word	0x0f000001

08000ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <MX_I2C1_Init+0x54>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <MX_I2C1_Init+0x58>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000b12:	f001 fbd5 	bl	80022c0 <HAL_I2C_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f000 f8d4 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200000d4 	.word	0x200000d4
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	000186a0 	.word	0x000186a0

08000b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	@ 0x30
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2224      	movs	r2, #36	@ 0x24
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 f860 	bl	8003c04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b4c:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <MX_TIM3_Init+0xa0>)
 8000b4e:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <MX_TIM3_Init+0xa4>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_TIM3_Init+0xa0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <MX_TIM3_Init+0xa0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_TIM3_Init+0xa0>)
 8000b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_TIM3_Init+0xa0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_TIM3_Init+0xa0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <MX_TIM3_Init+0xa0>)
 8000b9e:	f002 fc71 	bl	8003484 <HAL_TIM_Encoder_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ba8:	f000 f88e 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_TIM3_Init+0xa0>)
 8000bba:	f002 ff81 	bl	8003ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000bc4:	f000 f880 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3730      	adds	r7, #48	@ 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000128 	.word	0x20000128
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b32      	ldr	r3, [pc, #200]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a31      	ldr	r2, [pc, #196]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a2a      	ldr	r2, [pc, #168]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a23      	ldr	r2, [pc, #140]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_GPIO_Init+0xe4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c64:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c66:	f001 faf9 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480f      	ldr	r0, [pc, #60]	@ (8000cc0 <MX_GPIO_Init+0xe8>)
 8000c84:	f001 f966 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <MX_GPIO_Init+0xec>)
 8000c9e:	f001 f959 	bl	8001f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2006      	movs	r0, #6
 8000ca8:	f001 f91d 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cac:	2006      	movs	r0, #6
 8000cae:	f001 f936 	bl	8001f1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	@ 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020800 	.word	0x40020800
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <menu_init>:

uint32_t last_blink_time = 0;  // Waktu terakhir blink
int blink_state = 1;           // 1: Tampilkan "SCALE", 0: Hapus "SCALE"


void menu_init(void) {
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
    menu_position = 0;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <menu_init+0x28>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
    setting_mode = 0;
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <menu_init+0x2c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
    set_value = 0;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <menu_init+0x30>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
    start_status = 0;
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <menu_init+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000017c 	.word	0x2000017c
 8000d00:	20000180 	.word	0x20000180
 8000d04:	20000184 	.word	0x20000184
 8000d08:	20000188 	.word	0x20000188

08000d0c <menu_update>:

void menu_update(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000d12:	f000 fd7b 	bl	800180c <HAL_GetTick>
 8000d16:	6078      	str	r0, [r7, #4]
    uint32_t delta_time = current_time - last_update_time;
 8000d18:	4b80      	ldr	r3, [pc, #512]	@ (8000f1c <menu_update+0x210>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	603b      	str	r3, [r7, #0]

    if (is_selecting_scaler)
 8000d22:	4b7f      	ldr	r3, [pc, #508]	@ (8000f20 <menu_update+0x214>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d044      	beq.n	8000db4 <menu_update+0xa8>
    {  // Jika sedang memilih scaler
    	if(current_time - last_blink_time >= 500)
 8000d2a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f24 <menu_update+0x218>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d36:	d30c      	bcc.n	8000d52 <menu_update+0x46>
    	{
    		blink_state = !blink_state;  // Toggle blink state
 8000d38:	4b7b      	ldr	r3, [pc, #492]	@ (8000f28 <menu_update+0x21c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf0c      	ite	eq
 8000d40:	2301      	moveq	r3, #1
 8000d42:	2300      	movne	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b77      	ldr	r3, [pc, #476]	@ (8000f28 <menu_update+0x21c>)
 8000d4a:	601a      	str	r2, [r3, #0]
    		last_blink_time = current_time;
 8000d4c:	4a75      	ldr	r2, [pc, #468]	@ (8000f24 <menu_update+0x218>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
    	}
        if (encoder_value > last_encoder_value) {
 8000d52:	4b76      	ldr	r3, [pc, #472]	@ (8000f2c <menu_update+0x220>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	4b75      	ldr	r3, [pc, #468]	@ (8000f30 <menu_update+0x224>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	dd0e      	ble.n	8000d80 <menu_update+0x74>
            if (selected_scaler_index < (sizeof(scaler_values) / sizeof(scaler_values[0])) - 1) {
 8000d62:	4b74      	ldr	r3, [pc, #464]	@ (8000f34 <menu_update+0x228>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d804      	bhi.n	8000d74 <menu_update+0x68>
                selected_scaler_index++;  // Pindah ke scaler berikutnya
 8000d6a:	4b72      	ldr	r3, [pc, #456]	@ (8000f34 <menu_update+0x228>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a70      	ldr	r2, [pc, #448]	@ (8000f34 <menu_update+0x228>)
 8000d72:	6013      	str	r3, [r2, #0]
            }
            last_encoder_value = encoder_value;
 8000d74:	4b6d      	ldr	r3, [pc, #436]	@ (8000f2c <menu_update+0x220>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f30 <menu_update+0x224>)
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	e015      	b.n	8000dac <menu_update+0xa0>
        } else if (encoder_value < last_encoder_value) {
 8000d80:	4b6a      	ldr	r3, [pc, #424]	@ (8000f2c <menu_update+0x220>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	4b6a      	ldr	r3, [pc, #424]	@ (8000f30 <menu_update+0x224>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	da0d      	bge.n	8000dac <menu_update+0xa0>
            if (selected_scaler_index > 0) {
 8000d90:	4b68      	ldr	r3, [pc, #416]	@ (8000f34 <menu_update+0x228>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	dd04      	ble.n	8000da2 <menu_update+0x96>
                selected_scaler_index--;  // Pindah ke scaler sebelumnya
 8000d98:	4b66      	ldr	r3, [pc, #408]	@ (8000f34 <menu_update+0x228>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	4a65      	ldr	r2, [pc, #404]	@ (8000f34 <menu_update+0x228>)
 8000da0:	6013      	str	r3, [r2, #0]
            }
            last_encoder_value = encoder_value;
 8000da2:	4b62      	ldr	r3, [pc, #392]	@ (8000f2c <menu_update+0x220>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	4b61      	ldr	r3, [pc, #388]	@ (8000f30 <menu_update+0x224>)
 8000daa:	801a      	strh	r2, [r3, #0]
        }
        last_update_time = current_time;  // Perbarui waktu terakhir
 8000dac:	4a5b      	ldr	r2, [pc, #364]	@ (8000f1c <menu_update+0x210>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
                secondary_menu_pos--;
            }
            last_encoder_value = encoder_value;  // Update posisi terakhir
        }
    }
}
 8000db2:	e0ae      	b.n	8000f12 <menu_update+0x206>
    else if(is_selecting_frequency)
 8000db4:	4b60      	ldr	r3, [pc, #384]	@ (8000f38 <menu_update+0x22c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d047      	beq.n	8000e4c <menu_update+0x140>
    	if(current_time - last_blink_time >= 500)
 8000dbc:	4b59      	ldr	r3, [pc, #356]	@ (8000f24 <menu_update+0x218>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dc8:	d30c      	bcc.n	8000de4 <menu_update+0xd8>
    		blink_state = !blink_state;  // Toggle blink state
 8000dca:	4b57      	ldr	r3, [pc, #348]	@ (8000f28 <menu_update+0x21c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf0c      	ite	eq
 8000dd2:	2301      	moveq	r3, #1
 8000dd4:	2300      	movne	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b53      	ldr	r3, [pc, #332]	@ (8000f28 <menu_update+0x21c>)
 8000ddc:	601a      	str	r2, [r3, #0]
    		last_blink_time = current_time;
 8000dde:	4a51      	ldr	r2, [pc, #324]	@ (8000f24 <menu_update+0x218>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6013      	str	r3, [r2, #0]
        if (encoder_value > last_encoder_value) {
 8000de4:	4b51      	ldr	r3, [pc, #324]	@ (8000f2c <menu_update+0x220>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	4b51      	ldr	r3, [pc, #324]	@ (8000f30 <menu_update+0x224>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dd10      	ble.n	8000e16 <menu_update+0x10a>
            set_value += scaler_values[selected_scaler_index];
 8000df4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f34 <menu_update+0x228>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a50      	ldr	r2, [pc, #320]	@ (8000f3c <menu_update+0x230>)
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b4f      	ldr	r3, [pc, #316]	@ (8000f40 <menu_update+0x234>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a4e      	ldr	r2, [pc, #312]	@ (8000f40 <menu_update+0x234>)
 8000e08:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;
 8000e0a:	4b48      	ldr	r3, [pc, #288]	@ (8000f2c <menu_update+0x220>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	4b47      	ldr	r3, [pc, #284]	@ (8000f30 <menu_update+0x224>)
 8000e12:	801a      	strh	r2, [r3, #0]
 8000e14:	e016      	b.n	8000e44 <menu_update+0x138>
        } else if (encoder_value < last_encoder_value) {
 8000e16:	4b45      	ldr	r3, [pc, #276]	@ (8000f2c <menu_update+0x220>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	b21a      	sxth	r2, r3
 8000e1c:	4b44      	ldr	r3, [pc, #272]	@ (8000f30 <menu_update+0x224>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	429a      	cmp	r2, r3
 8000e24:	da0e      	bge.n	8000e44 <menu_update+0x138>
        	set_value -= scaler_values[selected_scaler_index];
 8000e26:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <menu_update+0x228>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a44      	ldr	r2, [pc, #272]	@ (8000f3c <menu_update+0x230>)
 8000e2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e30:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <menu_update+0x234>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1a9b      	subs	r3, r3, r2
 8000e36:	4a42      	ldr	r2, [pc, #264]	@ (8000f40 <menu_update+0x234>)
 8000e38:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;
 8000e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f2c <menu_update+0x220>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	4b3b      	ldr	r3, [pc, #236]	@ (8000f30 <menu_update+0x224>)
 8000e42:	801a      	strh	r2, [r3, #0]
        last_update_time = current_time;  // Perbarui waktu terakhir
 8000e44:	4a35      	ldr	r2, [pc, #212]	@ (8000f1c <menu_update+0x210>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
}
 8000e4a:	e062      	b.n	8000f12 <menu_update+0x206>
    else if (current_screen == 0)
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f44 <menu_update+0x238>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d12d      	bne.n	8000eb0 <menu_update+0x1a4>
        if (encoder_value > last_encoder_value) {  // Bergerak ke kanan
 8000e54:	4b35      	ldr	r3, [pc, #212]	@ (8000f2c <menu_update+0x220>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <menu_update+0x224>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dd0e      	ble.n	8000e82 <menu_update+0x176>
            if (menu_position < MAX_MENU) {       // Batas kanan
 8000e64:	4b38      	ldr	r3, [pc, #224]	@ (8000f48 <menu_update+0x23c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dc04      	bgt.n	8000e76 <menu_update+0x16a>
                menu_position++;
 8000e6c:	4b36      	ldr	r3, [pc, #216]	@ (8000f48 <menu_update+0x23c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	4a35      	ldr	r2, [pc, #212]	@ (8000f48 <menu_update+0x23c>)
 8000e74:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;  // Update posisi terakhir
 8000e76:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <menu_update+0x220>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f30 <menu_update+0x224>)
 8000e7e:	801a      	strh	r2, [r3, #0]
}
 8000e80:	e047      	b.n	8000f12 <menu_update+0x206>
        } else if (encoder_value < last_encoder_value) {  // Bergerak ke kiri
 8000e82:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <menu_update+0x220>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <menu_update+0x224>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	da3f      	bge.n	8000f12 <menu_update+0x206>
            if (menu_position > MIN_MENU) {       // Batas kiri
 8000e92:	4b2d      	ldr	r3, [pc, #180]	@ (8000f48 <menu_update+0x23c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dd04      	ble.n	8000ea4 <menu_update+0x198>
                menu_position--;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <menu_update+0x23c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a29      	ldr	r2, [pc, #164]	@ (8000f48 <menu_update+0x23c>)
 8000ea2:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;  // Update posisi terakhir
 8000ea4:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <menu_update+0x220>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <menu_update+0x224>)
 8000eac:	801a      	strh	r2, [r3, #0]
}
 8000eae:	e030      	b.n	8000f12 <menu_update+0x206>
    else if (current_screen == 1)
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <menu_update+0x238>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d12c      	bne.n	8000f12 <menu_update+0x206>
        if (encoder_value > last_encoder_value) {  // Bergerak ke kanan
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <menu_update+0x220>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <menu_update+0x224>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dd0e      	ble.n	8000ee6 <menu_update+0x1da>
            if (secondary_menu_pos < 2) {         // Batas kanan
 8000ec8:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <menu_update+0x240>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	dc04      	bgt.n	8000eda <menu_update+0x1ce>
                secondary_menu_pos++;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <menu_update+0x240>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <menu_update+0x240>)
 8000ed8:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;  // Update posisi terakhir
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <menu_update+0x220>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <menu_update+0x224>)
 8000ee2:	801a      	strh	r2, [r3, #0]
}
 8000ee4:	e015      	b.n	8000f12 <menu_update+0x206>
        } else if (encoder_value < last_encoder_value) {  // Bergerak ke kiri
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <menu_update+0x220>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <menu_update+0x224>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	da0d      	bge.n	8000f12 <menu_update+0x206>
            if (secondary_menu_pos > 0) {         // Batas kiri
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <menu_update+0x240>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	dd04      	ble.n	8000f08 <menu_update+0x1fc>
                secondary_menu_pos--;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <menu_update+0x240>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <menu_update+0x240>)
 8000f06:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;  // Update posisi terakhir
 8000f08:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <menu_update+0x220>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <menu_update+0x224>)
 8000f10:	801a      	strh	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001a8 	.word	0x200001a8
 8000f20:	20000194 	.word	0x20000194
 8000f24:	200001ac 	.word	0x200001ac
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	20000088 	.word	0x20000088
 8000f30:	2000008a 	.word	0x2000008a
 8000f34:	20000198 	.word	0x20000198
 8000f38:	200001a0 	.word	0x200001a0
 8000f3c:	08004578 	.word	0x08004578
 8000f40:	20000184 	.word	0x20000184
 8000f44:	2000018c 	.word	0x2000018c
 8000f48:	2000017c 	.word	0x2000017c
 8000f4c:	20000190 	.word	0x20000190

08000f50 <menu_display>:

void menu_display(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b090      	sub	sp, #64	@ 0x40
 8000f54:	af00      	add	r7, sp, #0
    if (current_screen != last_screen) {
 8000f56:	4b9c      	ldr	r3, [pc, #624]	@ (80011c8 <menu_display+0x278>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b9c      	ldr	r3, [pc, #624]	@ (80011cc <menu_display+0x27c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d012      	beq.n	8000f88 <menu_display+0x38>
        lcd_clear(&lcd1);  // Bersihkan layar hanya saat berpindah screen
 8000f62:	489b      	ldr	r0, [pc, #620]	@ (80011d0 <menu_display+0x280>)
 8000f64:	f7ff fb7a 	bl	800065c <lcd_clear>
        last_screen = current_screen;  // Simpan screen terakhir
 8000f68:	4b97      	ldr	r3, [pc, #604]	@ (80011c8 <menu_display+0x278>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a97      	ldr	r2, [pc, #604]	@ (80011cc <menu_display+0x27c>)
 8000f6e:	6013      	str	r3, [r2, #0]
        if (current_screen == 0) {
 8000f70:	4b95      	ldr	r3, [pc, #596]	@ (80011c8 <menu_display+0x278>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d107      	bne.n	8000f88 <menu_display+0x38>
            last_start_status = -1;  // Paksa pembaruan ulang tulisan "START"/"STOP"
 8000f78:	4b96      	ldr	r3, [pc, #600]	@ (80011d4 <menu_display+0x284>)
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	601a      	str	r2, [r3, #0]
            last_menu_position = -1;  // Paksa pembaruan ulang posisi menu
 8000f80:	4b95      	ldr	r3, [pc, #596]	@ (80011d8 <menu_display+0x288>)
 8000f82:	f04f 32ff 	mov.w	r2, #4294967295
 8000f86:	601a      	str	r2, [r3, #0]
        }
    }

    if (current_screen == 0) {  // Screen awal
 8000f88:	4b8f      	ldr	r3, [pc, #572]	@ (80011c8 <menu_display+0x278>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d17c      	bne.n	800108a <menu_display+0x13a>
        lcd_gotoxy(&lcd1, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	488e      	ldr	r0, [pc, #568]	@ (80011d0 <menu_display+0x280>)
 8000f96:	f7ff fb7b 	bl	8000690 <lcd_gotoxy>
        lcd_puts(&lcd1, "F:");
 8000f9a:	4990      	ldr	r1, [pc, #576]	@ (80011dc <menu_display+0x28c>)
 8000f9c:	488c      	ldr	r0, [pc, #560]	@ (80011d0 <menu_display+0x280>)
 8000f9e:	f7ff fbda 	bl	8000756 <lcd_puts>

        lcd_gotoxy(&lcd1, 0, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	488a      	ldr	r0, [pc, #552]	@ (80011d0 <menu_display+0x280>)
 8000fa8:	f7ff fb72 	bl	8000690 <lcd_gotoxy>
        lcd_puts(&lcd1, "V:");
 8000fac:	498c      	ldr	r1, [pc, #560]	@ (80011e0 <menu_display+0x290>)
 8000fae:	4888      	ldr	r0, [pc, #544]	@ (80011d0 <menu_display+0x280>)
 8000fb0:	f7ff fbd1 	bl	8000756 <lcd_puts>

        lcd_gotoxy(&lcd1, 13, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	210d      	movs	r1, #13
 8000fb8:	4885      	ldr	r0, [pc, #532]	@ (80011d0 <menu_display+0x280>)
 8000fba:	f7ff fb69 	bl	8000690 <lcd_gotoxy>
        lcd_puts(&lcd1, "SET");
 8000fbe:	4989      	ldr	r1, [pc, #548]	@ (80011e4 <menu_display+0x294>)
 8000fc0:	4883      	ldr	r0, [pc, #524]	@ (80011d0 <menu_display+0x280>)
 8000fc2:	f7ff fbc8 	bl	8000756 <lcd_puts>

        if (start_status != last_start_status) {
 8000fc6:	4b88      	ldr	r3, [pc, #544]	@ (80011e8 <menu_display+0x298>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4b82      	ldr	r3, [pc, #520]	@ (80011d4 <menu_display+0x284>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d019      	beq.n	8001006 <menu_display+0xb6>
            lcd_gotoxy(&lcd1, 7, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2107      	movs	r1, #7
 8000fd6:	487e      	ldr	r0, [pc, #504]	@ (80011d0 <menu_display+0x280>)
 8000fd8:	f7ff fb5a 	bl	8000690 <lcd_gotoxy>
            if (start_status == 0) {
 8000fdc:	4b82      	ldr	r3, [pc, #520]	@ (80011e8 <menu_display+0x298>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d104      	bne.n	8000fee <menu_display+0x9e>
                lcd_puts(&lcd1, "START");
 8000fe4:	4981      	ldr	r1, [pc, #516]	@ (80011ec <menu_display+0x29c>)
 8000fe6:	487a      	ldr	r0, [pc, #488]	@ (80011d0 <menu_display+0x280>)
 8000fe8:	f7ff fbb5 	bl	8000756 <lcd_puts>
 8000fec:	e007      	b.n	8000ffe <menu_display+0xae>
            } else if (start_status == 1) {
 8000fee:	4b7e      	ldr	r3, [pc, #504]	@ (80011e8 <menu_display+0x298>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d103      	bne.n	8000ffe <menu_display+0xae>
                lcd_puts(&lcd1, "STOP ");
 8000ff6:	497e      	ldr	r1, [pc, #504]	@ (80011f0 <menu_display+0x2a0>)
 8000ff8:	4875      	ldr	r0, [pc, #468]	@ (80011d0 <menu_display+0x280>)
 8000ffa:	f7ff fbac 	bl	8000756 <lcd_puts>
            }
            last_start_status = start_status;  // Simpan status terakhir
 8000ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80011e8 <menu_display+0x298>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a74      	ldr	r2, [pc, #464]	@ (80011d4 <menu_display+0x284>)
 8001004:	6013      	str	r3, [r2, #0]
        }

        if (menu_position != last_menu_position) {
 8001006:	4b7b      	ldr	r3, [pc, #492]	@ (80011f4 <menu_display+0x2a4>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b73      	ldr	r3, [pc, #460]	@ (80011d8 <menu_display+0x288>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	f000 8172 	beq.w	80012f8 <menu_display+0x3a8>
            // Hapus arrow dari posisi sebelumnya
            if (last_menu_position == 0) {
 8001014:	4b70      	ldr	r3, [pc, #448]	@ (80011d8 <menu_display+0x288>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d109      	bne.n	8001030 <menu_display+0xe0>
                lcd_gotoxy(&lcd1, 6, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	2106      	movs	r1, #6
 8001020:	486b      	ldr	r0, [pc, #428]	@ (80011d0 <menu_display+0x280>)
 8001022:	f7ff fb35 	bl	8000690 <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001026:	4974      	ldr	r1, [pc, #464]	@ (80011f8 <menu_display+0x2a8>)
 8001028:	4869      	ldr	r0, [pc, #420]	@ (80011d0 <menu_display+0x280>)
 800102a:	f7ff fb94 	bl	8000756 <lcd_puts>
 800102e:	e00c      	b.n	800104a <menu_display+0xfa>
            } else if (last_menu_position == 1) {
 8001030:	4b69      	ldr	r3, [pc, #420]	@ (80011d8 <menu_display+0x288>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d108      	bne.n	800104a <menu_display+0xfa>
                lcd_gotoxy(&lcd1, 12, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	210c      	movs	r1, #12
 800103c:	4864      	ldr	r0, [pc, #400]	@ (80011d0 <menu_display+0x280>)
 800103e:	f7ff fb27 	bl	8000690 <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001042:	496d      	ldr	r1, [pc, #436]	@ (80011f8 <menu_display+0x2a8>)
 8001044:	4862      	ldr	r0, [pc, #392]	@ (80011d0 <menu_display+0x280>)
 8001046:	f7ff fb86 	bl	8000756 <lcd_puts>
            }

            // Tampilkan arrow di posisi baru
            if (menu_position == 0) {
 800104a:	4b6a      	ldr	r3, [pc, #424]	@ (80011f4 <menu_display+0x2a4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <menu_display+0x116>
                lcd_gotoxy(&lcd1, 6, 1);
 8001052:	2201      	movs	r2, #1
 8001054:	2106      	movs	r1, #6
 8001056:	485e      	ldr	r0, [pc, #376]	@ (80011d0 <menu_display+0x280>)
 8001058:	f7ff fb1a 	bl	8000690 <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 800105c:	4967      	ldr	r1, [pc, #412]	@ (80011fc <menu_display+0x2ac>)
 800105e:	485c      	ldr	r0, [pc, #368]	@ (80011d0 <menu_display+0x280>)
 8001060:	f7ff fb79 	bl	8000756 <lcd_puts>
 8001064:	e00c      	b.n	8001080 <menu_display+0x130>
            } else if (menu_position == 1) {
 8001066:	4b63      	ldr	r3, [pc, #396]	@ (80011f4 <menu_display+0x2a4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d108      	bne.n	8001080 <menu_display+0x130>
                lcd_gotoxy(&lcd1, 12, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	210c      	movs	r1, #12
 8001072:	4857      	ldr	r0, [pc, #348]	@ (80011d0 <menu_display+0x280>)
 8001074:	f7ff fb0c 	bl	8000690 <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001078:	4960      	ldr	r1, [pc, #384]	@ (80011fc <menu_display+0x2ac>)
 800107a:	4855      	ldr	r0, [pc, #340]	@ (80011d0 <menu_display+0x280>)
 800107c:	f7ff fb6b 	bl	8000756 <lcd_puts>
            }

            last_menu_position = menu_position;  // Simpan posisi terakhir
 8001080:	4b5c      	ldr	r3, [pc, #368]	@ (80011f4 <menu_display+0x2a4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a54      	ldr	r2, [pc, #336]	@ (80011d8 <menu_display+0x288>)
 8001086:	6013      	str	r3, [r2, #0]
                lcd_gotoxy(&lcd1, 13, 0);
                lcd_puts(&lcd1, ">");
            }
        }
    }
}
 8001088:	e136      	b.n	80012f8 <menu_display+0x3a8>
    } else if (current_screen == 1) {  // Screen kedua
 800108a:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <menu_display+0x278>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	f040 8132 	bne.w	80012f8 <menu_display+0x3a8>
    	if(!is_selecting_scaler || blink_state)
 8001094:	4b5a      	ldr	r3, [pc, #360]	@ (8001200 <menu_display+0x2b0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <menu_display+0x154>
 800109c:	4b59      	ldr	r3, [pc, #356]	@ (8001204 <menu_display+0x2b4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d009      	beq.n	80010b8 <menu_display+0x168>
    		lcd_gotoxy(&lcd1, 1, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	4849      	ldr	r0, [pc, #292]	@ (80011d0 <menu_display+0x280>)
 80010aa:	f7ff faf1 	bl	8000690 <lcd_gotoxy>
    		lcd_puts(&lcd1, "SCALE:");
 80010ae:	4956      	ldr	r1, [pc, #344]	@ (8001208 <menu_display+0x2b8>)
 80010b0:	4847      	ldr	r0, [pc, #284]	@ (80011d0 <menu_display+0x280>)
 80010b2:	f7ff fb50 	bl	8000756 <lcd_puts>
 80010b6:	e008      	b.n	80010ca <menu_display+0x17a>
            lcd_gotoxy(&lcd1, 1, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2101      	movs	r1, #1
 80010bc:	4844      	ldr	r0, [pc, #272]	@ (80011d0 <menu_display+0x280>)
 80010be:	f7ff fae7 	bl	8000690 <lcd_gotoxy>
            lcd_puts(&lcd1, "     ");  // Hapus tulisan "SCALE" saat blink off
 80010c2:	4952      	ldr	r1, [pc, #328]	@ (800120c <menu_display+0x2bc>)
 80010c4:	4842      	ldr	r0, [pc, #264]	@ (80011d0 <menu_display+0x280>)
 80010c6:	f7ff fb46 	bl	8000756 <lcd_puts>
    	if(!is_selecting_frequency || blink_state)
 80010ca:	4b51      	ldr	r3, [pc, #324]	@ (8001210 <menu_display+0x2c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <menu_display+0x18a>
 80010d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001204 <menu_display+0x2b4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d009      	beq.n	80010ee <menu_display+0x19e>
    		lcd_gotoxy(&lcd1, 1, 1);
 80010da:	2201      	movs	r2, #1
 80010dc:	2101      	movs	r1, #1
 80010de:	483c      	ldr	r0, [pc, #240]	@ (80011d0 <menu_display+0x280>)
 80010e0:	f7ff fad6 	bl	8000690 <lcd_gotoxy>
    		lcd_puts(&lcd1, "F:");
 80010e4:	493d      	ldr	r1, [pc, #244]	@ (80011dc <menu_display+0x28c>)
 80010e6:	483a      	ldr	r0, [pc, #232]	@ (80011d0 <menu_display+0x280>)
 80010e8:	f7ff fb35 	bl	8000756 <lcd_puts>
 80010ec:	e008      	b.n	8001100 <menu_display+0x1b0>
            lcd_gotoxy(&lcd1, 1, 1);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2101      	movs	r1, #1
 80010f2:	4837      	ldr	r0, [pc, #220]	@ (80011d0 <menu_display+0x280>)
 80010f4:	f7ff facc 	bl	8000690 <lcd_gotoxy>
            lcd_puts(&lcd1, " ");  // Hapus tulisan "SCALE" saat blink off
 80010f8:	493f      	ldr	r1, [pc, #252]	@ (80011f8 <menu_display+0x2a8>)
 80010fa:	4835      	ldr	r0, [pc, #212]	@ (80011d0 <menu_display+0x280>)
 80010fc:	f7ff fb2b 	bl	8000756 <lcd_puts>
        lcd_gotoxy(&lcd1, 14, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	210e      	movs	r1, #14
 8001104:	4832      	ldr	r0, [pc, #200]	@ (80011d0 <menu_display+0x280>)
 8001106:	f7ff fac3 	bl	8000690 <lcd_gotoxy>
        lcd_puts(&lcd1, "OK");
 800110a:	4942      	ldr	r1, [pc, #264]	@ (8001214 <menu_display+0x2c4>)
 800110c:	4830      	ldr	r0, [pc, #192]	@ (80011d0 <menu_display+0x280>)
 800110e:	f7ff fb22 	bl	8000756 <lcd_puts>
        if (is_selecting_scaler) {
 8001112:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <menu_display+0x2b0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d01f      	beq.n	800115a <menu_display+0x20a>
            lcd_gotoxy(&lcd1, 7, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2107      	movs	r1, #7
 800111e:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <menu_display+0x280>)
 8001120:	f7ff fab6 	bl	8000690 <lcd_gotoxy>
            lcd_puts(&lcd1, "       ");
 8001124:	493c      	ldr	r1, [pc, #240]	@ (8001218 <menu_display+0x2c8>)
 8001126:	482a      	ldr	r0, [pc, #168]	@ (80011d0 <menu_display+0x280>)
 8001128:	f7ff fb15 	bl	8000756 <lcd_puts>
            lcd_gotoxy(&lcd1, 7, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2107      	movs	r1, #7
 8001130:	4827      	ldr	r0, [pc, #156]	@ (80011d0 <menu_display+0x280>)
 8001132:	f7ff faad 	bl	8000690 <lcd_gotoxy>
            sprintf(scaler_buffer, "%d", scaler_values[selected_scaler_index]);  // Tampilkan nilai scaler
 8001136:	4b39      	ldr	r3, [pc, #228]	@ (800121c <menu_display+0x2cc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a39      	ldr	r2, [pc, #228]	@ (8001220 <menu_display+0x2d0>)
 800113c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001140:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001144:	4937      	ldr	r1, [pc, #220]	@ (8001224 <menu_display+0x2d4>)
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fd3c 	bl	8003bc4 <siprintf>
            lcd_puts(&lcd1, scaler_buffer);
 800114c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001150:	4619      	mov	r1, r3
 8001152:	481f      	ldr	r0, [pc, #124]	@ (80011d0 <menu_display+0x280>)
 8001154:	f7ff faff 	bl	8000756 <lcd_puts>
 8001158:	e015      	b.n	8001186 <menu_display+0x236>
            lcd_gotoxy(&lcd1, 7, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2107      	movs	r1, #7
 800115e:	481c      	ldr	r0, [pc, #112]	@ (80011d0 <menu_display+0x280>)
 8001160:	f7ff fa96 	bl	8000690 <lcd_gotoxy>
            sprintf(scaler_buffer, "%d", scaler_values[current_scaler_index]);  // Nilai scaler terakhir
 8001164:	4b30      	ldr	r3, [pc, #192]	@ (8001228 <menu_display+0x2d8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a2d      	ldr	r2, [pc, #180]	@ (8001220 <menu_display+0x2d0>)
 800116a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800116e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001172:	492c      	ldr	r1, [pc, #176]	@ (8001224 <menu_display+0x2d4>)
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fd25 	bl	8003bc4 <siprintf>
            lcd_puts(&lcd1, scaler_buffer);
 800117a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117e:	4619      	mov	r1, r3
 8001180:	4813      	ldr	r0, [pc, #76]	@ (80011d0 <menu_display+0x280>)
 8001182:	f7ff fae8 	bl	8000756 <lcd_puts>
        if (is_selecting_frequency)
 8001186:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <menu_display+0x2c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d052      	beq.n	8001234 <menu_display+0x2e4>
        	lcd_gotoxy(&lcd1, 3, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	2103      	movs	r1, #3
 8001192:	480f      	ldr	r0, [pc, #60]	@ (80011d0 <menu_display+0x280>)
 8001194:	f7ff fa7c 	bl	8000690 <lcd_gotoxy>
        	lcd_puts(&lcd1, "                  ");
 8001198:	4924      	ldr	r1, [pc, #144]	@ (800122c <menu_display+0x2dc>)
 800119a:	480d      	ldr	r0, [pc, #52]	@ (80011d0 <menu_display+0x280>)
 800119c:	f7ff fadb 	bl	8000756 <lcd_puts>
        	lcd_gotoxy(&lcd1, 3, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2103      	movs	r1, #3
 80011a4:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <menu_display+0x280>)
 80011a6:	f7ff fa73 	bl	8000690 <lcd_gotoxy>
        	format_number(set_value, set_value_buffer);
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <menu_display+0x2e0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f107 0214 	add.w	r2, r7, #20
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f8b1 	bl	800131c <format_number>
        	lcd_puts(&lcd1, set_value_buffer);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <menu_display+0x280>)
 80011c2:	f7ff fac8 	bl	8000756 <lcd_puts>
 80011c6:	e04b      	b.n	8001260 <menu_display+0x310>
 80011c8:	2000018c 	.word	0x2000018c
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000170 	.word	0x20000170
 80011d4:	20000004 	.word	0x20000004
 80011d8:	20000000 	.word	0x20000000
 80011dc:	0800451c 	.word	0x0800451c
 80011e0:	08004520 	.word	0x08004520
 80011e4:	08004524 	.word	0x08004524
 80011e8:	20000188 	.word	0x20000188
 80011ec:	08004528 	.word	0x08004528
 80011f0:	08004530 	.word	0x08004530
 80011f4:	2000017c 	.word	0x2000017c
 80011f8:	08004538 	.word	0x08004538
 80011fc:	0800453c 	.word	0x0800453c
 8001200:	20000194 	.word	0x20000194
 8001204:	2000000c 	.word	0x2000000c
 8001208:	08004540 	.word	0x08004540
 800120c:	08004548 	.word	0x08004548
 8001210:	200001a0 	.word	0x200001a0
 8001214:	08004550 	.word	0x08004550
 8001218:	08004554 	.word	0x08004554
 800121c:	20000198 	.word	0x20000198
 8001220:	08004578 	.word	0x08004578
 8001224:	0800455c 	.word	0x0800455c
 8001228:	2000019c 	.word	0x2000019c
 800122c:	08004560 	.word	0x08004560
 8001230:	20000184 	.word	0x20000184
        	lcd_gotoxy(&lcd1, 3, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2103      	movs	r1, #3
 8001238:	4831      	ldr	r0, [pc, #196]	@ (8001300 <menu_display+0x3b0>)
 800123a:	f7ff fa29 	bl	8000690 <lcd_gotoxy>
        	lcd_gotoxy(&lcd1, 3, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	2103      	movs	r1, #3
 8001242:	482f      	ldr	r0, [pc, #188]	@ (8001300 <menu_display+0x3b0>)
 8001244:	f7ff fa24 	bl	8000690 <lcd_gotoxy>
        	format_number(last_set_value, set_value_buffer);
 8001248:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <menu_display+0x3b4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	463a      	mov	r2, r7
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f863 	bl	800131c <format_number>
        	lcd_puts(&lcd1, set_value_buffer);
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4829      	ldr	r0, [pc, #164]	@ (8001300 <menu_display+0x3b0>)
 800125c:	f7ff fa7b 	bl	8000756 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	4826      	ldr	r0, [pc, #152]	@ (8001300 <menu_display+0x3b0>)
 8001266:	f7ff fa13 	bl	8000690 <lcd_gotoxy>
        lcd_puts(&lcd1, " ");
 800126a:	4927      	ldr	r1, [pc, #156]	@ (8001308 <menu_display+0x3b8>)
 800126c:	4824      	ldr	r0, [pc, #144]	@ (8001300 <menu_display+0x3b0>)
 800126e:	f7ff fa72 	bl	8000756 <lcd_puts>
        lcd_gotoxy(&lcd1, 0, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	2100      	movs	r1, #0
 8001276:	4822      	ldr	r0, [pc, #136]	@ (8001300 <menu_display+0x3b0>)
 8001278:	f7ff fa0a 	bl	8000690 <lcd_gotoxy>
        lcd_puts(&lcd1, " ");
 800127c:	4922      	ldr	r1, [pc, #136]	@ (8001308 <menu_display+0x3b8>)
 800127e:	4820      	ldr	r0, [pc, #128]	@ (8001300 <menu_display+0x3b0>)
 8001280:	f7ff fa69 	bl	8000756 <lcd_puts>
        lcd_gotoxy(&lcd1, 13, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	210d      	movs	r1, #13
 8001288:	481d      	ldr	r0, [pc, #116]	@ (8001300 <menu_display+0x3b0>)
 800128a:	f7ff fa01 	bl	8000690 <lcd_gotoxy>
        lcd_puts(&lcd1, " ");
 800128e:	491e      	ldr	r1, [pc, #120]	@ (8001308 <menu_display+0x3b8>)
 8001290:	481b      	ldr	r0, [pc, #108]	@ (8001300 <menu_display+0x3b0>)
 8001292:	f7ff fa60 	bl	8000756 <lcd_puts>
        if (!is_selecting_scaler || !is_selecting_frequency) {  // Hanya tampilkan arrow jika tidak memilih scaler
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <menu_display+0x3bc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <menu_display+0x356>
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <menu_display+0x3c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d128      	bne.n	80012f8 <menu_display+0x3a8>
            if (secondary_menu_pos == 0) {  // Arrow di "SCALE"
 80012a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <menu_display+0x3c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <menu_display+0x372>
                lcd_gotoxy(&lcd1, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	4813      	ldr	r0, [pc, #76]	@ (8001300 <menu_display+0x3b0>)
 80012b4:	f7ff f9ec 	bl	8000690 <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 80012b8:	4917      	ldr	r1, [pc, #92]	@ (8001318 <menu_display+0x3c8>)
 80012ba:	4811      	ldr	r0, [pc, #68]	@ (8001300 <menu_display+0x3b0>)
 80012bc:	f7ff fa4b 	bl	8000756 <lcd_puts>
}
 80012c0:	e01a      	b.n	80012f8 <menu_display+0x3a8>
            } else if (secondary_menu_pos == 1) {  // Arrow di "F"
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <menu_display+0x3c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d109      	bne.n	80012de <menu_display+0x38e>
                lcd_gotoxy(&lcd1, 0, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2100      	movs	r1, #0
 80012ce:	480c      	ldr	r0, [pc, #48]	@ (8001300 <menu_display+0x3b0>)
 80012d0:	f7ff f9de 	bl	8000690 <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 80012d4:	4910      	ldr	r1, [pc, #64]	@ (8001318 <menu_display+0x3c8>)
 80012d6:	480a      	ldr	r0, [pc, #40]	@ (8001300 <menu_display+0x3b0>)
 80012d8:	f7ff fa3d 	bl	8000756 <lcd_puts>
}
 80012dc:	e00c      	b.n	80012f8 <menu_display+0x3a8>
            } else if (secondary_menu_pos == 2) {  // Arrow di "OK"
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <menu_display+0x3c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d108      	bne.n	80012f8 <menu_display+0x3a8>
                lcd_gotoxy(&lcd1, 13, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	210d      	movs	r1, #13
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <menu_display+0x3b0>)
 80012ec:	f7ff f9d0 	bl	8000690 <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 80012f0:	4909      	ldr	r1, [pc, #36]	@ (8001318 <menu_display+0x3c8>)
 80012f2:	4803      	ldr	r0, [pc, #12]	@ (8001300 <menu_display+0x3b0>)
 80012f4:	f7ff fa2f 	bl	8000756 <lcd_puts>
}
 80012f8:	bf00      	nop
 80012fa:	3740      	adds	r7, #64	@ 0x40
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000170 	.word	0x20000170
 8001304:	200001a4 	.word	0x200001a4
 8001308:	08004538 	.word	0x08004538
 800130c:	20000194 	.word	0x20000194
 8001310:	200001a0 	.word	0x200001a0
 8001314:	20000190 	.word	0x20000190
 8001318:	0800453c 	.word	0x0800453c

0800131c <format_number>:

void format_number(uint32_t value, char *buffer) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	@ 0x30
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    char temp[16];
    sprintf(temp, "%u", value);  // Konversi angka ke string tanpa koma
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4927      	ldr	r1, [pc, #156]	@ (80013cc <format_number+0xb0>)
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fc48 	bl	8003bc4 <siprintf>
    int len = strlen(temp);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4618      	mov	r0, r3
 800133a:	f7fe ff51 	bl	80001e0 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	623b      	str	r3, [r7, #32]
    int comma_count = (len - 1) / 3;  // Hitung jumlah koma yang diperlukan
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	3b01      	subs	r3, #1
 8001346:	4a22      	ldr	r2, [pc, #136]	@ (80013d0 <format_number+0xb4>)
 8001348:	fb82 1203 	smull	r1, r2, r2, r3
 800134c:	17db      	asrs	r3, r3, #31
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	61fb      	str	r3, [r7, #28]
    int new_len = len + comma_count;
 8001352:	6a3a      	ldr	r2, [r7, #32]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	4413      	add	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]

    buffer[new_len] = '\0';  // Terminasi string
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	4413      	add	r3, r2
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
    int j = new_len - 1;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3b01      	subs	r3, #1
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int counter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Salin karakter dan tambahkan koma
    for (int i = len - 1; i >= 0; i--) {
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	3b01      	subs	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
 8001374:	e021      	b.n	80013ba <format_number+0x9e>
        buffer[j--] = temp[i];
 8001376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	f107 0108 	add.w	r1, r7, #8
 8001386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001388:	440a      	add	r2, r1
 800138a:	7812      	ldrb	r2, [r2, #0]
 800138c:	701a      	strb	r2, [r3, #0]
        counter++;
 800138e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001390:	3301      	adds	r3, #1
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (counter == 3 && i > 0) {
 8001394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001396:	2b03      	cmp	r3, #3
 8001398:	d10c      	bne.n	80013b4 <format_number+0x98>
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	2b00      	cmp	r3, #0
 800139e:	dd09      	ble.n	80013b4 <format_number+0x98>
            buffer[j--] = '.';  // Tambahkan koma
 80013a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013a6:	461a      	mov	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	222e      	movs	r2, #46	@ 0x2e
 80013ae:	701a      	strb	r2, [r3, #0]
            counter = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = len - 1; i >= 0; i--) {
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	3b01      	subs	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dada      	bge.n	8001376 <format_number+0x5a>
        }
    }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3730      	adds	r7, #48	@ 0x30
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08004574 	.word	0x08004574
 80013d0:	55555556 	.word	0x55555556

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	@ 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <HAL_ADC_MspInit+0x7c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d127      	bne.n	8001496 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_ADC_MspInit+0x80>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a15      	ldr	r2, [pc, #84]	@ (80014a4 <HAL_ADC_MspInit+0x80>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <HAL_ADC_MspInit+0x80>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_ADC_MspInit+0x80>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <HAL_ADC_MspInit+0x80>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <HAL_ADC_MspInit+0x80>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800147e:	2302      	movs	r3, #2
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <HAL_ADC_MspInit+0x84>)
 8001492:	f000 fd5f 	bl	8001f54 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40012000 	.word	0x40012000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	@ (8001530 <HAL_I2C_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12b      	bne.n	8001526 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_I2C_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a17      	ldr	r2, [pc, #92]	@ (8001534 <HAL_I2C_MspInit+0x88>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_I2C_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ea:	23c0      	movs	r3, #192	@ 0xc0
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ee:	2312      	movs	r3, #18
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014fa:	2304      	movs	r3, #4
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <HAL_I2C_MspInit+0x8c>)
 8001506:	f000 fd25 	bl	8001f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_I2C_MspInit+0x88>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a08      	ldr	r2, [pc, #32]	@ (8001534 <HAL_I2C_MspInit+0x88>)
 8001514:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_I2C_MspInit+0x88>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	@ 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40005400 	.word	0x40005400
 8001534:	40023800 	.word	0x40023800
 8001538:	40020400 	.word	0x40020400

0800153c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <HAL_TIM_Encoder_MspInit+0x94>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d133      	bne.n	80015c6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_TIM_Encoder_MspInit+0x98>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001596:	23c0      	movs	r3, #192	@ 0xc0
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015a6:	2302      	movs	r3, #2
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4809      	ldr	r0, [pc, #36]	@ (80015d8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80015b2:	f000 fccf 	bl	8001f54 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	201d      	movs	r0, #29
 80015bc:	f000 fc93 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c0:	201d      	movs	r0, #29
 80015c2:	f000 fcac 	bl	8001f1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 f8d7 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}

0800163a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_SW_Pin);
 800163e:	2001      	movs	r0, #1
 8001640:	f000 fe26 	bl	8002290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <TIM3_IRQHandler+0x10>)
 800164e:	f002 f86d 	bl	800372c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000128 	.word	0x20000128

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f002 fac2 	bl	8003c14 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20010000 	.word	0x20010000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	200001b0 	.word	0x200001b0
 80016c4:	20000300 	.word	0x20000300

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001724 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016f0:	f7ff ffea 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	@ (800172c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	@ (8001738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f002 fa81 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff f8f1 	bl	8000904 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001730:	080045ec 	.word	0x080045ec
  ldr r2, =_sbss
 8001734:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001738:	20000300 	.word	0x20000300

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 fbb1 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f000 f808 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fe2e 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_InitTick+0x54>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_InitTick+0x58>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fbc9 	bl	8001f3a <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 fb91 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <HAL_InitTick+0x5c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000010 	.word	0x20000010
 80017dc:	20000018 	.word	0x20000018
 80017e0:	20000014 	.word	0x20000014

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000018 	.word	0x20000018
 8001808:	200001b4 	.word	0x200001b4

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200001b4 	.word	0x200001b4

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ffee 	bl	800180c <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_Delay+0x44>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184a:	bf00      	nop
 800184c:	f7ff ffde 	bl	800180c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000018 	.word	0x20000018

0800186c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e033      	b.n	80018ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fdca 	bl	8001424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d118      	bne.n	80018dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018b2:	f023 0302 	bic.w	r3, r3, #2
 80018b6:	f043 0202 	orr.w	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f93a 	bl	8001b38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f023 0303 	bic.w	r3, r3, #3
 80018d2:	f043 0201 	orr.w	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018da:	e001      	b.n	80018e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1c>
 800190c:	2302      	movs	r3, #2
 800190e:	e105      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x228>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b09      	cmp	r3, #9
 800191e:	d925      	bls.n	800196c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68d9      	ldr	r1, [r3, #12]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	3b1e      	subs	r3, #30
 8001936:	2207      	movs	r2, #7
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43da      	mvns	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	400a      	ands	r2, r1
 8001944:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68d9      	ldr	r1, [r3, #12]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	4618      	mov	r0, r3
 8001958:	4603      	mov	r3, r0
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4403      	add	r3, r0
 800195e:	3b1e      	subs	r3, #30
 8001960:	409a      	lsls	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	e022      	b.n	80019b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6919      	ldr	r1, [r3, #16]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	2207      	movs	r2, #7
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	400a      	ands	r2, r1
 800198e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6919      	ldr	r1, [r3, #16]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4403      	add	r3, r0
 80019a8:	409a      	lsls	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d824      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b05      	subs	r3, #5
 80019cc:	221f      	movs	r2, #31
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	400a      	ands	r2, r1
 80019da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b05      	subs	r3, #5
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a02:	e04c      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d824      	bhi.n	8001a56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b23      	subs	r3, #35	@ 0x23
 8001a1e:	221f      	movs	r2, #31
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43da      	mvns	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b23      	subs	r3, #35	@ 0x23
 8001a48:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a54:	e023      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3b41      	subs	r3, #65	@ 0x41
 8001a68:	221f      	movs	r2, #31
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	400a      	ands	r2, r1
 8001a76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b41      	subs	r3, #65	@ 0x41
 8001a92:	fa00 f203 	lsl.w	r2, r0, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_ADC_ConfigChannel+0x234>)
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a21      	ldr	r2, [pc, #132]	@ (8001b2c <HAL_ADC_ConfigChannel+0x238>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1cc>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b12      	cmp	r3, #18
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <HAL_ADC_ConfigChannel+0x238>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d123      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x21e>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d003      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x1e6>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b11      	cmp	r3, #17
 8001ad8:	d11b      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d111      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_ADC_ConfigChannel+0x23c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a10      	ldr	r2, [pc, #64]	@ (8001b34 <HAL_ADC_ConfigChannel+0x240>)
 8001af4:	fba2 2303 	umull	r2, r3, r2, r3
 8001af8:	0c9a      	lsrs	r2, r3, #18
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b04:	e002      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f9      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40012300 	.word	0x40012300
 8001b2c:	40012000 	.word	0x40012000
 8001b30:	20000010 	.word	0x20000010
 8001b34:	431bde83 	.word	0x431bde83

08001b38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b40:	4b79      	ldr	r3, [pc, #484]	@ (8001d28 <ADC_Init+0x1f0>)
 8001b42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	021a      	lsls	r2, r3, #8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6899      	ldr	r1, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bca:	4a58      	ldr	r2, [pc, #352]	@ (8001d2c <ADC_Init+0x1f4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d022      	beq.n	8001c16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6899      	ldr	r1, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	e00f      	b.n	8001c36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0202 	bic.w	r2, r2, #2
 8001c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6899      	ldr	r1, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7e1b      	ldrb	r3, [r3, #24]
 8001c50:	005a      	lsls	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01b      	beq.n	8001c9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	035a      	lsls	r2, r3, #13
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	e007      	b.n	8001cac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001caa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	051a      	lsls	r2, r3, #20
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6899      	ldr	r1, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cee:	025a      	lsls	r2, r3, #9
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6899      	ldr	r1, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	029a      	lsls	r2, r3, #10
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	609a      	str	r2, [r3, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40012300 	.word	0x40012300
 8001d2c:	0f000001 	.word	0x0f000001

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	@ (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	@ (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	@ (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff3e 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff8e 	bl	8001e24 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff31 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	@ 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e159      	b.n	8002224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f70:	2201      	movs	r2, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f040 8148 	bne.w	800221e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d005      	beq.n	8001fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d130      	bne.n	8002008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 0201 	and.w	r2, r3, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b03      	cmp	r3, #3
 8002012:	d017      	beq.n	8002044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d123      	bne.n	8002098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	08da      	lsrs	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3208      	adds	r2, #8
 8002058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	220f      	movs	r2, #15
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	69b9      	ldr	r1, [r7, #24]
 8002094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0203 	and.w	r2, r3, #3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a2 	beq.w	800221e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b57      	ldr	r3, [pc, #348]	@ (800223c <HAL_GPIO_Init+0x2e8>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	4a56      	ldr	r2, [pc, #344]	@ (800223c <HAL_GPIO_Init+0x2e8>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ea:	4b54      	ldr	r3, [pc, #336]	@ (800223c <HAL_GPIO_Init+0x2e8>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f6:	4a52      	ldr	r2, [pc, #328]	@ (8002240 <HAL_GPIO_Init+0x2ec>)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	3302      	adds	r3, #2
 80020fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a49      	ldr	r2, [pc, #292]	@ (8002244 <HAL_GPIO_Init+0x2f0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d019      	beq.n	8002156 <HAL_GPIO_Init+0x202>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a48      	ldr	r2, [pc, #288]	@ (8002248 <HAL_GPIO_Init+0x2f4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0x1fe>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a47      	ldr	r2, [pc, #284]	@ (800224c <HAL_GPIO_Init+0x2f8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00d      	beq.n	800214e <HAL_GPIO_Init+0x1fa>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a46      	ldr	r2, [pc, #280]	@ (8002250 <HAL_GPIO_Init+0x2fc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x1f6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a45      	ldr	r2, [pc, #276]	@ (8002254 <HAL_GPIO_Init+0x300>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_GPIO_Init+0x1f2>
 8002142:	2304      	movs	r3, #4
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x204>
 8002146:	2307      	movs	r3, #7
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x204>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x204>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x204>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x204>
 8002156:	2300      	movs	r3, #0
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002168:	4935      	ldr	r1, [pc, #212]	@ (8002240 <HAL_GPIO_Init+0x2ec>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002176:	4b38      	ldr	r3, [pc, #224]	@ (8002258 <HAL_GPIO_Init+0x304>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219a:	4a2f      	ldr	r2, [pc, #188]	@ (8002258 <HAL_GPIO_Init+0x304>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002258 <HAL_GPIO_Init+0x304>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c4:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <HAL_GPIO_Init+0x304>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ca:	4b23      	ldr	r3, [pc, #140]	@ (8002258 <HAL_GPIO_Init+0x304>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <HAL_GPIO_Init+0x304>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f4:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <HAL_GPIO_Init+0x304>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002218:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <HAL_GPIO_Init+0x304>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	f67f aea2 	bls.w	8001f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3724      	adds	r7, #36	@ 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40013800 	.word	0x40013800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400
 800224c:	40020800 	.word	0x40020800
 8002250:	40020c00 	.word	0x40020c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a6:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fa94 	bl	80007dc <HAL_GPIO_EXTI_Callback>
  }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40013c00 	.word	0x40013c00

080022c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e12b      	b.n	800252a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff f8e0 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	@ 0x24
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002324:	f001 f89a 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8002328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a81      	ldr	r2, [pc, #516]	@ (8002534 <HAL_I2C_Init+0x274>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d807      	bhi.n	8002344 <HAL_I2C_Init+0x84>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a80      	ldr	r2, [pc, #512]	@ (8002538 <HAL_I2C_Init+0x278>)
 8002338:	4293      	cmp	r3, r2
 800233a:	bf94      	ite	ls
 800233c:	2301      	movls	r3, #1
 800233e:	2300      	movhi	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e006      	b.n	8002352 <HAL_I2C_Init+0x92>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4a7d      	ldr	r2, [pc, #500]	@ (800253c <HAL_I2C_Init+0x27c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	bf94      	ite	ls
 800234c:	2301      	movls	r3, #1
 800234e:	2300      	movhi	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0e7      	b.n	800252a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a78      	ldr	r2, [pc, #480]	@ (8002540 <HAL_I2C_Init+0x280>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0c9b      	lsrs	r3, r3, #18
 8002364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a6a      	ldr	r2, [pc, #424]	@ (8002534 <HAL_I2C_Init+0x274>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d802      	bhi.n	8002394 <HAL_I2C_Init+0xd4>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3301      	adds	r3, #1
 8002392:	e009      	b.n	80023a8 <HAL_I2C_Init+0xe8>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	4a69      	ldr	r2, [pc, #420]	@ (8002544 <HAL_I2C_Init+0x284>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	3301      	adds	r3, #1
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	495c      	ldr	r1, [pc, #368]	@ (8002534 <HAL_I2C_Init+0x274>)
 80023c4:	428b      	cmp	r3, r1
 80023c6:	d819      	bhi.n	80023fc <HAL_I2C_Init+0x13c>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e59      	subs	r1, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d6:	1c59      	adds	r1, r3, #1
 80023d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023dc:	400b      	ands	r3, r1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_I2C_Init+0x138>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e59      	subs	r1, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	e051      	b.n	800249c <HAL_I2C_Init+0x1dc>
 80023f8:	2304      	movs	r3, #4
 80023fa:	e04f      	b.n	800249c <HAL_I2C_Init+0x1dc>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d111      	bne.n	8002428 <HAL_I2C_Init+0x168>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e58      	subs	r0, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e012      	b.n	800244e <HAL_I2C_Init+0x18e>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Init+0x196>
 8002452:	2301      	movs	r3, #1
 8002454:	e022      	b.n	800249c <HAL_I2C_Init+0x1dc>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10e      	bne.n	800247c <HAL_I2C_Init+0x1bc>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1e58      	subs	r0, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	440b      	add	r3, r1
 800246c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002470:	3301      	adds	r3, #1
 8002472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800247a:	e00f      	b.n	800249c <HAL_I2C_Init+0x1dc>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e58      	subs	r0, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	0099      	lsls	r1, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002492:	3301      	adds	r3, #1
 8002494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	6809      	ldr	r1, [r1, #0]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6911      	ldr	r1, [r2, #16]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68d2      	ldr	r2, [r2, #12]
 80024d6:	4311      	orrs	r1, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	430b      	orrs	r3, r1
 80024de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	000186a0 	.word	0x000186a0
 8002538:	001e847f 	.word	0x001e847f
 800253c:	003d08ff 	.word	0x003d08ff
 8002540:	431bde83 	.word	0x431bde83
 8002544:	10624dd3 	.word	0x10624dd3

08002548 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af02      	add	r7, sp, #8
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	461a      	mov	r2, r3
 8002554:	460b      	mov	r3, r1
 8002556:	817b      	strh	r3, [r7, #10]
 8002558:	4613      	mov	r3, r2
 800255a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff f956 	bl	800180c <HAL_GetTick>
 8002560:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	f040 80e0 	bne.w	8002730 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2319      	movs	r3, #25
 8002576:	2201      	movs	r2, #1
 8002578:	4970      	ldr	r1, [pc, #448]	@ (800273c <HAL_I2C_Master_Transmit+0x1f4>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f964 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	e0d3      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_I2C_Master_Transmit+0x50>
 8002594:	2302      	movs	r3, #2
 8002596:	e0cc      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d007      	beq.n	80025be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2221      	movs	r2, #33	@ 0x21
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2210      	movs	r2, #16
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a50      	ldr	r2, [pc, #320]	@ (8002740 <HAL_I2C_Master_Transmit+0x1f8>)
 80025fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002600:	8979      	ldrh	r1, [r7, #10]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6a3a      	ldr	r2, [r7, #32]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f89c 	bl	8002744 <I2C_MasterRequestWrite>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e08d      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800262c:	e066      	b.n	80026fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fa22 	bl	8002a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	2b04      	cmp	r3, #4
 8002644:	d107      	bne.n	8002656 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06b      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b04      	cmp	r3, #4
 8002696:	d11b      	bne.n	80026d0 <HAL_I2C_Master_Transmit+0x188>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d017      	beq.n	80026d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	6a39      	ldr	r1, [r7, #32]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fa19 	bl	8002b0c <I2C_WaitOnBTFFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d107      	bne.n	80026f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e01a      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	d194      	bne.n	800262e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	00100002 	.word	0x00100002
 8002740:	ffff0000 	.word	0xffff0000

08002744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	460b      	mov	r3, r1
 8002752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d006      	beq.n	800276e <I2C_MasterRequestWrite+0x2a>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d003      	beq.n	800276e <I2C_MasterRequestWrite+0x2a>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800276c:	d108      	bne.n	8002780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e00b      	b.n	8002798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	2b12      	cmp	r3, #18
 8002786:	d107      	bne.n	8002798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f84f 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027be:	d103      	bne.n	80027c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e035      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027d4:	d108      	bne.n	80027e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	e01b      	b.n	8002820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	11db      	asrs	r3, r3, #7
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0306 	and.w	r3, r3, #6
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f063 030f 	orn	r3, r3, #15
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	490e      	ldr	r1, [pc, #56]	@ (8002840 <I2C_MasterRequestWrite+0xfc>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f898 	bl	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e010      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4907      	ldr	r1, [pc, #28]	@ (8002844 <I2C_MasterRequestWrite+0x100>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f888 	bl	800293c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	00010008 	.word	0x00010008
 8002844:	00010002 	.word	0x00010002

08002848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002858:	e048      	b.n	80028ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d044      	beq.n	80028ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7fe ffd3 	bl	800180c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d139      	bne.n	80028ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10d      	bne.n	800289e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	43da      	mvns	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4013      	ands	r3, r2
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	e00c      	b.n	80028b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	43da      	mvns	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d116      	bne.n	80028ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e023      	b.n	8002934 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	0c1b      	lsrs	r3, r3, #16
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10d      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	e00c      	b.n	800292c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	43da      	mvns	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	429a      	cmp	r2, r3
 8002930:	d093      	beq.n	800285a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800294a:	e071      	b.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295a:	d123      	bne.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002974:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	f043 0204 	orr.w	r2, r3, #4
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e067      	b.n	8002a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d041      	beq.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ac:	f7fe ff2e 	bl	800180c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d302      	bcc.n	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d136      	bne.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d10c      	bne.n	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	e00b      	b.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	43da      	mvns	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e021      	b.n	8002a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	0c1b      	lsrs	r3, r3, #16
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10c      	bne.n	8002a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e00b      	b.n	8002a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf14      	ite	ne
 8002a66:	2301      	movne	r3, #1
 8002a68:	2300      	moveq	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f af6d 	bne.w	800294c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a88:	e034      	b.n	8002af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f886 	bl	8002b9c <I2C_IsAcknowledgeFailed>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e034      	b.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d028      	beq.n	8002af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7fe feb3 	bl	800180c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11d      	bne.n	8002af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	2b80      	cmp	r3, #128	@ 0x80
 8002ac4:	d016      	beq.n	8002af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e007      	b.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afe:	2b80      	cmp	r3, #128	@ 0x80
 8002b00:	d1c3      	bne.n	8002a8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b18:	e034      	b.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f83e 	bl	8002b9c <I2C_IsAcknowledgeFailed>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e034      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d028      	beq.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7fe fe6b 	bl	800180c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d11d      	bne.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d016      	beq.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d1c3      	bne.n	8002b1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb2:	d11b      	bne.n	8002bec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f043 0204 	orr.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e267      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d075      	beq.n	8002d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c1a:	4b88      	ldr	r3, [pc, #544]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d00c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c26:	4b85      	ldr	r3, [pc, #532]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d112      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4b82      	ldr	r3, [pc, #520]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	4b7e      	ldr	r3, [pc, #504]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d05b      	beq.n	8002d04 <HAL_RCC_OscConfig+0x108>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d157      	bne.n	8002d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e242      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x74>
 8002c62:	4b76      	ldr	r3, [pc, #472]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a75      	ldr	r2, [pc, #468]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e01d      	b.n	8002cac <HAL_RCC_OscConfig+0xb0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x98>
 8002c7a:	4b70      	ldr	r3, [pc, #448]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6f      	ldr	r2, [pc, #444]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b6d      	ldr	r3, [pc, #436]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6c      	ldr	r2, [pc, #432]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0xb0>
 8002c94:	4b69      	ldr	r3, [pc, #420]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a68      	ldr	r2, [pc, #416]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b66      	ldr	r3, [pc, #408]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a65      	ldr	r2, [pc, #404]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fdaa 	bl	800180c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fda6 	bl	800180c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	@ 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e207      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b5b      	ldr	r3, [pc, #364]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0xc0>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fd96 	bl	800180c <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fd92 	bl	800180c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	@ 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1f3      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	4b51      	ldr	r3, [pc, #324]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xe8>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d063      	beq.n	8002dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d12:	4b4a      	ldr	r3, [pc, #296]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1e:	4b47      	ldr	r3, [pc, #284]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d11c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b44      	ldr	r3, [pc, #272]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d116      	bne.n	8002d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_RCC_OscConfig+0x152>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1c7      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4937      	ldr	r1, [pc, #220]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	e03a      	b.n	8002dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6c:	4b34      	ldr	r3, [pc, #208]	@ (8002e40 <HAL_RCC_OscConfig+0x244>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe fd4b 	bl	800180c <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fd47 	bl	800180c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1a8      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4925      	ldr	r1, [pc, #148]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	e015      	b.n	8002dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_RCC_OscConfig+0x244>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe fd2a 	bl	800180c <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fd26 	bl	800180c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e187      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d036      	beq.n	8002e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_RCC_OscConfig+0x248>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7fe fd0a 	bl	800180c <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fd06 	bl	800180c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e167      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x200>
 8002e1a:	e01b      	b.n	8002e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_RCC_OscConfig+0x248>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7fe fcf3 	bl	800180c <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	e00e      	b.n	8002e48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7fe fcef 	bl	800180c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d907      	bls.n	8002e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e150      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	42470000 	.word	0x42470000
 8002e44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b88      	ldr	r3, [pc, #544]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ea      	bne.n	8002e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8097 	beq.w	8002f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b81      	ldr	r3, [pc, #516]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b7d      	ldr	r3, [pc, #500]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e82:	4b7a      	ldr	r3, [pc, #488]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b77      	ldr	r3, [pc, #476]	@ (8003070 <HAL_RCC_OscConfig+0x474>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b74      	ldr	r3, [pc, #464]	@ (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a73      	ldr	r2, [pc, #460]	@ (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fcaf 	bl	800180c <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7fe fcab 	bl	800180c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e10c      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x2ea>
 8002ed8:	4b64      	ldr	r3, [pc, #400]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002edc:	4a63      	ldr	r2, [pc, #396]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee4:	e01c      	b.n	8002f20 <HAL_RCC_OscConfig+0x324>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x30c>
 8002eee:	4b5f      	ldr	r3, [pc, #380]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	4a5e      	ldr	r2, [pc, #376]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efa:	4b5c      	ldr	r3, [pc, #368]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	4a5b      	ldr	r2, [pc, #364]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0x324>
 8002f08:	4b58      	ldr	r3, [pc, #352]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0c:	4a57      	ldr	r2, [pc, #348]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f14:	4b55      	ldr	r3, [pc, #340]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f18:	4a54      	ldr	r2, [pc, #336]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d015      	beq.n	8002f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7fe fc70 	bl	800180c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe fc6c 	bl	800180c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0cb      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	4b49      	ldr	r3, [pc, #292]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ee      	beq.n	8002f30 <HAL_RCC_OscConfig+0x334>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7fe fc5a 	bl	800180c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fc56 	bl	800180c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0b5      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f72:	4b3e      	ldr	r3, [pc, #248]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ee      	bne.n	8002f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d105      	bne.n	8002f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f84:	4b39      	ldr	r3, [pc, #228]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	4a38      	ldr	r2, [pc, #224]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80a1 	beq.w	80030dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9a:	4b34      	ldr	r3, [pc, #208]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d05c      	beq.n	8003060 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d141      	bne.n	8003032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_OscConfig+0x478>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fc2a 	bl	800180c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fc26 	bl	800180c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e087      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b27      	ldr	r3, [pc, #156]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	019b      	lsls	r3, r3, #6
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	491b      	ldr	r1, [pc, #108]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x478>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fbff 	bl	800180c <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe fbfb 	bl	800180c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e05c      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003024:	4b11      	ldr	r3, [pc, #68]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x416>
 8003030:	e054      	b.n	80030dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <HAL_RCC_OscConfig+0x478>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fbe8 	bl	800180c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fbe4 	bl	800180c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e045      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_RCC_OscConfig+0x470>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x444>
 800305e:	e03d      	b.n	80030dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e038      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
 8003074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <HAL_RCC_OscConfig+0x4ec>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d028      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d121      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11a      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030a8:	4013      	ands	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d111      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	3b01      	subs	r3, #1
 80030c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800

080030ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0cc      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b68      	ldr	r3, [pc, #416]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d90c      	bls.n	8003128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b65      	ldr	r3, [pc, #404]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a58      	ldr	r2, [pc, #352]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800314a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a52      	ldr	r2, [pc, #328]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d044      	beq.n	800320c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d119      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	4b3f      	ldr	r3, [pc, #252]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e06f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e067      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ca:	4b37      	ldr	r3, [pc, #220]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 0203 	bic.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4934      	ldr	r1, [pc, #208]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031dc:	f7fe fb16 	bl	800180c <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e4:	f7fe fb12 	bl	800180c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e04f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	4b2b      	ldr	r3, [pc, #172]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 020c 	and.w	r2, r3, #12
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	429a      	cmp	r2, r3
 800320a:	d1eb      	bne.n	80031e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800320c:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d20c      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b22      	ldr	r3, [pc, #136]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	@ (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325e:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4602      	mov	r2, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	490a      	ldr	r1, [pc, #40]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	5ccb      	ldrb	r3, [r1, r3]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fa76 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023c00 	.word	0x40023c00
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08004590 	.word	0x08004590
 80032b0:	20000010 	.word	0x20000010
 80032b4:	20000014 	.word	0x20000014

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b090      	sub	sp, #64	@ 0x40
 80032be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d0:	4b59      	ldr	r3, [pc, #356]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d00d      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032dc:	2b08      	cmp	r3, #8
 80032de:	f200 80a1 	bhi.w	8003424 <HAL_RCC_GetSysClockFreq+0x16c>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x34>
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ea:	e09b      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b53      	ldr	r3, [pc, #332]	@ (800343c <HAL_RCC_GetSysClockFreq+0x184>)
 80032ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032f0:	e09b      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f2:	4b53      	ldr	r3, [pc, #332]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x188>)
 80032f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032f6:	e098      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x180>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003300:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003302:	4b4d      	ldr	r3, [pc, #308]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x180>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d028      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330e:	4b4a      	ldr	r3, [pc, #296]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x180>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	2200      	movs	r2, #0
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	627a      	str	r2, [r7, #36]	@ 0x24
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003320:	2100      	movs	r1, #0
 8003322:	4b47      	ldr	r3, [pc, #284]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x188>)
 8003324:	fb03 f201 	mul.w	r2, r3, r1
 8003328:	2300      	movs	r3, #0
 800332a:	fb00 f303 	mul.w	r3, r0, r3
 800332e:	4413      	add	r3, r2
 8003330:	4a43      	ldr	r2, [pc, #268]	@ (8003440 <HAL_RCC_GetSysClockFreq+0x188>)
 8003332:	fba0 1202 	umull	r1, r2, r0, r2
 8003336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003338:	460a      	mov	r2, r1
 800333a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800333c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800333e:	4413      	add	r3, r2
 8003340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003344:	2200      	movs	r2, #0
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	61fa      	str	r2, [r7, #28]
 800334a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003352:	f7fc ff9d 	bl	8000290 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4613      	mov	r3, r2
 800335c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800335e:	e053      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003360:	4b35      	ldr	r3, [pc, #212]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x180>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	099b      	lsrs	r3, r3, #6
 8003366:	2200      	movs	r2, #0
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	617a      	str	r2, [r7, #20]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003372:	f04f 0b00 	mov.w	fp, #0
 8003376:	4652      	mov	r2, sl
 8003378:	465b      	mov	r3, fp
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	0159      	lsls	r1, r3, #5
 8003384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003388:	0150      	lsls	r0, r2, #5
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	ebb2 080a 	subs.w	r8, r2, sl
 8003392:	eb63 090b 	sbc.w	r9, r3, fp
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033aa:	ebb2 0408 	subs.w	r4, r2, r8
 80033ae:	eb63 0509 	sbc.w	r5, r3, r9
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	00eb      	lsls	r3, r5, #3
 80033bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033c0:	00e2      	lsls	r2, r4, #3
 80033c2:	4614      	mov	r4, r2
 80033c4:	461d      	mov	r5, r3
 80033c6:	eb14 030a 	adds.w	r3, r4, sl
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	eb45 030b 	adc.w	r3, r5, fp
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033de:	4629      	mov	r1, r5
 80033e0:	028b      	lsls	r3, r1, #10
 80033e2:	4621      	mov	r1, r4
 80033e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e8:	4621      	mov	r1, r4
 80033ea:	028a      	lsls	r2, r1, #10
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f2:	2200      	movs	r2, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	60fa      	str	r2, [r7, #12]
 80033f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033fc:	f7fc ff48 	bl	8000290 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4613      	mov	r3, r2
 8003406:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x180>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	3301      	adds	r3, #1
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003418:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003422:	e002      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_RCC_GetSysClockFreq+0x184>)
 8003426:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800342c:	4618      	mov	r0, r3
 800342e:	3740      	adds	r7, #64	@ 0x40
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	00f42400 	.word	0x00f42400
 8003440:	017d7840 	.word	0x017d7840

08003444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b03      	ldr	r3, [pc, #12]	@ (8003458 <HAL_RCC_GetHCLKFreq+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000010 	.word	0x20000010

0800345c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003460:	f7ff fff0 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0a9b      	lsrs	r3, r3, #10
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4903      	ldr	r1, [pc, #12]	@ (8003480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	080045a0 	.word	0x080045a0

08003484 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e097      	b.n	80035c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7fe f845 	bl	800153c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034c8:	f023 0307 	bic.w	r3, r3, #7
 80034cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fa3f 	bl	800395c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	4313      	orrs	r3, r2
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003524:	f023 030c 	bic.w	r3, r3, #12
 8003528:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003530:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	4313      	orrs	r3, r2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	011a      	lsls	r2, r3, #4
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	031b      	lsls	r3, r3, #12
 8003554:	4313      	orrs	r3, r2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	4313      	orrs	r3, r2
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d110      	bne.n	8003622 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003606:	7b7b      	ldrb	r3, [r7, #13]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e089      	b.n	8003724 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003620:	e031      	b.n	8003686 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d110      	bne.n	800364a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d102      	bne.n	8003634 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800362e:	7b3b      	ldrb	r3, [r7, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d001      	beq.n	8003638 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e075      	b.n	8003724 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003648:	e01d      	b.n	8003686 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d108      	bne.n	8003662 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003656:	7b7b      	ldrb	r3, [r7, #13]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d102      	bne.n	8003662 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800365c:	7b3b      	ldrb	r3, [r7, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e05e      	b.n	8003724 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_TIM_Encoder_Start_IT+0xc4>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b04      	cmp	r3, #4
 8003690:	d010      	beq.n	80036b4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003692:	e01f      	b.n	80036d4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f9e9 	bl	8003a74 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0202 	orr.w	r2, r2, #2
 80036b0:	60da      	str	r2, [r3, #12]
      break;
 80036b2:	e02e      	b.n	8003712 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	2104      	movs	r1, #4
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f9d9 	bl	8003a74 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0204 	orr.w	r2, r2, #4
 80036d0:	60da      	str	r2, [r3, #12]
      break;
 80036d2:	e01e      	b.n	8003712 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2201      	movs	r2, #1
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f9c9 	bl	8003a74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2201      	movs	r2, #1
 80036e8:	2104      	movs	r1, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9c2 	bl	8003a74 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0202 	orr.w	r2, r2, #2
 80036fe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0204 	orr.w	r2, r2, #4
 800370e:	60da      	str	r2, [r3, #12]
      break;
 8003710:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d020      	beq.n	8003790 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01b      	beq.n	8003790 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0202 	mvn.w	r2, #2
 8003760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd f8b2 	bl	80008e0 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8ce 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f8d5 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d020      	beq.n	80037dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01b      	beq.n	80037dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0204 	mvn.w	r2, #4
 80037ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd f88c 	bl	80008e0 <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8a8 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f8af 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d020      	beq.n	8003828 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01b      	beq.n	8003828 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0208 	mvn.w	r2, #8
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2204      	movs	r2, #4
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd f866 	bl	80008e0 <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f882 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f889 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	d020      	beq.n	8003874 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0210 	mvn.w	r2, #16
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2208      	movs	r2, #8
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd f840 	bl	80008e0 <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f85c 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f863 	bl	8003934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00c      	beq.n	8003898 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0201 	mvn.w	r2, #1
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f83a 	bl	800390c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f97a 	bl	8003bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f834 	bl	8003948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00c      	beq.n	8003904 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0220 	mvn.w	r2, #32
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f94c 	bl	8003b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3a      	ldr	r2, [pc, #232]	@ (8003a58 <TIM_Base_SetConfig+0xfc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00f      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397a:	d00b      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a37      	ldr	r2, [pc, #220]	@ (8003a5c <TIM_Base_SetConfig+0x100>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a36      	ldr	r2, [pc, #216]	@ (8003a60 <TIM_Base_SetConfig+0x104>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0x38>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a35      	ldr	r2, [pc, #212]	@ (8003a64 <TIM_Base_SetConfig+0x108>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003a58 <TIM_Base_SetConfig+0xfc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a28      	ldr	r2, [pc, #160]	@ (8003a5c <TIM_Base_SetConfig+0x100>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a27      	ldr	r2, [pc, #156]	@ (8003a60 <TIM_Base_SetConfig+0x104>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a26      	ldr	r2, [pc, #152]	@ (8003a64 <TIM_Base_SetConfig+0x108>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a25      	ldr	r2, [pc, #148]	@ (8003a68 <TIM_Base_SetConfig+0x10c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a24      	ldr	r2, [pc, #144]	@ (8003a6c <TIM_Base_SetConfig+0x110>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0x8a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a23      	ldr	r2, [pc, #140]	@ (8003a70 <TIM_Base_SetConfig+0x114>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a58 <TIM_Base_SetConfig+0xfc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d103      	bne.n	8003a2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40000800 	.word	0x40000800
 8003a64:	40000c00 	.word	0x40000c00
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800

08003a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2201      	movs	r2, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e050      	b.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1c      	ldr	r2, [pc, #112]	@ (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b24:	d013      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a18      	ldr	r2, [pc, #96]	@ (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	@ (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a13      	ldr	r2, [pc, #76]	@ (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10c      	bne.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40014000 	.word	0x40014000

08003b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <siprintf>:
 8003bc4:	b40e      	push	{r1, r2, r3}
 8003bc6:	b500      	push	{lr}
 8003bc8:	b09c      	sub	sp, #112	@ 0x70
 8003bca:	ab1d      	add	r3, sp, #116	@ 0x74
 8003bcc:	9002      	str	r0, [sp, #8]
 8003bce:	9006      	str	r0, [sp, #24]
 8003bd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003bd4:	4809      	ldr	r0, [pc, #36]	@ (8003bfc <siprintf+0x38>)
 8003bd6:	9107      	str	r1, [sp, #28]
 8003bd8:	9104      	str	r1, [sp, #16]
 8003bda:	4909      	ldr	r1, [pc, #36]	@ (8003c00 <siprintf+0x3c>)
 8003bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003be0:	9105      	str	r1, [sp, #20]
 8003be2:	6800      	ldr	r0, [r0, #0]
 8003be4:	9301      	str	r3, [sp, #4]
 8003be6:	a902      	add	r1, sp, #8
 8003be8:	f000 f994 	bl	8003f14 <_svfiprintf_r>
 8003bec:	9b02      	ldr	r3, [sp, #8]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	b01c      	add	sp, #112	@ 0x70
 8003bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bf8:	b003      	add	sp, #12
 8003bfa:	4770      	bx	lr
 8003bfc:	2000001c 	.word	0x2000001c
 8003c00:	ffff0208 	.word	0xffff0208

08003c04 <memset>:
 8003c04:	4402      	add	r2, r0
 8003c06:	4603      	mov	r3, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <__errno>:
 8003c14:	4b01      	ldr	r3, [pc, #4]	@ (8003c1c <__errno+0x8>)
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	2000001c 	.word	0x2000001c

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4d0d      	ldr	r5, [pc, #52]	@ (8003c58 <__libc_init_array+0x38>)
 8003c24:	4c0d      	ldr	r4, [pc, #52]	@ (8003c5c <__libc_init_array+0x3c>)
 8003c26:	1b64      	subs	r4, r4, r5
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	42a6      	cmp	r6, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	4d0b      	ldr	r5, [pc, #44]	@ (8003c60 <__libc_init_array+0x40>)
 8003c32:	4c0c      	ldr	r4, [pc, #48]	@ (8003c64 <__libc_init_array+0x44>)
 8003c34:	f000 fc66 	bl	8004504 <_init>
 8003c38:	1b64      	subs	r4, r4, r5
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	42a6      	cmp	r6, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c48:	4798      	blx	r3
 8003c4a:	3601      	adds	r6, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c52:	4798      	blx	r3
 8003c54:	3601      	adds	r6, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	080045e4 	.word	0x080045e4
 8003c5c:	080045e4 	.word	0x080045e4
 8003c60:	080045e4 	.word	0x080045e4
 8003c64:	080045e8 	.word	0x080045e8

08003c68 <__retarget_lock_acquire_recursive>:
 8003c68:	4770      	bx	lr

08003c6a <__retarget_lock_release_recursive>:
 8003c6a:	4770      	bx	lr

08003c6c <_free_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4605      	mov	r5, r0
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d041      	beq.n	8003cf8 <_free_r+0x8c>
 8003c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c78:	1f0c      	subs	r4, r1, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bfb8      	it	lt
 8003c7e:	18e4      	addlt	r4, r4, r3
 8003c80:	f000 f8e0 	bl	8003e44 <__malloc_lock>
 8003c84:	4a1d      	ldr	r2, [pc, #116]	@ (8003cfc <_free_r+0x90>)
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	b933      	cbnz	r3, 8003c98 <_free_r+0x2c>
 8003c8a:	6063      	str	r3, [r4, #4]
 8003c8c:	6014      	str	r4, [r2, #0]
 8003c8e:	4628      	mov	r0, r5
 8003c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c94:	f000 b8dc 	b.w	8003e50 <__malloc_unlock>
 8003c98:	42a3      	cmp	r3, r4
 8003c9a:	d908      	bls.n	8003cae <_free_r+0x42>
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	1821      	adds	r1, r4, r0
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	bf01      	itttt	eq
 8003ca4:	6819      	ldreq	r1, [r3, #0]
 8003ca6:	685b      	ldreq	r3, [r3, #4]
 8003ca8:	1809      	addeq	r1, r1, r0
 8003caa:	6021      	streq	r1, [r4, #0]
 8003cac:	e7ed      	b.n	8003c8a <_free_r+0x1e>
 8003cae:	461a      	mov	r2, r3
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	b10b      	cbz	r3, 8003cb8 <_free_r+0x4c>
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	d9fa      	bls.n	8003cae <_free_r+0x42>
 8003cb8:	6811      	ldr	r1, [r2, #0]
 8003cba:	1850      	adds	r0, r2, r1
 8003cbc:	42a0      	cmp	r0, r4
 8003cbe:	d10b      	bne.n	8003cd8 <_free_r+0x6c>
 8003cc0:	6820      	ldr	r0, [r4, #0]
 8003cc2:	4401      	add	r1, r0
 8003cc4:	1850      	adds	r0, r2, r1
 8003cc6:	4283      	cmp	r3, r0
 8003cc8:	6011      	str	r1, [r2, #0]
 8003cca:	d1e0      	bne.n	8003c8e <_free_r+0x22>
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	6053      	str	r3, [r2, #4]
 8003cd2:	4408      	add	r0, r1
 8003cd4:	6010      	str	r0, [r2, #0]
 8003cd6:	e7da      	b.n	8003c8e <_free_r+0x22>
 8003cd8:	d902      	bls.n	8003ce0 <_free_r+0x74>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	e7d6      	b.n	8003c8e <_free_r+0x22>
 8003ce0:	6820      	ldr	r0, [r4, #0]
 8003ce2:	1821      	adds	r1, r4, r0
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	bf04      	itt	eq
 8003ce8:	6819      	ldreq	r1, [r3, #0]
 8003cea:	685b      	ldreq	r3, [r3, #4]
 8003cec:	6063      	str	r3, [r4, #4]
 8003cee:	bf04      	itt	eq
 8003cf0:	1809      	addeq	r1, r1, r0
 8003cf2:	6021      	streq	r1, [r4, #0]
 8003cf4:	6054      	str	r4, [r2, #4]
 8003cf6:	e7ca      	b.n	8003c8e <_free_r+0x22>
 8003cf8:	bd38      	pop	{r3, r4, r5, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200002fc 	.word	0x200002fc

08003d00 <sbrk_aligned>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4e0f      	ldr	r6, [pc, #60]	@ (8003d40 <sbrk_aligned+0x40>)
 8003d04:	460c      	mov	r4, r1
 8003d06:	6831      	ldr	r1, [r6, #0]
 8003d08:	4605      	mov	r5, r0
 8003d0a:	b911      	cbnz	r1, 8003d12 <sbrk_aligned+0x12>
 8003d0c:	f000 fba6 	bl	800445c <_sbrk_r>
 8003d10:	6030      	str	r0, [r6, #0]
 8003d12:	4621      	mov	r1, r4
 8003d14:	4628      	mov	r0, r5
 8003d16:	f000 fba1 	bl	800445c <_sbrk_r>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	d103      	bne.n	8003d26 <sbrk_aligned+0x26>
 8003d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003d22:	4620      	mov	r0, r4
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
 8003d26:	1cc4      	adds	r4, r0, #3
 8003d28:	f024 0403 	bic.w	r4, r4, #3
 8003d2c:	42a0      	cmp	r0, r4
 8003d2e:	d0f8      	beq.n	8003d22 <sbrk_aligned+0x22>
 8003d30:	1a21      	subs	r1, r4, r0
 8003d32:	4628      	mov	r0, r5
 8003d34:	f000 fb92 	bl	800445c <_sbrk_r>
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d1f2      	bne.n	8003d22 <sbrk_aligned+0x22>
 8003d3c:	e7ef      	b.n	8003d1e <sbrk_aligned+0x1e>
 8003d3e:	bf00      	nop
 8003d40:	200002f8 	.word	0x200002f8

08003d44 <_malloc_r>:
 8003d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d48:	1ccd      	adds	r5, r1, #3
 8003d4a:	f025 0503 	bic.w	r5, r5, #3
 8003d4e:	3508      	adds	r5, #8
 8003d50:	2d0c      	cmp	r5, #12
 8003d52:	bf38      	it	cc
 8003d54:	250c      	movcc	r5, #12
 8003d56:	2d00      	cmp	r5, #0
 8003d58:	4606      	mov	r6, r0
 8003d5a:	db01      	blt.n	8003d60 <_malloc_r+0x1c>
 8003d5c:	42a9      	cmp	r1, r5
 8003d5e:	d904      	bls.n	8003d6a <_malloc_r+0x26>
 8003d60:	230c      	movs	r3, #12
 8003d62:	6033      	str	r3, [r6, #0]
 8003d64:	2000      	movs	r0, #0
 8003d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e40 <_malloc_r+0xfc>
 8003d6e:	f000 f869 	bl	8003e44 <__malloc_lock>
 8003d72:	f8d8 3000 	ldr.w	r3, [r8]
 8003d76:	461c      	mov	r4, r3
 8003d78:	bb44      	cbnz	r4, 8003dcc <_malloc_r+0x88>
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f7ff ffbf 	bl	8003d00 <sbrk_aligned>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	4604      	mov	r4, r0
 8003d86:	d158      	bne.n	8003e3a <_malloc_r+0xf6>
 8003d88:	f8d8 4000 	ldr.w	r4, [r8]
 8003d8c:	4627      	mov	r7, r4
 8003d8e:	2f00      	cmp	r7, #0
 8003d90:	d143      	bne.n	8003e1a <_malloc_r+0xd6>
 8003d92:	2c00      	cmp	r4, #0
 8003d94:	d04b      	beq.n	8003e2e <_malloc_r+0xea>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	4639      	mov	r1, r7
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	eb04 0903 	add.w	r9, r4, r3
 8003da0:	f000 fb5c 	bl	800445c <_sbrk_r>
 8003da4:	4581      	cmp	r9, r0
 8003da6:	d142      	bne.n	8003e2e <_malloc_r+0xea>
 8003da8:	6821      	ldr	r1, [r4, #0]
 8003daa:	1a6d      	subs	r5, r5, r1
 8003dac:	4629      	mov	r1, r5
 8003dae:	4630      	mov	r0, r6
 8003db0:	f7ff ffa6 	bl	8003d00 <sbrk_aligned>
 8003db4:	3001      	adds	r0, #1
 8003db6:	d03a      	beq.n	8003e2e <_malloc_r+0xea>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	442b      	add	r3, r5
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	bb62      	cbnz	r2, 8003e20 <_malloc_r+0xdc>
 8003dc6:	f8c8 7000 	str.w	r7, [r8]
 8003dca:	e00f      	b.n	8003dec <_malloc_r+0xa8>
 8003dcc:	6822      	ldr	r2, [r4, #0]
 8003dce:	1b52      	subs	r2, r2, r5
 8003dd0:	d420      	bmi.n	8003e14 <_malloc_r+0xd0>
 8003dd2:	2a0b      	cmp	r2, #11
 8003dd4:	d917      	bls.n	8003e06 <_malloc_r+0xc2>
 8003dd6:	1961      	adds	r1, r4, r5
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	6025      	str	r5, [r4, #0]
 8003ddc:	bf18      	it	ne
 8003dde:	6059      	strne	r1, [r3, #4]
 8003de0:	6863      	ldr	r3, [r4, #4]
 8003de2:	bf08      	it	eq
 8003de4:	f8c8 1000 	streq.w	r1, [r8]
 8003de8:	5162      	str	r2, [r4, r5]
 8003dea:	604b      	str	r3, [r1, #4]
 8003dec:	4630      	mov	r0, r6
 8003dee:	f000 f82f 	bl	8003e50 <__malloc_unlock>
 8003df2:	f104 000b 	add.w	r0, r4, #11
 8003df6:	1d23      	adds	r3, r4, #4
 8003df8:	f020 0007 	bic.w	r0, r0, #7
 8003dfc:	1ac2      	subs	r2, r0, r3
 8003dfe:	bf1c      	itt	ne
 8003e00:	1a1b      	subne	r3, r3, r0
 8003e02:	50a3      	strne	r3, [r4, r2]
 8003e04:	e7af      	b.n	8003d66 <_malloc_r+0x22>
 8003e06:	6862      	ldr	r2, [r4, #4]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	bf0c      	ite	eq
 8003e0c:	f8c8 2000 	streq.w	r2, [r8]
 8003e10:	605a      	strne	r2, [r3, #4]
 8003e12:	e7eb      	b.n	8003dec <_malloc_r+0xa8>
 8003e14:	4623      	mov	r3, r4
 8003e16:	6864      	ldr	r4, [r4, #4]
 8003e18:	e7ae      	b.n	8003d78 <_malloc_r+0x34>
 8003e1a:	463c      	mov	r4, r7
 8003e1c:	687f      	ldr	r7, [r7, #4]
 8003e1e:	e7b6      	b.n	8003d8e <_malloc_r+0x4a>
 8003e20:	461a      	mov	r2, r3
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	42a3      	cmp	r3, r4
 8003e26:	d1fb      	bne.n	8003e20 <_malloc_r+0xdc>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6053      	str	r3, [r2, #4]
 8003e2c:	e7de      	b.n	8003dec <_malloc_r+0xa8>
 8003e2e:	230c      	movs	r3, #12
 8003e30:	6033      	str	r3, [r6, #0]
 8003e32:	4630      	mov	r0, r6
 8003e34:	f000 f80c 	bl	8003e50 <__malloc_unlock>
 8003e38:	e794      	b.n	8003d64 <_malloc_r+0x20>
 8003e3a:	6005      	str	r5, [r0, #0]
 8003e3c:	e7d6      	b.n	8003dec <_malloc_r+0xa8>
 8003e3e:	bf00      	nop
 8003e40:	200002fc 	.word	0x200002fc

08003e44 <__malloc_lock>:
 8003e44:	4801      	ldr	r0, [pc, #4]	@ (8003e4c <__malloc_lock+0x8>)
 8003e46:	f7ff bf0f 	b.w	8003c68 <__retarget_lock_acquire_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	200002f4 	.word	0x200002f4

08003e50 <__malloc_unlock>:
 8003e50:	4801      	ldr	r0, [pc, #4]	@ (8003e58 <__malloc_unlock+0x8>)
 8003e52:	f7ff bf0a 	b.w	8003c6a <__retarget_lock_release_recursive>
 8003e56:	bf00      	nop
 8003e58:	200002f4 	.word	0x200002f4

08003e5c <__ssputs_r>:
 8003e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	688e      	ldr	r6, [r1, #8]
 8003e62:	461f      	mov	r7, r3
 8003e64:	42be      	cmp	r6, r7
 8003e66:	680b      	ldr	r3, [r1, #0]
 8003e68:	4682      	mov	sl, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4690      	mov	r8, r2
 8003e6e:	d82d      	bhi.n	8003ecc <__ssputs_r+0x70>
 8003e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e78:	d026      	beq.n	8003ec8 <__ssputs_r+0x6c>
 8003e7a:	6965      	ldr	r5, [r4, #20]
 8003e7c:	6909      	ldr	r1, [r1, #16]
 8003e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e82:	eba3 0901 	sub.w	r9, r3, r1
 8003e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e8a:	1c7b      	adds	r3, r7, #1
 8003e8c:	444b      	add	r3, r9
 8003e8e:	106d      	asrs	r5, r5, #1
 8003e90:	429d      	cmp	r5, r3
 8003e92:	bf38      	it	cc
 8003e94:	461d      	movcc	r5, r3
 8003e96:	0553      	lsls	r3, r2, #21
 8003e98:	d527      	bpl.n	8003eea <__ssputs_r+0x8e>
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	f7ff ff52 	bl	8003d44 <_malloc_r>
 8003ea0:	4606      	mov	r6, r0
 8003ea2:	b360      	cbz	r0, 8003efe <__ssputs_r+0xa2>
 8003ea4:	6921      	ldr	r1, [r4, #16]
 8003ea6:	464a      	mov	r2, r9
 8003ea8:	f000 fae8 	bl	800447c <memcpy>
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	6126      	str	r6, [r4, #16]
 8003eba:	6165      	str	r5, [r4, #20]
 8003ebc:	444e      	add	r6, r9
 8003ebe:	eba5 0509 	sub.w	r5, r5, r9
 8003ec2:	6026      	str	r6, [r4, #0]
 8003ec4:	60a5      	str	r5, [r4, #8]
 8003ec6:	463e      	mov	r6, r7
 8003ec8:	42be      	cmp	r6, r7
 8003eca:	d900      	bls.n	8003ece <__ssputs_r+0x72>
 8003ecc:	463e      	mov	r6, r7
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	4632      	mov	r2, r6
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	f000 faa8 	bl	8004428 <memmove>
 8003ed8:	68a3      	ldr	r3, [r4, #8]
 8003eda:	1b9b      	subs	r3, r3, r6
 8003edc:	60a3      	str	r3, [r4, #8]
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	4433      	add	r3, r6
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eea:	462a      	mov	r2, r5
 8003eec:	f000 fad4 	bl	8004498 <_realloc_r>
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d1e0      	bne.n	8003eb8 <__ssputs_r+0x5c>
 8003ef6:	6921      	ldr	r1, [r4, #16]
 8003ef8:	4650      	mov	r0, sl
 8003efa:	f7ff feb7 	bl	8003c6c <_free_r>
 8003efe:	230c      	movs	r3, #12
 8003f00:	f8ca 3000 	str.w	r3, [sl]
 8003f04:	89a3      	ldrh	r3, [r4, #12]
 8003f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f0a:	81a3      	strh	r3, [r4, #12]
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	e7e9      	b.n	8003ee6 <__ssputs_r+0x8a>
	...

08003f14 <_svfiprintf_r>:
 8003f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f18:	4698      	mov	r8, r3
 8003f1a:	898b      	ldrh	r3, [r1, #12]
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	b09d      	sub	sp, #116	@ 0x74
 8003f20:	4607      	mov	r7, r0
 8003f22:	460d      	mov	r5, r1
 8003f24:	4614      	mov	r4, r2
 8003f26:	d510      	bpl.n	8003f4a <_svfiprintf_r+0x36>
 8003f28:	690b      	ldr	r3, [r1, #16]
 8003f2a:	b973      	cbnz	r3, 8003f4a <_svfiprintf_r+0x36>
 8003f2c:	2140      	movs	r1, #64	@ 0x40
 8003f2e:	f7ff ff09 	bl	8003d44 <_malloc_r>
 8003f32:	6028      	str	r0, [r5, #0]
 8003f34:	6128      	str	r0, [r5, #16]
 8003f36:	b930      	cbnz	r0, 8003f46 <_svfiprintf_r+0x32>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	b01d      	add	sp, #116	@ 0x74
 8003f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f46:	2340      	movs	r3, #64	@ 0x40
 8003f48:	616b      	str	r3, [r5, #20]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f4e:	2320      	movs	r3, #32
 8003f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f58:	2330      	movs	r3, #48	@ 0x30
 8003f5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040f8 <_svfiprintf_r+0x1e4>
 8003f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f62:	f04f 0901 	mov.w	r9, #1
 8003f66:	4623      	mov	r3, r4
 8003f68:	469a      	mov	sl, r3
 8003f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f6e:	b10a      	cbz	r2, 8003f74 <_svfiprintf_r+0x60>
 8003f70:	2a25      	cmp	r2, #37	@ 0x25
 8003f72:	d1f9      	bne.n	8003f68 <_svfiprintf_r+0x54>
 8003f74:	ebba 0b04 	subs.w	fp, sl, r4
 8003f78:	d00b      	beq.n	8003f92 <_svfiprintf_r+0x7e>
 8003f7a:	465b      	mov	r3, fp
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	4629      	mov	r1, r5
 8003f80:	4638      	mov	r0, r7
 8003f82:	f7ff ff6b 	bl	8003e5c <__ssputs_r>
 8003f86:	3001      	adds	r0, #1
 8003f88:	f000 80a7 	beq.w	80040da <_svfiprintf_r+0x1c6>
 8003f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f8e:	445a      	add	r2, fp
 8003f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f92:	f89a 3000 	ldrb.w	r3, [sl]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 809f 	beq.w	80040da <_svfiprintf_r+0x1c6>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fa6:	f10a 0a01 	add.w	sl, sl, #1
 8003faa:	9304      	str	r3, [sp, #16]
 8003fac:	9307      	str	r3, [sp, #28]
 8003fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fb4:	4654      	mov	r4, sl
 8003fb6:	2205      	movs	r2, #5
 8003fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fbc:	484e      	ldr	r0, [pc, #312]	@ (80040f8 <_svfiprintf_r+0x1e4>)
 8003fbe:	f7fc f917 	bl	80001f0 <memchr>
 8003fc2:	9a04      	ldr	r2, [sp, #16]
 8003fc4:	b9d8      	cbnz	r0, 8003ffe <_svfiprintf_r+0xea>
 8003fc6:	06d0      	lsls	r0, r2, #27
 8003fc8:	bf44      	itt	mi
 8003fca:	2320      	movmi	r3, #32
 8003fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fd0:	0711      	lsls	r1, r2, #28
 8003fd2:	bf44      	itt	mi
 8003fd4:	232b      	movmi	r3, #43	@ 0x2b
 8003fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fda:	f89a 3000 	ldrb.w	r3, [sl]
 8003fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fe0:	d015      	beq.n	800400e <_svfiprintf_r+0xfa>
 8003fe2:	9a07      	ldr	r2, [sp, #28]
 8003fe4:	4654      	mov	r4, sl
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f04f 0c0a 	mov.w	ip, #10
 8003fec:	4621      	mov	r1, r4
 8003fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ff2:	3b30      	subs	r3, #48	@ 0x30
 8003ff4:	2b09      	cmp	r3, #9
 8003ff6:	d94b      	bls.n	8004090 <_svfiprintf_r+0x17c>
 8003ff8:	b1b0      	cbz	r0, 8004028 <_svfiprintf_r+0x114>
 8003ffa:	9207      	str	r2, [sp, #28]
 8003ffc:	e014      	b.n	8004028 <_svfiprintf_r+0x114>
 8003ffe:	eba0 0308 	sub.w	r3, r0, r8
 8004002:	fa09 f303 	lsl.w	r3, r9, r3
 8004006:	4313      	orrs	r3, r2
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	46a2      	mov	sl, r4
 800400c:	e7d2      	b.n	8003fb4 <_svfiprintf_r+0xa0>
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	1d19      	adds	r1, r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	9103      	str	r1, [sp, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	bfbb      	ittet	lt
 800401a:	425b      	neglt	r3, r3
 800401c:	f042 0202 	orrlt.w	r2, r2, #2
 8004020:	9307      	strge	r3, [sp, #28]
 8004022:	9307      	strlt	r3, [sp, #28]
 8004024:	bfb8      	it	lt
 8004026:	9204      	strlt	r2, [sp, #16]
 8004028:	7823      	ldrb	r3, [r4, #0]
 800402a:	2b2e      	cmp	r3, #46	@ 0x2e
 800402c:	d10a      	bne.n	8004044 <_svfiprintf_r+0x130>
 800402e:	7863      	ldrb	r3, [r4, #1]
 8004030:	2b2a      	cmp	r3, #42	@ 0x2a
 8004032:	d132      	bne.n	800409a <_svfiprintf_r+0x186>
 8004034:	9b03      	ldr	r3, [sp, #12]
 8004036:	1d1a      	adds	r2, r3, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	9203      	str	r2, [sp, #12]
 800403c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004040:	3402      	adds	r4, #2
 8004042:	9305      	str	r3, [sp, #20]
 8004044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004108 <_svfiprintf_r+0x1f4>
 8004048:	7821      	ldrb	r1, [r4, #0]
 800404a:	2203      	movs	r2, #3
 800404c:	4650      	mov	r0, sl
 800404e:	f7fc f8cf 	bl	80001f0 <memchr>
 8004052:	b138      	cbz	r0, 8004064 <_svfiprintf_r+0x150>
 8004054:	9b04      	ldr	r3, [sp, #16]
 8004056:	eba0 000a 	sub.w	r0, r0, sl
 800405a:	2240      	movs	r2, #64	@ 0x40
 800405c:	4082      	lsls	r2, r0
 800405e:	4313      	orrs	r3, r2
 8004060:	3401      	adds	r4, #1
 8004062:	9304      	str	r3, [sp, #16]
 8004064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004068:	4824      	ldr	r0, [pc, #144]	@ (80040fc <_svfiprintf_r+0x1e8>)
 800406a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800406e:	2206      	movs	r2, #6
 8004070:	f7fc f8be 	bl	80001f0 <memchr>
 8004074:	2800      	cmp	r0, #0
 8004076:	d036      	beq.n	80040e6 <_svfiprintf_r+0x1d2>
 8004078:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <_svfiprintf_r+0x1ec>)
 800407a:	bb1b      	cbnz	r3, 80040c4 <_svfiprintf_r+0x1b0>
 800407c:	9b03      	ldr	r3, [sp, #12]
 800407e:	3307      	adds	r3, #7
 8004080:	f023 0307 	bic.w	r3, r3, #7
 8004084:	3308      	adds	r3, #8
 8004086:	9303      	str	r3, [sp, #12]
 8004088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800408a:	4433      	add	r3, r6
 800408c:	9309      	str	r3, [sp, #36]	@ 0x24
 800408e:	e76a      	b.n	8003f66 <_svfiprintf_r+0x52>
 8004090:	fb0c 3202 	mla	r2, ip, r2, r3
 8004094:	460c      	mov	r4, r1
 8004096:	2001      	movs	r0, #1
 8004098:	e7a8      	b.n	8003fec <_svfiprintf_r+0xd8>
 800409a:	2300      	movs	r3, #0
 800409c:	3401      	adds	r4, #1
 800409e:	9305      	str	r3, [sp, #20]
 80040a0:	4619      	mov	r1, r3
 80040a2:	f04f 0c0a 	mov.w	ip, #10
 80040a6:	4620      	mov	r0, r4
 80040a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ac:	3a30      	subs	r2, #48	@ 0x30
 80040ae:	2a09      	cmp	r2, #9
 80040b0:	d903      	bls.n	80040ba <_svfiprintf_r+0x1a6>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0c6      	beq.n	8004044 <_svfiprintf_r+0x130>
 80040b6:	9105      	str	r1, [sp, #20]
 80040b8:	e7c4      	b.n	8004044 <_svfiprintf_r+0x130>
 80040ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80040be:	4604      	mov	r4, r0
 80040c0:	2301      	movs	r3, #1
 80040c2:	e7f0      	b.n	80040a6 <_svfiprintf_r+0x192>
 80040c4:	ab03      	add	r3, sp, #12
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	462a      	mov	r2, r5
 80040ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004104 <_svfiprintf_r+0x1f0>)
 80040cc:	a904      	add	r1, sp, #16
 80040ce:	4638      	mov	r0, r7
 80040d0:	f3af 8000 	nop.w
 80040d4:	1c42      	adds	r2, r0, #1
 80040d6:	4606      	mov	r6, r0
 80040d8:	d1d6      	bne.n	8004088 <_svfiprintf_r+0x174>
 80040da:	89ab      	ldrh	r3, [r5, #12]
 80040dc:	065b      	lsls	r3, r3, #25
 80040de:	f53f af2d 	bmi.w	8003f3c <_svfiprintf_r+0x28>
 80040e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040e4:	e72c      	b.n	8003f40 <_svfiprintf_r+0x2c>
 80040e6:	ab03      	add	r3, sp, #12
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	462a      	mov	r2, r5
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <_svfiprintf_r+0x1f0>)
 80040ee:	a904      	add	r1, sp, #16
 80040f0:	4638      	mov	r0, r7
 80040f2:	f000 f879 	bl	80041e8 <_printf_i>
 80040f6:	e7ed      	b.n	80040d4 <_svfiprintf_r+0x1c0>
 80040f8:	080045a8 	.word	0x080045a8
 80040fc:	080045b2 	.word	0x080045b2
 8004100:	00000000 	.word	0x00000000
 8004104:	08003e5d 	.word	0x08003e5d
 8004108:	080045ae 	.word	0x080045ae

0800410c <_printf_common>:
 800410c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004110:	4616      	mov	r6, r2
 8004112:	4698      	mov	r8, r3
 8004114:	688a      	ldr	r2, [r1, #8]
 8004116:	690b      	ldr	r3, [r1, #16]
 8004118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800411c:	4293      	cmp	r3, r2
 800411e:	bfb8      	it	lt
 8004120:	4613      	movlt	r3, r2
 8004122:	6033      	str	r3, [r6, #0]
 8004124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004128:	4607      	mov	r7, r0
 800412a:	460c      	mov	r4, r1
 800412c:	b10a      	cbz	r2, 8004132 <_printf_common+0x26>
 800412e:	3301      	adds	r3, #1
 8004130:	6033      	str	r3, [r6, #0]
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	0699      	lsls	r1, r3, #26
 8004136:	bf42      	ittt	mi
 8004138:	6833      	ldrmi	r3, [r6, #0]
 800413a:	3302      	addmi	r3, #2
 800413c:	6033      	strmi	r3, [r6, #0]
 800413e:	6825      	ldr	r5, [r4, #0]
 8004140:	f015 0506 	ands.w	r5, r5, #6
 8004144:	d106      	bne.n	8004154 <_printf_common+0x48>
 8004146:	f104 0a19 	add.w	sl, r4, #25
 800414a:	68e3      	ldr	r3, [r4, #12]
 800414c:	6832      	ldr	r2, [r6, #0]
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	42ab      	cmp	r3, r5
 8004152:	dc26      	bgt.n	80041a2 <_printf_common+0x96>
 8004154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	3b00      	subs	r3, #0
 800415c:	bf18      	it	ne
 800415e:	2301      	movne	r3, #1
 8004160:	0692      	lsls	r2, r2, #26
 8004162:	d42b      	bmi.n	80041bc <_printf_common+0xb0>
 8004164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004168:	4641      	mov	r1, r8
 800416a:	4638      	mov	r0, r7
 800416c:	47c8      	blx	r9
 800416e:	3001      	adds	r0, #1
 8004170:	d01e      	beq.n	80041b0 <_printf_common+0xa4>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	6922      	ldr	r2, [r4, #16]
 8004176:	f003 0306 	and.w	r3, r3, #6
 800417a:	2b04      	cmp	r3, #4
 800417c:	bf02      	ittt	eq
 800417e:	68e5      	ldreq	r5, [r4, #12]
 8004180:	6833      	ldreq	r3, [r6, #0]
 8004182:	1aed      	subeq	r5, r5, r3
 8004184:	68a3      	ldr	r3, [r4, #8]
 8004186:	bf0c      	ite	eq
 8004188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800418c:	2500      	movne	r5, #0
 800418e:	4293      	cmp	r3, r2
 8004190:	bfc4      	itt	gt
 8004192:	1a9b      	subgt	r3, r3, r2
 8004194:	18ed      	addgt	r5, r5, r3
 8004196:	2600      	movs	r6, #0
 8004198:	341a      	adds	r4, #26
 800419a:	42b5      	cmp	r5, r6
 800419c:	d11a      	bne.n	80041d4 <_printf_common+0xc8>
 800419e:	2000      	movs	r0, #0
 80041a0:	e008      	b.n	80041b4 <_printf_common+0xa8>
 80041a2:	2301      	movs	r3, #1
 80041a4:	4652      	mov	r2, sl
 80041a6:	4641      	mov	r1, r8
 80041a8:	4638      	mov	r0, r7
 80041aa:	47c8      	blx	r9
 80041ac:	3001      	adds	r0, #1
 80041ae:	d103      	bne.n	80041b8 <_printf_common+0xac>
 80041b0:	f04f 30ff 	mov.w	r0, #4294967295
 80041b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b8:	3501      	adds	r5, #1
 80041ba:	e7c6      	b.n	800414a <_printf_common+0x3e>
 80041bc:	18e1      	adds	r1, r4, r3
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	2030      	movs	r0, #48	@ 0x30
 80041c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041c6:	4422      	add	r2, r4
 80041c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041d0:	3302      	adds	r3, #2
 80041d2:	e7c7      	b.n	8004164 <_printf_common+0x58>
 80041d4:	2301      	movs	r3, #1
 80041d6:	4622      	mov	r2, r4
 80041d8:	4641      	mov	r1, r8
 80041da:	4638      	mov	r0, r7
 80041dc:	47c8      	blx	r9
 80041de:	3001      	adds	r0, #1
 80041e0:	d0e6      	beq.n	80041b0 <_printf_common+0xa4>
 80041e2:	3601      	adds	r6, #1
 80041e4:	e7d9      	b.n	800419a <_printf_common+0x8e>
	...

080041e8 <_printf_i>:
 80041e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	7e0f      	ldrb	r7, [r1, #24]
 80041ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041f0:	2f78      	cmp	r7, #120	@ 0x78
 80041f2:	4691      	mov	r9, r2
 80041f4:	4680      	mov	r8, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	469a      	mov	sl, r3
 80041fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041fe:	d807      	bhi.n	8004210 <_printf_i+0x28>
 8004200:	2f62      	cmp	r7, #98	@ 0x62
 8004202:	d80a      	bhi.n	800421a <_printf_i+0x32>
 8004204:	2f00      	cmp	r7, #0
 8004206:	f000 80d2 	beq.w	80043ae <_printf_i+0x1c6>
 800420a:	2f58      	cmp	r7, #88	@ 0x58
 800420c:	f000 80b9 	beq.w	8004382 <_printf_i+0x19a>
 8004210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004218:	e03a      	b.n	8004290 <_printf_i+0xa8>
 800421a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800421e:	2b15      	cmp	r3, #21
 8004220:	d8f6      	bhi.n	8004210 <_printf_i+0x28>
 8004222:	a101      	add	r1, pc, #4	@ (adr r1, 8004228 <_printf_i+0x40>)
 8004224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004228:	08004281 	.word	0x08004281
 800422c:	08004295 	.word	0x08004295
 8004230:	08004211 	.word	0x08004211
 8004234:	08004211 	.word	0x08004211
 8004238:	08004211 	.word	0x08004211
 800423c:	08004211 	.word	0x08004211
 8004240:	08004295 	.word	0x08004295
 8004244:	08004211 	.word	0x08004211
 8004248:	08004211 	.word	0x08004211
 800424c:	08004211 	.word	0x08004211
 8004250:	08004211 	.word	0x08004211
 8004254:	08004395 	.word	0x08004395
 8004258:	080042bf 	.word	0x080042bf
 800425c:	0800434f 	.word	0x0800434f
 8004260:	08004211 	.word	0x08004211
 8004264:	08004211 	.word	0x08004211
 8004268:	080043b7 	.word	0x080043b7
 800426c:	08004211 	.word	0x08004211
 8004270:	080042bf 	.word	0x080042bf
 8004274:	08004211 	.word	0x08004211
 8004278:	08004211 	.word	0x08004211
 800427c:	08004357 	.word	0x08004357
 8004280:	6833      	ldr	r3, [r6, #0]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6032      	str	r2, [r6, #0]
 8004288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800428c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004290:	2301      	movs	r3, #1
 8004292:	e09d      	b.n	80043d0 <_printf_i+0x1e8>
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	1d19      	adds	r1, r3, #4
 800429a:	6031      	str	r1, [r6, #0]
 800429c:	0606      	lsls	r6, r0, #24
 800429e:	d501      	bpl.n	80042a4 <_printf_i+0xbc>
 80042a0:	681d      	ldr	r5, [r3, #0]
 80042a2:	e003      	b.n	80042ac <_printf_i+0xc4>
 80042a4:	0645      	lsls	r5, r0, #25
 80042a6:	d5fb      	bpl.n	80042a0 <_printf_i+0xb8>
 80042a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	da03      	bge.n	80042b8 <_printf_i+0xd0>
 80042b0:	232d      	movs	r3, #45	@ 0x2d
 80042b2:	426d      	negs	r5, r5
 80042b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b8:	4859      	ldr	r0, [pc, #356]	@ (8004420 <_printf_i+0x238>)
 80042ba:	230a      	movs	r3, #10
 80042bc:	e011      	b.n	80042e2 <_printf_i+0xfa>
 80042be:	6821      	ldr	r1, [r4, #0]
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	0608      	lsls	r0, r1, #24
 80042c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80042c8:	d402      	bmi.n	80042d0 <_printf_i+0xe8>
 80042ca:	0649      	lsls	r1, r1, #25
 80042cc:	bf48      	it	mi
 80042ce:	b2ad      	uxthmi	r5, r5
 80042d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80042d2:	4853      	ldr	r0, [pc, #332]	@ (8004420 <_printf_i+0x238>)
 80042d4:	6033      	str	r3, [r6, #0]
 80042d6:	bf14      	ite	ne
 80042d8:	230a      	movne	r3, #10
 80042da:	2308      	moveq	r3, #8
 80042dc:	2100      	movs	r1, #0
 80042de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042e2:	6866      	ldr	r6, [r4, #4]
 80042e4:	60a6      	str	r6, [r4, #8]
 80042e6:	2e00      	cmp	r6, #0
 80042e8:	bfa2      	ittt	ge
 80042ea:	6821      	ldrge	r1, [r4, #0]
 80042ec:	f021 0104 	bicge.w	r1, r1, #4
 80042f0:	6021      	strge	r1, [r4, #0]
 80042f2:	b90d      	cbnz	r5, 80042f8 <_printf_i+0x110>
 80042f4:	2e00      	cmp	r6, #0
 80042f6:	d04b      	beq.n	8004390 <_printf_i+0x1a8>
 80042f8:	4616      	mov	r6, r2
 80042fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80042fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004302:	5dc7      	ldrb	r7, [r0, r7]
 8004304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004308:	462f      	mov	r7, r5
 800430a:	42bb      	cmp	r3, r7
 800430c:	460d      	mov	r5, r1
 800430e:	d9f4      	bls.n	80042fa <_printf_i+0x112>
 8004310:	2b08      	cmp	r3, #8
 8004312:	d10b      	bne.n	800432c <_printf_i+0x144>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	07df      	lsls	r7, r3, #31
 8004318:	d508      	bpl.n	800432c <_printf_i+0x144>
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	6861      	ldr	r1, [r4, #4]
 800431e:	4299      	cmp	r1, r3
 8004320:	bfde      	ittt	le
 8004322:	2330      	movle	r3, #48	@ 0x30
 8004324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004328:	f106 36ff 	addle.w	r6, r6, #4294967295
 800432c:	1b92      	subs	r2, r2, r6
 800432e:	6122      	str	r2, [r4, #16]
 8004330:	f8cd a000 	str.w	sl, [sp]
 8004334:	464b      	mov	r3, r9
 8004336:	aa03      	add	r2, sp, #12
 8004338:	4621      	mov	r1, r4
 800433a:	4640      	mov	r0, r8
 800433c:	f7ff fee6 	bl	800410c <_printf_common>
 8004340:	3001      	adds	r0, #1
 8004342:	d14a      	bne.n	80043da <_printf_i+0x1f2>
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	b004      	add	sp, #16
 800434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	f043 0320 	orr.w	r3, r3, #32
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	4833      	ldr	r0, [pc, #204]	@ (8004424 <_printf_i+0x23c>)
 8004358:	2778      	movs	r7, #120	@ 0x78
 800435a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	6831      	ldr	r1, [r6, #0]
 8004362:	061f      	lsls	r7, r3, #24
 8004364:	f851 5b04 	ldr.w	r5, [r1], #4
 8004368:	d402      	bmi.n	8004370 <_printf_i+0x188>
 800436a:	065f      	lsls	r7, r3, #25
 800436c:	bf48      	it	mi
 800436e:	b2ad      	uxthmi	r5, r5
 8004370:	6031      	str	r1, [r6, #0]
 8004372:	07d9      	lsls	r1, r3, #31
 8004374:	bf44      	itt	mi
 8004376:	f043 0320 	orrmi.w	r3, r3, #32
 800437a:	6023      	strmi	r3, [r4, #0]
 800437c:	b11d      	cbz	r5, 8004386 <_printf_i+0x19e>
 800437e:	2310      	movs	r3, #16
 8004380:	e7ac      	b.n	80042dc <_printf_i+0xf4>
 8004382:	4827      	ldr	r0, [pc, #156]	@ (8004420 <_printf_i+0x238>)
 8004384:	e7e9      	b.n	800435a <_printf_i+0x172>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	f023 0320 	bic.w	r3, r3, #32
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	e7f6      	b.n	800437e <_printf_i+0x196>
 8004390:	4616      	mov	r6, r2
 8004392:	e7bd      	b.n	8004310 <_printf_i+0x128>
 8004394:	6833      	ldr	r3, [r6, #0]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	6961      	ldr	r1, [r4, #20]
 800439a:	1d18      	adds	r0, r3, #4
 800439c:	6030      	str	r0, [r6, #0]
 800439e:	062e      	lsls	r6, r5, #24
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	d501      	bpl.n	80043a8 <_printf_i+0x1c0>
 80043a4:	6019      	str	r1, [r3, #0]
 80043a6:	e002      	b.n	80043ae <_printf_i+0x1c6>
 80043a8:	0668      	lsls	r0, r5, #25
 80043aa:	d5fb      	bpl.n	80043a4 <_printf_i+0x1bc>
 80043ac:	8019      	strh	r1, [r3, #0]
 80043ae:	2300      	movs	r3, #0
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	4616      	mov	r6, r2
 80043b4:	e7bc      	b.n	8004330 <_printf_i+0x148>
 80043b6:	6833      	ldr	r3, [r6, #0]
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	6032      	str	r2, [r6, #0]
 80043bc:	681e      	ldr	r6, [r3, #0]
 80043be:	6862      	ldr	r2, [r4, #4]
 80043c0:	2100      	movs	r1, #0
 80043c2:	4630      	mov	r0, r6
 80043c4:	f7fb ff14 	bl	80001f0 <memchr>
 80043c8:	b108      	cbz	r0, 80043ce <_printf_i+0x1e6>
 80043ca:	1b80      	subs	r0, r0, r6
 80043cc:	6060      	str	r0, [r4, #4]
 80043ce:	6863      	ldr	r3, [r4, #4]
 80043d0:	6123      	str	r3, [r4, #16]
 80043d2:	2300      	movs	r3, #0
 80043d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043d8:	e7aa      	b.n	8004330 <_printf_i+0x148>
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	4632      	mov	r2, r6
 80043de:	4649      	mov	r1, r9
 80043e0:	4640      	mov	r0, r8
 80043e2:	47d0      	blx	sl
 80043e4:	3001      	adds	r0, #1
 80043e6:	d0ad      	beq.n	8004344 <_printf_i+0x15c>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	079b      	lsls	r3, r3, #30
 80043ec:	d413      	bmi.n	8004416 <_printf_i+0x22e>
 80043ee:	68e0      	ldr	r0, [r4, #12]
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	4298      	cmp	r0, r3
 80043f4:	bfb8      	it	lt
 80043f6:	4618      	movlt	r0, r3
 80043f8:	e7a6      	b.n	8004348 <_printf_i+0x160>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4632      	mov	r2, r6
 80043fe:	4649      	mov	r1, r9
 8004400:	4640      	mov	r0, r8
 8004402:	47d0      	blx	sl
 8004404:	3001      	adds	r0, #1
 8004406:	d09d      	beq.n	8004344 <_printf_i+0x15c>
 8004408:	3501      	adds	r5, #1
 800440a:	68e3      	ldr	r3, [r4, #12]
 800440c:	9903      	ldr	r1, [sp, #12]
 800440e:	1a5b      	subs	r3, r3, r1
 8004410:	42ab      	cmp	r3, r5
 8004412:	dcf2      	bgt.n	80043fa <_printf_i+0x212>
 8004414:	e7eb      	b.n	80043ee <_printf_i+0x206>
 8004416:	2500      	movs	r5, #0
 8004418:	f104 0619 	add.w	r6, r4, #25
 800441c:	e7f5      	b.n	800440a <_printf_i+0x222>
 800441e:	bf00      	nop
 8004420:	080045b9 	.word	0x080045b9
 8004424:	080045ca 	.word	0x080045ca

08004428 <memmove>:
 8004428:	4288      	cmp	r0, r1
 800442a:	b510      	push	{r4, lr}
 800442c:	eb01 0402 	add.w	r4, r1, r2
 8004430:	d902      	bls.n	8004438 <memmove+0x10>
 8004432:	4284      	cmp	r4, r0
 8004434:	4623      	mov	r3, r4
 8004436:	d807      	bhi.n	8004448 <memmove+0x20>
 8004438:	1e43      	subs	r3, r0, #1
 800443a:	42a1      	cmp	r1, r4
 800443c:	d008      	beq.n	8004450 <memmove+0x28>
 800443e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004446:	e7f8      	b.n	800443a <memmove+0x12>
 8004448:	4402      	add	r2, r0
 800444a:	4601      	mov	r1, r0
 800444c:	428a      	cmp	r2, r1
 800444e:	d100      	bne.n	8004452 <memmove+0x2a>
 8004450:	bd10      	pop	{r4, pc}
 8004452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800445a:	e7f7      	b.n	800444c <memmove+0x24>

0800445c <_sbrk_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d06      	ldr	r5, [pc, #24]	@ (8004478 <_sbrk_r+0x1c>)
 8004460:	2300      	movs	r3, #0
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fd f8f8 	bl	800165c <_sbrk>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_sbrk_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_sbrk_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	200002f0 	.word	0x200002f0

0800447c <memcpy>:
 800447c:	440a      	add	r2, r1
 800447e:	4291      	cmp	r1, r2
 8004480:	f100 33ff 	add.w	r3, r0, #4294967295
 8004484:	d100      	bne.n	8004488 <memcpy+0xc>
 8004486:	4770      	bx	lr
 8004488:	b510      	push	{r4, lr}
 800448a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800448e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004492:	4291      	cmp	r1, r2
 8004494:	d1f9      	bne.n	800448a <memcpy+0xe>
 8004496:	bd10      	pop	{r4, pc}

08004498 <_realloc_r>:
 8004498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800449c:	4680      	mov	r8, r0
 800449e:	4615      	mov	r5, r2
 80044a0:	460c      	mov	r4, r1
 80044a2:	b921      	cbnz	r1, 80044ae <_realloc_r+0x16>
 80044a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a8:	4611      	mov	r1, r2
 80044aa:	f7ff bc4b 	b.w	8003d44 <_malloc_r>
 80044ae:	b92a      	cbnz	r2, 80044bc <_realloc_r+0x24>
 80044b0:	f7ff fbdc 	bl	8003c6c <_free_r>
 80044b4:	2400      	movs	r4, #0
 80044b6:	4620      	mov	r0, r4
 80044b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044bc:	f000 f81a 	bl	80044f4 <_malloc_usable_size_r>
 80044c0:	4285      	cmp	r5, r0
 80044c2:	4606      	mov	r6, r0
 80044c4:	d802      	bhi.n	80044cc <_realloc_r+0x34>
 80044c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044ca:	d8f4      	bhi.n	80044b6 <_realloc_r+0x1e>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4640      	mov	r0, r8
 80044d0:	f7ff fc38 	bl	8003d44 <_malloc_r>
 80044d4:	4607      	mov	r7, r0
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d0ec      	beq.n	80044b4 <_realloc_r+0x1c>
 80044da:	42b5      	cmp	r5, r6
 80044dc:	462a      	mov	r2, r5
 80044de:	4621      	mov	r1, r4
 80044e0:	bf28      	it	cs
 80044e2:	4632      	movcs	r2, r6
 80044e4:	f7ff ffca 	bl	800447c <memcpy>
 80044e8:	4621      	mov	r1, r4
 80044ea:	4640      	mov	r0, r8
 80044ec:	f7ff fbbe 	bl	8003c6c <_free_r>
 80044f0:	463c      	mov	r4, r7
 80044f2:	e7e0      	b.n	80044b6 <_realloc_r+0x1e>

080044f4 <_malloc_usable_size_r>:
 80044f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f8:	1f18      	subs	r0, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bfbc      	itt	lt
 80044fe:	580b      	ldrlt	r3, [r1, r0]
 8004500:	18c0      	addlt	r0, r0, r3
 8004502:	4770      	bx	lr

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
