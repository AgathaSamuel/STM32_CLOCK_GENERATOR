
SET_FP_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005970  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bdc  08005bdc  00007080  2**0
                  CONTENTS
  4 .ARM          00000008  08005bdc  08005bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be4  08005be4  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be4  08005be4  00006be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005be8  08005be8  00006be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005bec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000080  08005c6c  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005c6c  00007318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f819  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002542  00000000  00000000  000168c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00018e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b48  00000000  00000000  00019c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174f8  00000000  00000000  0001a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012003  00000000  00000000  00031cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009891b  00000000  00000000  00043ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc5e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f4  00000000  00000000  000dc62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e0920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005af8 	.word	0x08005af8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08005af8 	.word	0x08005af8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <encoder_init>:
#include "encoder.h"

volatile int16_t encoder_value = 0;
volatile int16_t last_encoder_value = 0;

void encoder_init(TIM_HandleTypeDef *htim) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    HAL_TIM_Encoder_Start_IT(htim, TIM_CHANNEL_ALL); // Aktifkan mode encoder
 8000d74:	213c      	movs	r1, #60	@ 0x3c
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f003 ff24 	bl	8004bc4 <HAL_TIM_Encoder_Start_IT>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	f023 030f 	bic.w	r3, r3, #15
 8000d96:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	f043 030c 	orr.w	r3, r3, #12
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	f043 030c 	orr.w	r3, r3, #12
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	791b      	ldrb	r3, [r3, #4]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f107 0208 	add.w	r2, r7, #8
 8000dd4:	2364      	movs	r3, #100	@ 0x64
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2304      	movs	r3, #4
 8000dda:	f002 fbf1 	bl	80035c0 <HAL_I2C_Master_Transmit>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af02      	add	r7, sp, #8
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	f023 030f 	bic.w	r3, r3, #15
 8000df8:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	f043 030d 	orr.w	r3, r3, #13
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f043 0309 	orr.w	r3, r3, #9
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	f043 030d 	orr.w	r3, r3, #13
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	f043 0309 	orr.w	r3, r3, #9
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f107 0208 	add.w	r2, r7, #8
 8000e36:	2364      	movs	r3, #100	@ 0x64
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	f002 fbc0 	bl	80035c0 <HAL_I2C_Master_Transmit>
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000e50:	2180      	movs	r1, #128	@ 0x80
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff96 	bl	8000d84 <lcd_send_cmd>
    for (int i = 0; i < 70; i++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e006      	b.n	8000e6c <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000e5e:	2120      	movs	r1, #32
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ffc0 	bl	8000de6 <lcd_send_data>
    for (int i = 0; i < 70; i++)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b45      	cmp	r3, #69	@ 0x45
 8000e70:	ddf5      	ble.n	8000e5e <lcd_clear+0x16>
    }
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
    if (row == 0)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	e003      	b.n	8000ea0 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000e9e:	60bb      	str	r3, [r7, #8]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f7ff ff6c 	bl	8000d84 <lcd_send_cmd>
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000ebc:	2032      	movs	r0, #50	@ 0x32
 8000ebe:	f001 fcd3 	bl	8002868 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000ec2:	2130      	movs	r1, #48	@ 0x30
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff5d 	bl	8000d84 <lcd_send_cmd>
    HAL_Delay(5);
 8000eca:	2005      	movs	r0, #5
 8000ecc:	f001 fccc 	bl	8002868 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000ed0:	2130      	movs	r1, #48	@ 0x30
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff56 	bl	8000d84 <lcd_send_cmd>
    HAL_Delay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f001 fcc5 	bl	8002868 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000ede:	2130      	movs	r1, #48	@ 0x30
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff4f 	bl	8000d84 <lcd_send_cmd>
    HAL_Delay(10);
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f001 fcbe 	bl	8002868 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000eec:	2120      	movs	r1, #32
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff48 	bl	8000d84 <lcd_send_cmd>
    HAL_Delay(10);
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f001 fcb7 	bl	8002868 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8000efa:	2128      	movs	r1, #40	@ 0x28
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff41 	bl	8000d84 <lcd_send_cmd>
    HAL_Delay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f001 fcb0 	bl	8002868 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8000f08:	2108      	movs	r1, #8
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff3a 	bl	8000d84 <lcd_send_cmd>
    HAL_Delay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f001 fca9 	bl	8002868 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8000f16:	2101      	movs	r1, #1
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff33 	bl	8000d84 <lcd_send_cmd>
    HAL_Delay(2);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f001 fca2 	bl	8002868 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000f24:	2106      	movs	r1, #6
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff2c 	bl	8000d84 <lcd_send_cmd>
    HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f001 fc9b 	bl	8002868 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000f32:	210c      	movs	r1, #12
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff25 	bl	8000d84 <lcd_send_cmd>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8000f4c:	e007      	b.n	8000f5e <lcd_puts+0x1c>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	603a      	str	r2, [r7, #0]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff44 	bl	8000de6 <lcd_send_data>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f3      	bne.n	8000f4e <lcd_puts+0xc>
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <debounce_check>:
#define DEBOUNCE_DELAY 300

uint32_t last_interrupt_time = 0;
volatile uint32_t last_time = 0;

uint8_t debounce_check() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();  // Dapatkan waktu sekarang
 8000f76:	f001 fc6b 	bl	8002850 <HAL_GetTick>
 8000f7a:	6078      	str	r0, [r7, #4]
    if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY) {
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <debounce_check+0x30>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000f88:	d904      	bls.n	8000f94 <debounce_check+0x24>
        last_interrupt_time = current_time;  // Update waktu terakhir
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <debounce_check+0x30>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6013      	str	r3, [r2, #0]
        return 1;  // Tombol stabil
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <debounce_check+0x26>
    }
    return 0;  // Abaikan jika tombol masih bouncing
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000190 	.word	0x20000190

08000fa4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0 && debounce_check()) {  // Filter tombol dengan debounce
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d156      	bne.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
 8000fb4:	f7ff ffdc 	bl	8000f70 <debounce_check>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d051      	beq.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
        if (current_screen == 0) {  // Screen 1
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d117      	bne.n	8000ff6 <HAL_GPIO_EXTI_Callback+0x52>
            switch (menu_position) {
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d008      	beq.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x3c>
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d144      	bne.n	800105c <HAL_GPIO_EXTI_Callback+0xb8>
                case 1:  // Menu "Set"
                    current_screen = 1;  // Pindah ke Screen 2
 8000fd2:	4b26      	ldr	r3, [pc, #152]	@ (800106c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
                    secondary_menu_pos = 0;  // Reset ke posisi menu awal pada Screen 2
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
                    break;
 8000fde:	e040      	b.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>

                case 0:  // Menu "Start"
                    start_status = !start_status;  // Toggle Start/Stop
 8000fe0:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2301      	moveq	r3, #1
 8000fea:	2300      	movne	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000ff2:	601a      	str	r2, [r3, #0]
                    break;
 8000ff4:	e035      	b.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>

                default:
                    break;
            }
        }
        else if (current_screen == 1) {  // Screen 2
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <HAL_GPIO_EXTI_Callback+0xc8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d131      	bne.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
            if (is_selecting_scaler) {  // Jika sedang memilih scaler
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <HAL_GPIO_EXTI_Callback+0x72>
                current_scaler_index = selected_scaler_index;  // Simpan indeks scaler terakhir
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_GPIO_EXTI_Callback+0xe0>)
 800100c:	6013      	str	r3, [r2, #0]
                is_selecting_scaler = 0;  // Keluar dari mode memilih scaler
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
                        break;
                }
            }
        }
    }
}
 8001014:	e025      	b.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
            }else if(is_selecting_frequency){
 8001016:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <HAL_GPIO_EXTI_Callback+0x8a>
            	last_set_value = set_value;
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1b      	ldr	r2, [pc, #108]	@ (8001090 <HAL_GPIO_EXTI_Callback+0xec>)
 8001024:	6013      	str	r3, [r2, #0]
            	is_selecting_frequency = 0;
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	e019      	b.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
                switch (secondary_menu_pos) {
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d00e      	beq.n	8001054 <HAL_GPIO_EXTI_Callback+0xb0>
 8001036:	2b02      	cmp	r3, #2
 8001038:	dc12      	bgt.n	8001060 <HAL_GPIO_EXTI_Callback+0xbc>
 800103a:	2b00      	cmp	r3, #0
 800103c:	d002      	beq.n	8001044 <HAL_GPIO_EXTI_Callback+0xa0>
 800103e:	2b01      	cmp	r3, #1
 8001040:	d004      	beq.n	800104c <HAL_GPIO_EXTI_Callback+0xa8>
                        break;
 8001042:	e00d      	b.n	8001060 <HAL_GPIO_EXTI_Callback+0xbc>
                        is_selecting_scaler = 1;  // Masuk ke mode memilih scaler
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_GPIO_EXTI_Callback+0xd8>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
                        break;
 800104a:	e00a      	b.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
                    	is_selecting_frequency = 1;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_GPIO_EXTI_Callback+0xe4>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
                    	break;
 8001052:	e006      	b.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
                        current_screen = 0;  // Kembali ke Screen 1
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
                        break;
 800105a:	e002      	b.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
                    break;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <HAL_GPIO_EXTI_Callback+0xbe>
                        break;
 8001060:	bf00      	nop
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200001a4 	.word	0x200001a4
 8001070:	20000198 	.word	0x20000198
 8001074:	200001a8 	.word	0x200001a8
 8001078:	200001a0 	.word	0x200001a0
 800107c:	200001ac 	.word	0x200001ac
 8001080:	200001b0 	.word	0x200001b0
 8001084:	200001b4 	.word	0x200001b4
 8001088:	200001b8 	.word	0x200001b8
 800108c:	20000000 	.word	0x20000000
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	encoder_value = __HAL_TIM_GET_COUNTER(htim);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HAL_TIM_IC_CaptureCallback+0x20>)
 80010a6:	801a      	strh	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	2000009c 	.word	0x2000009c

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	@ 0x30
 80010bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f001 fb61 	bl	8002784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f88b 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c6:	f000 f9c7 	bl	8001458 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010ca:	f000 f8f1 	bl	80012b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010ce:	f000 f941 	bl	8001354 <MX_I2C1_Init>
  MX_TIM3_Init();
 80010d2:	f000 f96d 	bl	80013b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  lcd1.hi2c = &hi2c1;
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <main+0x100>)
 80010d8:	4a38      	ldr	r2, [pc, #224]	@ (80011bc <main+0x104>)
 80010da:	601a      	str	r2, [r3, #0]
  lcd1.address = 0x4E;
 80010dc:	4b36      	ldr	r3, [pc, #216]	@ (80011b8 <main+0x100>)
 80010de:	224e      	movs	r2, #78	@ 0x4e
 80010e0:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd1);
 80010e2:	4835      	ldr	r0, [pc, #212]	@ (80011b8 <main+0x100>)
 80010e4:	f7ff fee6 	bl	8000eb4 <lcd_init>

  encoder_init(&htim3);
 80010e8:	4835      	ldr	r0, [pc, #212]	@ (80011c0 <main+0x108>)
 80010ea:	f7ff fe3f 	bl	8000d6c <encoder_init>
  menu_init();
 80010ee:	f000 fa31 	bl	8001554 <menu_init>
  const int32_t correction = 978;
 80010f2:	f240 33d2 	movw	r3, #978	@ 0x3d2
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
  si5351_Init(correction);
 80010f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010fa:	f000 feab 	bl	8001e54 <si5351_Init>

  si5351PLLConfig_t pll_conf;
  si5351OutputConfig_t out_conf;
  int32_t Fclk = 100000; // 7 MHz
 80010fe:	4b31      	ldr	r3, [pc, #196]	@ (80011c4 <main+0x10c>)
 8001100:	623b      	str	r3, [r7, #32]

  si5351_Calc(Fclk, &pll_conf, &out_conf);
 8001102:	463a      	mov	r2, r7
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	6a38      	ldr	r0, [r7, #32]
 800110c:	f000 ffc8 	bl	80020a0 <si5351_Calc>
  si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	2000      	movs	r0, #0
 8001118:	f000 fed4 	bl	8001ec4 <si5351_SetupPLL>

  si5351_SetupOutput(0, SI5351_PLL_A, SI5351_DRIVE_STRENGTH_4MA, &out_conf, 0);
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	9200      	str	r2, [sp, #0]
 8001122:	2201      	movs	r2, #1
 8001124:	2100      	movs	r1, #0
 8001126:	2000      	movs	r0, #0
 8001128:	f000 ff0b 	bl	8001f42 <si5351_SetupOutput>
  si5351_EnableOutputs(1<<0);
 800112c:	2001      	movs	r0, #1
 800112e:	f001 f8c5 	bl	80022bc <si5351_EnableOutputs>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      menu_update();   // Update logika menu
 8001132:	f000 fa2b 	bl	800158c <menu_update>
      menu_display();  // Tampilkan menu
 8001136:	f000 fb73 	bl	8001820 <menu_display>


      if (start_status == 1)
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <main+0x110>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d12c      	bne.n	800119c <main+0xe4>

      {
    	  if (last_set_value != previous_set_value)
 8001142:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <main+0x114>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <main+0x118>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d00f      	beq.n	800116e <main+0xb6>
    	     {
    	         // Jika berubah, lakukan setup untuk CLK0 dan CLK2
    	         si5351_SetupCLK0(last_set_value, SI5351_DRIVE_STRENGTH_4MA);
 800114e:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <main+0x114>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f001 f86f 	bl	8002238 <si5351_SetupCLK0>
    	         si5351_SetupCLK2(last_set_value, SI5351_DRIVE_STRENGTH_4MA);
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <main+0x114>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2101      	movs	r1, #1
 8001160:	4618      	mov	r0, r3
 8001162:	f001 f88a 	bl	800227a <si5351_SetupCLK2>


    	         // Update nilai terakhir
    	         previous_set_value = last_set_value;
 8001166:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <main+0x114>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a19      	ldr	r2, [pc, #100]	@ (80011d0 <main+0x118>)
 800116c:	6013      	str	r3, [r2, #0]
    	     }
    	  si5351_EnableOutputs((1<<0) | (1<<2));
 800116e:	2005      	movs	r0, #5
 8001170:	f001 f8a4 	bl	80022bc <si5351_EnableOutputs>
    	  if(HAL_GetTick()-last_time >= 500)
 8001174:	f001 fb6c 	bl	8002850 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <main+0x11c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001184:	d313      	bcc.n	80011ae <main+0xf6>
    	  {
    		  HAL_GPIO_TogglePin(GPIOC, LED_PIN_Pin);
 8001186:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118a:	4813      	ldr	r0, [pc, #76]	@ (80011d8 <main+0x120>)
 800118c:	f002 f8a1 	bl	80032d2 <HAL_GPIO_TogglePin>
    		  last_time = HAL_GetTick();
 8001190:	f001 fb5e 	bl	8002850 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <main+0x11c>)
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e008      	b.n	80011ae <main+0xf6>
    	  }
      }
      else
      {
    	  si5351_EnableOutputs(0);
 800119c:	2000      	movs	r0, #0
 800119e:	f001 f88d 	bl	80022bc <si5351_EnableOutputs>
    	  HAL_GPIO_WritePin(GPIOC, LED_PIN_Pin, SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a8:	480b      	ldr	r0, [pc, #44]	@ (80011d8 <main+0x120>)
 80011aa:	f002 f879 	bl	80032a0 <HAL_GPIO_WritePin>
      }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_Delay(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f001 fb5a 	bl	8002868 <HAL_Delay>
      menu_update();   // Update logika menu
 80011b4:	e7bd      	b.n	8001132 <main+0x7a>
 80011b6:	bf00      	nop
 80011b8:	20000184 	.word	0x20000184
 80011bc:	200000e8 	.word	0x200000e8
 80011c0:	2000013c 	.word	0x2000013c
 80011c4:	000186a0 	.word	0x000186a0
 80011c8:	200001a0 	.word	0x200001a0
 80011cc:	20000004 	.word	0x20000004
 80011d0:	2000018c 	.word	0x2000018c
 80011d4:	20000194 	.word	0x20000194
 80011d8:	40020800 	.word	0x40020800

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	@ 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	@ 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f004 f804 	bl	80051f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <SystemClock_Config+0xcc>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <SystemClock_Config+0xcc>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001210:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <SystemClock_Config+0xcc>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <SystemClock_Config+0xd0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001228:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <SystemClock_Config+0xd0>)
 800122a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <SystemClock_Config+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001244:	2310      	movs	r3, #16
 8001246:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800124c:	2300      	movs	r3, #0
 800124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001250:	2308      	movs	r3, #8
 8001252:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001254:	2354      	movs	r3, #84	@ 0x54
 8001256:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125c:	2304      	movs	r3, #4
 800125e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4618      	mov	r0, r3
 8001266:	f002 ffc3 	bl	80041f0 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001270:	f000 f96a 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2302      	movs	r3, #2
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2102      	movs	r1, #2
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fa25 	bl	80046e0 <HAL_RCC_ClockConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800129c:	f000 f954 	bl	8001548 <Error_Handler>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3750      	adds	r7, #80	@ 0x50
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012c4:	4a21      	ldr	r2, [pc, #132]	@ (800134c <MX_ADC1_Init+0x9c>)
 80012c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f0:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012f2:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <MX_ADC1_Init+0xa0>)
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_ADC1_Init+0x98>)
 80012fe:	2201      	movs	r2, #1
 8001300:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_ADC1_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_ADC1_Init+0x98>)
 800130c:	2201      	movs	r2, #1
 800130e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001310:	480d      	ldr	r0, [pc, #52]	@ (8001348 <MX_ADC1_Init+0x98>)
 8001312:	f001 facd 	bl	80028b0 <HAL_ADC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800131c:	f000 f914 	bl	8001548 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001320:	2301      	movs	r3, #1
 8001322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_ADC1_Init+0x98>)
 8001332:	f001 fb01 	bl	8002938 <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800133c:	f000 f904 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000a0 	.word	0x200000a0
 800134c:	40012000 	.word	0x40012000
 8001350:	0f000001 	.word	0x0f000001

08001354 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <MX_I2C1_Init+0x50>)
 800135a:	4a13      	ldr	r2, [pc, #76]	@ (80013a8 <MX_I2C1_Init+0x54>)
 800135c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <MX_I2C1_Init+0x58>)
 8001362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <MX_I2C1_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001372:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001376:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001392:	f001 ffd1 	bl	8003338 <HAL_I2C_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800139c:	f000 f8d4 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200000e8 	.word	0x200000e8
 80013a8:	40005400 	.word	0x40005400
 80013ac:	000186a0 	.word	0x000186a0

080013b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2224      	movs	r2, #36	@ 0x24
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 ff1a 	bl	80051f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013ce:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <MX_TIM3_Init+0xa4>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_TIM3_Init+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013fa:	2301      	movs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800140a:	2301      	movs	r3, #1
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_TIM3_Init+0xa0>)
 800141e:	f003 fb2b 	bl	8004a78 <HAL_TIM_Encoder_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001428:	f000 f88e 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_TIM3_Init+0xa0>)
 800143a:	f003 fe3b 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001444:	f000 f880 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3730      	adds	r7, #48	@ 0x30
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000013c 	.word	0x2000013c
 8001454:	40000400 	.word	0x40000400

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b32      	ldr	r3, [pc, #200]	@ (800153c <MX_GPIO_Init+0xe4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a31      	ldr	r2, [pc, #196]	@ (800153c <MX_GPIO_Init+0xe4>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <MX_GPIO_Init+0xe4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <MX_GPIO_Init+0xe4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <MX_GPIO_Init+0xe4>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b28      	ldr	r3, [pc, #160]	@ (800153c <MX_GPIO_Init+0xe4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b24      	ldr	r3, [pc, #144]	@ (800153c <MX_GPIO_Init+0xe4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <MX_GPIO_Init+0xe4>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <MX_GPIO_Init+0xe4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <MX_GPIO_Init+0xe4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a1c      	ldr	r2, [pc, #112]	@ (800153c <MX_GPIO_Init+0xe4>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b1a      	ldr	r3, [pc, #104]	@ (800153c <MX_GPIO_Init+0xe4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e4:	4816      	ldr	r0, [pc, #88]	@ (8001540 <MX_GPIO_Init+0xe8>)
 80014e6:	f001 fedb 	bl	80032a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80014ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480f      	ldr	r0, [pc, #60]	@ (8001540 <MX_GPIO_Init+0xe8>)
 8001504:	f001 fd48 	bl	8002f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8001508:	2301      	movs	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <MX_GPIO_Init+0xec>)
 800151e:	f001 fd3b 	bl	8002f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2006      	movs	r0, #6
 8001528:	f001 fcff 	bl	8002f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800152c:	2006      	movs	r0, #6
 800152e:	f001 fd18 	bl	8002f62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020800 	.word	0x40020800
 8001544:	40020000 	.word	0x40020000

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <Error_Handler+0x8>

08001554 <menu_init>:

uint32_t last_blink_time = 0;  // Waktu terakhir blink
int blink_state = 1;           // 1: Tampilkan "SCALE", 0: Hapus "SCALE"


void menu_init(void) {
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
    menu_position = 0;
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <menu_init+0x28>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
    setting_mode = 0;
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <menu_init+0x2c>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
    set_value = 8000;
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <menu_init+0x30>)
 8001566:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800156a:	601a      	str	r2, [r3, #0]
    start_status = 0;
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <menu_init+0x34>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	20000198 	.word	0x20000198
 8001580:	2000019c 	.word	0x2000019c
 8001584:	20000000 	.word	0x20000000
 8001588:	200001a0 	.word	0x200001a0

0800158c <menu_update>:

void menu_update(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001592:	f001 f95d 	bl	8002850 <HAL_GetTick>
 8001596:	6078      	str	r0, [r7, #4]
    uint32_t delta_time = current_time - last_update_time;
 8001598:	4b7e      	ldr	r3, [pc, #504]	@ (8001794 <menu_update+0x208>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	603b      	str	r3, [r7, #0]

    if (is_selecting_scaler)
 80015a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001798 <menu_update+0x20c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d044      	beq.n	8001634 <menu_update+0xa8>
    {  // Jika sedang memilih scaler
    	if(current_time - last_blink_time >= 500)
 80015aa:	4b7c      	ldr	r3, [pc, #496]	@ (800179c <menu_update+0x210>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015b6:	d30c      	bcc.n	80015d2 <menu_update+0x46>
    	{
    		blink_state = !blink_state;  // Toggle blink state
 80015b8:	4b79      	ldr	r3, [pc, #484]	@ (80017a0 <menu_update+0x214>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b75      	ldr	r3, [pc, #468]	@ (80017a0 <menu_update+0x214>)
 80015ca:	601a      	str	r2, [r3, #0]
    		last_blink_time = current_time;
 80015cc:	4a73      	ldr	r2, [pc, #460]	@ (800179c <menu_update+0x210>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
    	}
        if (encoder_value > last_encoder_value) {
 80015d2:	4b74      	ldr	r3, [pc, #464]	@ (80017a4 <menu_update+0x218>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b73      	ldr	r3, [pc, #460]	@ (80017a8 <menu_update+0x21c>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	429a      	cmp	r2, r3
 80015e0:	dd0e      	ble.n	8001600 <menu_update+0x74>
            if (selected_scaler_index < (sizeof(scaler_values) / sizeof(scaler_values[0])) - 1) {
 80015e2:	4b72      	ldr	r3, [pc, #456]	@ (80017ac <menu_update+0x220>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d804      	bhi.n	80015f4 <menu_update+0x68>
                selected_scaler_index++;  // Pindah ke scaler berikutnya
 80015ea:	4b70      	ldr	r3, [pc, #448]	@ (80017ac <menu_update+0x220>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4a6e      	ldr	r2, [pc, #440]	@ (80017ac <menu_update+0x220>)
 80015f2:	6013      	str	r3, [r2, #0]
            }
            last_encoder_value = encoder_value;
 80015f4:	4b6b      	ldr	r3, [pc, #428]	@ (80017a4 <menu_update+0x218>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	4b6b      	ldr	r3, [pc, #428]	@ (80017a8 <menu_update+0x21c>)
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	e015      	b.n	800162c <menu_update+0xa0>
        } else if (encoder_value < last_encoder_value) {
 8001600:	4b68      	ldr	r3, [pc, #416]	@ (80017a4 <menu_update+0x218>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b21a      	sxth	r2, r3
 8001606:	4b68      	ldr	r3, [pc, #416]	@ (80017a8 <menu_update+0x21c>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	b21b      	sxth	r3, r3
 800160c:	429a      	cmp	r2, r3
 800160e:	da0d      	bge.n	800162c <menu_update+0xa0>
            if (selected_scaler_index > 0) {
 8001610:	4b66      	ldr	r3, [pc, #408]	@ (80017ac <menu_update+0x220>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd04      	ble.n	8001622 <menu_update+0x96>
                selected_scaler_index--;  // Pindah ke scaler sebelumnya
 8001618:	4b64      	ldr	r3, [pc, #400]	@ (80017ac <menu_update+0x220>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a63      	ldr	r2, [pc, #396]	@ (80017ac <menu_update+0x220>)
 8001620:	6013      	str	r3, [r2, #0]
            }
            last_encoder_value = encoder_value;
 8001622:	4b60      	ldr	r3, [pc, #384]	@ (80017a4 <menu_update+0x218>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b5f      	ldr	r3, [pc, #380]	@ (80017a8 <menu_update+0x21c>)
 800162a:	801a      	strh	r2, [r3, #0]
        }
        last_update_time = current_time;  // Perbarui waktu terakhir
 800162c:	4a59      	ldr	r2, [pc, #356]	@ (8001794 <menu_update+0x208>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
    	} else if (encoder_value < last_encoder_value) {  // Bergerak ke kiri
    	    secondary_menu_pos = (secondary_menu_pos - 1 + 3) % 3;  // Warping: jika mencapai 0, kembali ke 2
    	    last_encoder_value = encoder_value;  // Update posisi terakhir
    	}
    }
}
 8001632:	e0e8      	b.n	8001806 <menu_update+0x27a>
    else if(is_selecting_frequency)
 8001634:	4b5e      	ldr	r3, [pc, #376]	@ (80017b0 <menu_update+0x224>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d059      	beq.n	80016f0 <menu_update+0x164>
        if (current_time - last_blink_time >= 500)
 800163c:	4b57      	ldr	r3, [pc, #348]	@ (800179c <menu_update+0x210>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001648:	d30c      	bcc.n	8001664 <menu_update+0xd8>
            blink_state = !blink_state;  // Toggle blink state
 800164a:	4b55      	ldr	r3, [pc, #340]	@ (80017a0 <menu_update+0x214>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	bf0c      	ite	eq
 8001652:	2301      	moveq	r3, #1
 8001654:	2300      	movne	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	4b51      	ldr	r3, [pc, #324]	@ (80017a0 <menu_update+0x214>)
 800165c:	601a      	str	r2, [r3, #0]
            last_blink_time = current_time;
 800165e:	4a4f      	ldr	r2, [pc, #316]	@ (800179c <menu_update+0x210>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6013      	str	r3, [r2, #0]
        if (encoder_value > last_encoder_value)
 8001664:	4b4f      	ldr	r3, [pc, #316]	@ (80017a4 <menu_update+0x218>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b21a      	sxth	r2, r3
 800166a:	4b4f      	ldr	r3, [pc, #316]	@ (80017a8 <menu_update+0x21c>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	b21b      	sxth	r3, r3
 8001670:	429a      	cmp	r2, r3
 8001672:	dd19      	ble.n	80016a8 <menu_update+0x11c>
            set_value += scaler_values[selected_scaler_index];
 8001674:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <menu_update+0x220>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <menu_update+0x228>)
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	461a      	mov	r2, r3
 8001680:	4b4d      	ldr	r3, [pc, #308]	@ (80017b8 <menu_update+0x22c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4413      	add	r3, r2
 8001686:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <menu_update+0x22c>)
 8001688:	6013      	str	r3, [r2, #0]
            if (set_value > MAX_SET_VALUE)  // Jika melebihi batas maksimum
 800168a:	4b4b      	ldr	r3, [pc, #300]	@ (80017b8 <menu_update+0x22c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <menu_update+0x230>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d903      	bls.n	800169c <menu_update+0x110>
                set_value = MIN_SET_VALUE;  // Lompat ke batas minimum
 8001694:	4b48      	ldr	r3, [pc, #288]	@ (80017b8 <menu_update+0x22c>)
 8001696:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800169a:	601a      	str	r2, [r3, #0]
            last_encoder_value = encoder_value;
 800169c:	4b41      	ldr	r3, [pc, #260]	@ (80017a4 <menu_update+0x218>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	4b41      	ldr	r3, [pc, #260]	@ (80017a8 <menu_update+0x21c>)
 80016a4:	801a      	strh	r2, [r3, #0]
 80016a6:	e01f      	b.n	80016e8 <menu_update+0x15c>
        else if (encoder_value < last_encoder_value)
 80016a8:	4b3e      	ldr	r3, [pc, #248]	@ (80017a4 <menu_update+0x218>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b3e      	ldr	r3, [pc, #248]	@ (80017a8 <menu_update+0x21c>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	429a      	cmp	r2, r3
 80016b6:	da17      	bge.n	80016e8 <menu_update+0x15c>
            if (set_value <= MIN_SET_VALUE)  // Jika kurang dari batas minimum
 80016b8:	4b3f      	ldr	r3, [pc, #252]	@ (80017b8 <menu_update+0x22c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80016c0:	d803      	bhi.n	80016ca <menu_update+0x13e>
                set_value = MAX_SET_VALUE;  // Lompat ke batas maksimum
 80016c2:	4b3d      	ldr	r3, [pc, #244]	@ (80017b8 <menu_update+0x22c>)
 80016c4:	4a3d      	ldr	r2, [pc, #244]	@ (80017bc <menu_update+0x230>)
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e009      	b.n	80016de <menu_update+0x152>
                set_value -= scaler_values[selected_scaler_index];
 80016ca:	4b38      	ldr	r3, [pc, #224]	@ (80017ac <menu_update+0x220>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a39      	ldr	r2, [pc, #228]	@ (80017b4 <menu_update+0x228>)
 80016d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016d4:	4b38      	ldr	r3, [pc, #224]	@ (80017b8 <menu_update+0x22c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	4a37      	ldr	r2, [pc, #220]	@ (80017b8 <menu_update+0x22c>)
 80016dc:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;
 80016de:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <menu_update+0x218>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b30      	ldr	r3, [pc, #192]	@ (80017a8 <menu_update+0x21c>)
 80016e6:	801a      	strh	r2, [r3, #0]
        last_update_time = current_time;  // Perbarui waktu terakhir
 80016e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001794 <menu_update+0x208>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	e08a      	b.n	8001806 <menu_update+0x27a>
    else if (current_screen == 0)
 80016f0:	4b33      	ldr	r3, [pc, #204]	@ (80017c0 <menu_update+0x234>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d12d      	bne.n	8001754 <menu_update+0x1c8>
        if (encoder_value > last_encoder_value) {  // Bergerak ke kanan
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <menu_update+0x218>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <menu_update+0x21c>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b21b      	sxth	r3, r3
 8001704:	429a      	cmp	r2, r3
 8001706:	dd0e      	ble.n	8001726 <menu_update+0x19a>
            if (menu_position < MAX_MENU) {       // Batas kanan
 8001708:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <menu_update+0x238>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	dc04      	bgt.n	800171a <menu_update+0x18e>
                menu_position++;
 8001710:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <menu_update+0x238>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a2b      	ldr	r2, [pc, #172]	@ (80017c4 <menu_update+0x238>)
 8001718:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;  // Update posisi terakhir
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <menu_update+0x218>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	b21a      	sxth	r2, r3
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <menu_update+0x21c>)
 8001722:	801a      	strh	r2, [r3, #0]
}
 8001724:	e06f      	b.n	8001806 <menu_update+0x27a>
        } else if (encoder_value < last_encoder_value) {  // Bergerak ke kiri
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <menu_update+0x218>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <menu_update+0x21c>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b21b      	sxth	r3, r3
 8001732:	429a      	cmp	r2, r3
 8001734:	da67      	bge.n	8001806 <menu_update+0x27a>
            if (menu_position > MIN_MENU) {       // Batas kiri
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <menu_update+0x238>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	dd04      	ble.n	8001748 <menu_update+0x1bc>
                menu_position--;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <menu_update+0x238>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3b01      	subs	r3, #1
 8001744:	4a1f      	ldr	r2, [pc, #124]	@ (80017c4 <menu_update+0x238>)
 8001746:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;  // Update posisi terakhir
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <menu_update+0x218>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <menu_update+0x21c>)
 8001750:	801a      	strh	r2, [r3, #0]
}
 8001752:	e058      	b.n	8001806 <menu_update+0x27a>
    else if (current_screen == 1)
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <menu_update+0x234>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d154      	bne.n	8001806 <menu_update+0x27a>
    	if (encoder_value > last_encoder_value) {  // Bergerak ke kanan
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <menu_update+0x218>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <menu_update+0x21c>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b21b      	sxth	r3, r3
 8001768:	429a      	cmp	r2, r3
 800176a:	dd31      	ble.n	80017d0 <menu_update+0x244>
    	    secondary_menu_pos = (secondary_menu_pos + 1) % 3;  // Warping: jika mencapai 2, kembali ke 0
 800176c:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <menu_update+0x23c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1c59      	adds	r1, r3, #1
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <menu_update+0x240>)
 8001774:	fb83 3201 	smull	r3, r2, r3, r1
 8001778:	17cb      	asrs	r3, r1, #31
 800177a:	1ad2      	subs	r2, r2, r3
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	1aca      	subs	r2, r1, r3
 8001784:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <menu_update+0x23c>)
 8001786:	601a      	str	r2, [r3, #0]
    	    last_encoder_value = encoder_value;  // Update posisi terakhir
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <menu_update+0x218>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b21a      	sxth	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <menu_update+0x21c>)
 8001790:	801a      	strh	r2, [r3, #0]
}
 8001792:	e038      	b.n	8001806 <menu_update+0x27a>
 8001794:	200001bc 	.word	0x200001bc
 8001798:	200001ac 	.word	0x200001ac
 800179c:	200001c0 	.word	0x200001c0
 80017a0:	20000020 	.word	0x20000020
 80017a4:	2000009c 	.word	0x2000009c
 80017a8:	2000009e 	.word	0x2000009e
 80017ac:	200001b0 	.word	0x200001b0
 80017b0:	200001b8 	.word	0x200001b8
 80017b4:	08005b78 	.word	0x08005b78
 80017b8:	20000000 	.word	0x20000000
 80017bc:	09896800 	.word	0x09896800
 80017c0:	200001a4 	.word	0x200001a4
 80017c4:	20000198 	.word	0x20000198
 80017c8:	200001a8 	.word	0x200001a8
 80017cc:	55555556 	.word	0x55555556
    	} else if (encoder_value < last_encoder_value) {  // Bergerak ke kiri
 80017d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <menu_update+0x284>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <menu_update+0x288>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	429a      	cmp	r2, r3
 80017de:	da12      	bge.n	8001806 <menu_update+0x27a>
    	    secondary_menu_pos = (secondary_menu_pos - 1 + 3) % 3;  // Warping: jika mencapai 0, kembali ke 2
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <menu_update+0x28c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1c99      	adds	r1, r3, #2
 80017e6:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <menu_update+0x290>)
 80017e8:	fb83 3201 	smull	r3, r2, r3, r1
 80017ec:	17cb      	asrs	r3, r1, #31
 80017ee:	1ad2      	subs	r2, r2, r3
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	1aca      	subs	r2, r1, r3
 80017f8:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <menu_update+0x28c>)
 80017fa:	601a      	str	r2, [r3, #0]
    	    last_encoder_value = encoder_value;  // Update posisi terakhir
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <menu_update+0x284>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b21a      	sxth	r2, r3
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <menu_update+0x288>)
 8001804:	801a      	strh	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000009c 	.word	0x2000009c
 8001814:	2000009e 	.word	0x2000009e
 8001818:	200001a8 	.word	0x200001a8
 800181c:	55555556 	.word	0x55555556

08001820 <menu_display>:

void menu_display(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b0a4      	sub	sp, #144	@ 0x90
 8001824:	af00      	add	r7, sp, #0
    if (current_screen != last_screen) {
 8001826:	4b94      	ldr	r3, [pc, #592]	@ (8001a78 <menu_display+0x258>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b94      	ldr	r3, [pc, #592]	@ (8001a7c <menu_display+0x25c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d015      	beq.n	800185e <menu_display+0x3e>
        lcd_clear(&lcd1);  // Bersihkan layar hanya saat berpindah screen
 8001832:	4893      	ldr	r0, [pc, #588]	@ (8001a80 <menu_display+0x260>)
 8001834:	f7ff fb08 	bl	8000e48 <lcd_clear>
        last_screen = current_screen;  // Simpan screen terakhir
 8001838:	4b8f      	ldr	r3, [pc, #572]	@ (8001a78 <menu_display+0x258>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a8f      	ldr	r2, [pc, #572]	@ (8001a7c <menu_display+0x25c>)
 800183e:	6013      	str	r3, [r2, #0]
        if (current_screen == 0) {
 8001840:	4b8d      	ldr	r3, [pc, #564]	@ (8001a78 <menu_display+0x258>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <menu_display+0x3e>
            last_start_status = -1;  // Paksa pembaruan ulang tulisan "START"/"STOP"
 8001848:	4b8e      	ldr	r3, [pc, #568]	@ (8001a84 <menu_display+0x264>)
 800184a:	f04f 32ff 	mov.w	r2, #4294967295
 800184e:	601a      	str	r2, [r3, #0]
            last_menu_position = -1;  // Paksa pembaruan ulang posisi menu
 8001850:	4b8d      	ldr	r3, [pc, #564]	@ (8001a88 <menu_display+0x268>)
 8001852:	f04f 32ff 	mov.w	r2, #4294967295
 8001856:	601a      	str	r2, [r3, #0]
            is_first_update = 1;
 8001858:	4b8c      	ldr	r3, [pc, #560]	@ (8001a8c <menu_display+0x26c>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
        }
    }

    if (current_screen == 0) {  // Screen awal
 800185e:	4b86      	ldr	r3, [pc, #536]	@ (8001a78 <menu_display+0x258>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 809f 	bne.w	80019a6 <menu_display+0x186>
        lcd_gotoxy(&lcd1, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	4884      	ldr	r0, [pc, #528]	@ (8001a80 <menu_display+0x260>)
 800186e:	f7ff fb05 	bl	8000e7c <lcd_gotoxy>
        lcd_puts(&lcd1, "F:");
 8001872:	4987      	ldr	r1, [pc, #540]	@ (8001a90 <menu_display+0x270>)
 8001874:	4882      	ldr	r0, [pc, #520]	@ (8001a80 <menu_display+0x260>)
 8001876:	f7ff fb64 	bl	8000f42 <lcd_puts>


        char set_value_buffer[20];
        format_number(last_set_value, set_value_buffer);
 800187a:	4b86      	ldr	r3, [pc, #536]	@ (8001a94 <menu_display+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fa89 	bl	8001d9c <format_number>
        strcat(set_value_buffer,"Hz");
 800188a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fca6 	bl	80001e0 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800189c:	4413      	add	r3, r2
 800189e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a98 <menu_display+0x278>)
 80018a0:	8811      	ldrh	r1, [r2, #0]
 80018a2:	7892      	ldrb	r2, [r2, #2]
 80018a4:	8019      	strh	r1, [r3, #0]
 80018a6:	709a      	strb	r2, [r3, #2]
        lcd_gotoxy(&lcd1, 2, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2102      	movs	r1, #2
 80018ac:	4874      	ldr	r0, [pc, #464]	@ (8001a80 <menu_display+0x260>)
 80018ae:	f7ff fae5 	bl	8000e7c <lcd_gotoxy>
        lcd_puts(&lcd1, set_value_buffer);
 80018b2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80018b6:	4619      	mov	r1, r3
 80018b8:	4871      	ldr	r0, [pc, #452]	@ (8001a80 <menu_display+0x260>)
 80018ba:	f7ff fb42 	bl	8000f42 <lcd_puts>

        lcd_gotoxy(&lcd1, 0, 1);
 80018be:	2201      	movs	r2, #1
 80018c0:	2100      	movs	r1, #0
 80018c2:	486f      	ldr	r0, [pc, #444]	@ (8001a80 <menu_display+0x260>)
 80018c4:	f7ff fada 	bl	8000e7c <lcd_gotoxy>
        lcd_puts(&lcd1, "V:");
 80018c8:	4974      	ldr	r1, [pc, #464]	@ (8001a9c <menu_display+0x27c>)
 80018ca:	486d      	ldr	r0, [pc, #436]	@ (8001a80 <menu_display+0x260>)
 80018cc:	f7ff fb39 	bl	8000f42 <lcd_puts>

        lcd_gotoxy(&lcd1, 13, 1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	210d      	movs	r1, #13
 80018d4:	486a      	ldr	r0, [pc, #424]	@ (8001a80 <menu_display+0x260>)
 80018d6:	f7ff fad1 	bl	8000e7c <lcd_gotoxy>
        lcd_puts(&lcd1, "SET");
 80018da:	4971      	ldr	r1, [pc, #452]	@ (8001aa0 <menu_display+0x280>)
 80018dc:	4868      	ldr	r0, [pc, #416]	@ (8001a80 <menu_display+0x260>)
 80018de:	f7ff fb30 	bl	8000f42 <lcd_puts>

        if (start_status != last_start_status) {
 80018e2:	4b70      	ldr	r3, [pc, #448]	@ (8001aa4 <menu_display+0x284>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b67      	ldr	r3, [pc, #412]	@ (8001a84 <menu_display+0x264>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d019      	beq.n	8001922 <menu_display+0x102>
            lcd_gotoxy(&lcd1, 7, 1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2107      	movs	r1, #7
 80018f2:	4863      	ldr	r0, [pc, #396]	@ (8001a80 <menu_display+0x260>)
 80018f4:	f7ff fac2 	bl	8000e7c <lcd_gotoxy>
            if (start_status == 0) {
 80018f8:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <menu_display+0x284>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <menu_display+0xea>
                lcd_puts(&lcd1, "START");
 8001900:	4969      	ldr	r1, [pc, #420]	@ (8001aa8 <menu_display+0x288>)
 8001902:	485f      	ldr	r0, [pc, #380]	@ (8001a80 <menu_display+0x260>)
 8001904:	f7ff fb1d 	bl	8000f42 <lcd_puts>
 8001908:	e007      	b.n	800191a <menu_display+0xfa>
            } else if (start_status == 1) {
 800190a:	4b66      	ldr	r3, [pc, #408]	@ (8001aa4 <menu_display+0x284>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d103      	bne.n	800191a <menu_display+0xfa>
                lcd_puts(&lcd1, "STOP ");
 8001912:	4966      	ldr	r1, [pc, #408]	@ (8001aac <menu_display+0x28c>)
 8001914:	485a      	ldr	r0, [pc, #360]	@ (8001a80 <menu_display+0x260>)
 8001916:	f7ff fb14 	bl	8000f42 <lcd_puts>
            }
            last_start_status = start_status;  // Simpan status terakhir
 800191a:	4b62      	ldr	r3, [pc, #392]	@ (8001aa4 <menu_display+0x284>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a59      	ldr	r2, [pc, #356]	@ (8001a84 <menu_display+0x264>)
 8001920:	6013      	str	r3, [r2, #0]
        }

        if (menu_position != last_menu_position) {
 8001922:	4b63      	ldr	r3, [pc, #396]	@ (8001ab0 <menu_display+0x290>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b58      	ldr	r3, [pc, #352]	@ (8001a88 <menu_display+0x268>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	f000 8214 	beq.w	8001d58 <menu_display+0x538>
            // Hapus arrow dari posisi sebelumnya
            if (last_menu_position == 0) {
 8001930:	4b55      	ldr	r3, [pc, #340]	@ (8001a88 <menu_display+0x268>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <menu_display+0x12c>
                lcd_gotoxy(&lcd1, 6, 1);
 8001938:	2201      	movs	r2, #1
 800193a:	2106      	movs	r1, #6
 800193c:	4850      	ldr	r0, [pc, #320]	@ (8001a80 <menu_display+0x260>)
 800193e:	f7ff fa9d 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001942:	495c      	ldr	r1, [pc, #368]	@ (8001ab4 <menu_display+0x294>)
 8001944:	484e      	ldr	r0, [pc, #312]	@ (8001a80 <menu_display+0x260>)
 8001946:	f7ff fafc 	bl	8000f42 <lcd_puts>
 800194a:	e00c      	b.n	8001966 <menu_display+0x146>
            } else if (last_menu_position == 1) {
 800194c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <menu_display+0x268>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d108      	bne.n	8001966 <menu_display+0x146>
                lcd_gotoxy(&lcd1, 12, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	210c      	movs	r1, #12
 8001958:	4849      	ldr	r0, [pc, #292]	@ (8001a80 <menu_display+0x260>)
 800195a:	f7ff fa8f 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 800195e:	4955      	ldr	r1, [pc, #340]	@ (8001ab4 <menu_display+0x294>)
 8001960:	4847      	ldr	r0, [pc, #284]	@ (8001a80 <menu_display+0x260>)
 8001962:	f7ff faee 	bl	8000f42 <lcd_puts>
            }

            // Tampilkan arrow di posisi baru
            if (menu_position == 0) {
 8001966:	4b52      	ldr	r3, [pc, #328]	@ (8001ab0 <menu_display+0x290>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <menu_display+0x162>
                lcd_gotoxy(&lcd1, 6, 1);
 800196e:	2201      	movs	r2, #1
 8001970:	2106      	movs	r1, #6
 8001972:	4843      	ldr	r0, [pc, #268]	@ (8001a80 <menu_display+0x260>)
 8001974:	f7ff fa82 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001978:	494f      	ldr	r1, [pc, #316]	@ (8001ab8 <menu_display+0x298>)
 800197a:	4841      	ldr	r0, [pc, #260]	@ (8001a80 <menu_display+0x260>)
 800197c:	f7ff fae1 	bl	8000f42 <lcd_puts>
 8001980:	e00c      	b.n	800199c <menu_display+0x17c>
            } else if (menu_position == 1) {
 8001982:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <menu_display+0x290>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d108      	bne.n	800199c <menu_display+0x17c>
                lcd_gotoxy(&lcd1, 12, 1);
 800198a:	2201      	movs	r2, #1
 800198c:	210c      	movs	r1, #12
 800198e:	483c      	ldr	r0, [pc, #240]	@ (8001a80 <menu_display+0x260>)
 8001990:	f7ff fa74 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001994:	4948      	ldr	r1, [pc, #288]	@ (8001ab8 <menu_display+0x298>)
 8001996:	483a      	ldr	r0, [pc, #232]	@ (8001a80 <menu_display+0x260>)
 8001998:	f7ff fad3 	bl	8000f42 <lcd_puts>
            }

            last_menu_position = menu_position;  // Simpan posisi terakhir
 800199c:	4b44      	ldr	r3, [pc, #272]	@ (8001ab0 <menu_display+0x290>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a39      	ldr	r2, [pc, #228]	@ (8001a88 <menu_display+0x268>)
 80019a2:	6013      	str	r3, [r2, #0]
            last_secondary_menu_pos = secondary_menu_pos;
        }


    }
}
 80019a4:	e1d8      	b.n	8001d58 <menu_display+0x538>
    } else if (current_screen == 1) {  // Screen kedua
 80019a6:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <menu_display+0x258>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	f040 81d4 	bne.w	8001d58 <menu_display+0x538>
    	if(!is_selecting_scaler || blink_state)
 80019b0:	4b42      	ldr	r3, [pc, #264]	@ (8001abc <menu_display+0x29c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <menu_display+0x1a0>
 80019b8:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <menu_display+0x2a0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d009      	beq.n	80019d4 <menu_display+0x1b4>
    		lcd_gotoxy(&lcd1, 1, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2101      	movs	r1, #1
 80019c4:	482e      	ldr	r0, [pc, #184]	@ (8001a80 <menu_display+0x260>)
 80019c6:	f7ff fa59 	bl	8000e7c <lcd_gotoxy>
    		lcd_puts(&lcd1, "SCALE:");
 80019ca:	493e      	ldr	r1, [pc, #248]	@ (8001ac4 <menu_display+0x2a4>)
 80019cc:	482c      	ldr	r0, [pc, #176]	@ (8001a80 <menu_display+0x260>)
 80019ce:	f7ff fab8 	bl	8000f42 <lcd_puts>
 80019d2:	e008      	b.n	80019e6 <menu_display+0x1c6>
            lcd_gotoxy(&lcd1, 1, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2101      	movs	r1, #1
 80019d8:	4829      	ldr	r0, [pc, #164]	@ (8001a80 <menu_display+0x260>)
 80019da:	f7ff fa4f 	bl	8000e7c <lcd_gotoxy>
            lcd_puts(&lcd1, "     ");  // Hapus tulisan "SCALE" saat blink off
 80019de:	493a      	ldr	r1, [pc, #232]	@ (8001ac8 <menu_display+0x2a8>)
 80019e0:	4827      	ldr	r0, [pc, #156]	@ (8001a80 <menu_display+0x260>)
 80019e2:	f7ff faae 	bl	8000f42 <lcd_puts>
    	if(!is_selecting_frequency || blink_state)
 80019e6:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <menu_display+0x2ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <menu_display+0x1d6>
 80019ee:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <menu_display+0x2a0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <menu_display+0x1ea>
    		lcd_gotoxy(&lcd1, 1, 1);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2101      	movs	r1, #1
 80019fa:	4821      	ldr	r0, [pc, #132]	@ (8001a80 <menu_display+0x260>)
 80019fc:	f7ff fa3e 	bl	8000e7c <lcd_gotoxy>
    		lcd_puts(&lcd1, "F:");
 8001a00:	4923      	ldr	r1, [pc, #140]	@ (8001a90 <menu_display+0x270>)
 8001a02:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <menu_display+0x260>)
 8001a04:	f7ff fa9d 	bl	8000f42 <lcd_puts>
 8001a08:	e008      	b.n	8001a1c <menu_display+0x1fc>
            lcd_gotoxy(&lcd1, 1, 1);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	481c      	ldr	r0, [pc, #112]	@ (8001a80 <menu_display+0x260>)
 8001a10:	f7ff fa34 	bl	8000e7c <lcd_gotoxy>
            lcd_puts(&lcd1, " ");  // Hapus tulisan "SCALE" saat blink off
 8001a14:	4927      	ldr	r1, [pc, #156]	@ (8001ab4 <menu_display+0x294>)
 8001a16:	481a      	ldr	r0, [pc, #104]	@ (8001a80 <menu_display+0x260>)
 8001a18:	f7ff fa93 	bl	8000f42 <lcd_puts>
        lcd_gotoxy(&lcd1, 14, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	210e      	movs	r1, #14
 8001a20:	4817      	ldr	r0, [pc, #92]	@ (8001a80 <menu_display+0x260>)
 8001a22:	f7ff fa2b 	bl	8000e7c <lcd_gotoxy>
        lcd_puts(&lcd1, "OK");
 8001a26:	492a      	ldr	r1, [pc, #168]	@ (8001ad0 <menu_display+0x2b0>)
 8001a28:	4815      	ldr	r0, [pc, #84]	@ (8001a80 <menu_display+0x260>)
 8001a2a:	f7ff fa8a 	bl	8000f42 <lcd_puts>
        if (is_selecting_scaler) {
 8001a2e:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <menu_display+0x29c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d056      	beq.n	8001ae4 <menu_display+0x2c4>
            lcd_gotoxy(&lcd1, 7, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2107      	movs	r1, #7
 8001a3a:	4811      	ldr	r0, [pc, #68]	@ (8001a80 <menu_display+0x260>)
 8001a3c:	f7ff fa1e 	bl	8000e7c <lcd_gotoxy>
            lcd_puts(&lcd1, "       ");
 8001a40:	4924      	ldr	r1, [pc, #144]	@ (8001ad4 <menu_display+0x2b4>)
 8001a42:	480f      	ldr	r0, [pc, #60]	@ (8001a80 <menu_display+0x260>)
 8001a44:	f7ff fa7d 	bl	8000f42 <lcd_puts>
            lcd_gotoxy(&lcd1, 7, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <menu_display+0x260>)
 8001a4e:	f7ff fa15 	bl	8000e7c <lcd_gotoxy>
            sprintf(scaler_buffer, "%d", scaler_values[selected_scaler_index]);  // Tampilkan nilai scaler
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <menu_display+0x2b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <menu_display+0x2bc>)
 8001a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a5c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001a60:	491f      	ldr	r1, [pc, #124]	@ (8001ae0 <menu_display+0x2c0>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fba8 	bl	80051b8 <siprintf>
            lcd_puts(&lcd1, scaler_buffer);
 8001a68:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <menu_display+0x260>)
 8001a70:	f7ff fa67 	bl	8000f42 <lcd_puts>
 8001a74:	e04c      	b.n	8001b10 <menu_display+0x2f0>
 8001a76:	bf00      	nop
 8001a78:	200001a4 	.word	0x200001a4
 8001a7c:	20000014 	.word	0x20000014
 8001a80:	20000184 	.word	0x20000184
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	2000001c 	.word	0x2000001c
 8001a90:	08005b10 	.word	0x08005b10
 8001a94:	20000004 	.word	0x20000004
 8001a98:	08005b14 	.word	0x08005b14
 8001a9c:	08005b18 	.word	0x08005b18
 8001aa0:	08005b1c 	.word	0x08005b1c
 8001aa4:	200001a0 	.word	0x200001a0
 8001aa8:	08005b20 	.word	0x08005b20
 8001aac:	08005b28 	.word	0x08005b28
 8001ab0:	20000198 	.word	0x20000198
 8001ab4:	08005b30 	.word	0x08005b30
 8001ab8:	08005b34 	.word	0x08005b34
 8001abc:	200001ac 	.word	0x200001ac
 8001ac0:	20000020 	.word	0x20000020
 8001ac4:	08005b38 	.word	0x08005b38
 8001ac8:	08005b40 	.word	0x08005b40
 8001acc:	200001b8 	.word	0x200001b8
 8001ad0:	08005b48 	.word	0x08005b48
 8001ad4:	08005b4c 	.word	0x08005b4c
 8001ad8:	200001b0 	.word	0x200001b0
 8001adc:	08005b78 	.word	0x08005b78
 8001ae0:	08005b54 	.word	0x08005b54
            lcd_gotoxy(&lcd1, 7, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2107      	movs	r1, #7
 8001ae8:	489d      	ldr	r0, [pc, #628]	@ (8001d60 <menu_display+0x540>)
 8001aea:	f7ff f9c7 	bl	8000e7c <lcd_gotoxy>
            sprintf(scaler_buffer, "%d", scaler_values[current_scaler_index]);  // Nilai scaler terakhir
 8001aee:	4b9d      	ldr	r3, [pc, #628]	@ (8001d64 <menu_display+0x544>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a9d      	ldr	r2, [pc, #628]	@ (8001d68 <menu_display+0x548>)
 8001af4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001afc:	499b      	ldr	r1, [pc, #620]	@ (8001d6c <menu_display+0x54c>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fb5a 	bl	80051b8 <siprintf>
            lcd_puts(&lcd1, scaler_buffer);
 8001b04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4895      	ldr	r0, [pc, #596]	@ (8001d60 <menu_display+0x540>)
 8001b0c:	f7ff fa19 	bl	8000f42 <lcd_puts>
        if (is_selecting_frequency)
 8001b10:	4b97      	ldr	r3, [pc, #604]	@ (8001d70 <menu_display+0x550>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d064      	beq.n	8001be2 <menu_display+0x3c2>
            if (is_first_update)
 8001b18:	4b96      	ldr	r3, [pc, #600]	@ (8001d74 <menu_display+0x554>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d029      	beq.n	8001b74 <menu_display+0x354>
                format_number(set_value, set_value_buffer);
 8001b20:	4b95      	ldr	r3, [pc, #596]	@ (8001d78 <menu_display+0x558>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f936 	bl	8001d9c <format_number>
                strcat(set_value_buffer,"Hz");
 8001b30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fb53 	bl	80001e0 <strlen>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b42:	4413      	add	r3, r2
 8001b44:	4a8d      	ldr	r2, [pc, #564]	@ (8001d7c <menu_display+0x55c>)
 8001b46:	8811      	ldrh	r1, [r2, #0]
 8001b48:	7892      	ldrb	r2, [r2, #2]
 8001b4a:	8019      	strh	r1, [r3, #0]
 8001b4c:	709a      	strb	r2, [r3, #2]
                lcd_gotoxy(&lcd1, 3, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2103      	movs	r1, #3
 8001b52:	4883      	ldr	r0, [pc, #524]	@ (8001d60 <menu_display+0x540>)
 8001b54:	f7ff f992 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, set_value_buffer);
 8001b58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4880      	ldr	r0, [pc, #512]	@ (8001d60 <menu_display+0x540>)
 8001b60:	f7ff f9ef 	bl	8000f42 <lcd_puts>
                last_set_value_display = set_value;  // Simpan nilai yang ditampilkan
 8001b64:	4b84      	ldr	r3, [pc, #528]	@ (8001d78 <menu_display+0x558>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a85      	ldr	r2, [pc, #532]	@ (8001d80 <menu_display+0x560>)
 8001b6a:	6013      	str	r3, [r2, #0]
                is_first_update = 0;  // Set flag ke 0 agar tidak mengulang ini lagi
 8001b6c:	4b81      	ldr	r3, [pc, #516]	@ (8001d74 <menu_display+0x554>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e095      	b.n	8001ca0 <menu_display+0x480>
                if (set_value != last_set_value_display)
 8001b74:	4b80      	ldr	r3, [pc, #512]	@ (8001d78 <menu_display+0x558>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b81      	ldr	r3, [pc, #516]	@ (8001d80 <menu_display+0x560>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f000 808f 	beq.w	8001ca0 <menu_display+0x480>
                    lcd_gotoxy(&lcd1, 3, 1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2103      	movs	r1, #3
 8001b86:	4876      	ldr	r0, [pc, #472]	@ (8001d60 <menu_display+0x540>)
 8001b88:	f7ff f978 	bl	8000e7c <lcd_gotoxy>
                    lcd_puts(&lcd1, "                        ");  // Tampilkan spasi kosong untuk membersihkan angka lama
 8001b8c:	497d      	ldr	r1, [pc, #500]	@ (8001d84 <menu_display+0x564>)
 8001b8e:	4874      	ldr	r0, [pc, #464]	@ (8001d60 <menu_display+0x540>)
 8001b90:	f7ff f9d7 	bl	8000f42 <lcd_puts>
                    format_number(set_value, set_value_buffer);
 8001b94:	4b78      	ldr	r3, [pc, #480]	@ (8001d78 <menu_display+0x558>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f8fc 	bl	8001d9c <format_number>
                    strcat(set_value_buffer,"Hz");
 8001ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fb19 	bl	80001e0 <strlen>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a70      	ldr	r2, [pc, #448]	@ (8001d7c <menu_display+0x55c>)
 8001bba:	8811      	ldrh	r1, [r2, #0]
 8001bbc:	7892      	ldrb	r2, [r2, #2]
 8001bbe:	8019      	strh	r1, [r3, #0]
 8001bc0:	709a      	strb	r2, [r3, #2]
                    lcd_gotoxy(&lcd1, 3, 1);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	4866      	ldr	r0, [pc, #408]	@ (8001d60 <menu_display+0x540>)
 8001bc8:	f7ff f958 	bl	8000e7c <lcd_gotoxy>
                    lcd_puts(&lcd1, set_value_buffer);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4863      	ldr	r0, [pc, #396]	@ (8001d60 <menu_display+0x540>)
 8001bd4:	f7ff f9b5 	bl	8000f42 <lcd_puts>
                    last_set_value_display = set_value;
 8001bd8:	4b67      	ldr	r3, [pc, #412]	@ (8001d78 <menu_display+0x558>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a68      	ldr	r2, [pc, #416]	@ (8001d80 <menu_display+0x560>)
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e05e      	b.n	8001ca0 <menu_display+0x480>
            if (is_first_update)
 8001be2:	4b64      	ldr	r3, [pc, #400]	@ (8001d74 <menu_display+0x554>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d029      	beq.n	8001c3e <menu_display+0x41e>
                format_number(last_set_value, set_value_buffer);
 8001bea:	4b67      	ldr	r3, [pc, #412]	@ (8001d88 <menu_display+0x568>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f107 0218 	add.w	r2, r7, #24
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f8d1 	bl	8001d9c <format_number>
                strcat(set_value_buffer,"Hz");
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe faee 	bl	80001e0 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	f107 0318 	add.w	r3, r7, #24
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d7c <menu_display+0x55c>)
 8001c10:	8811      	ldrh	r1, [r2, #0]
 8001c12:	7892      	ldrb	r2, [r2, #2]
 8001c14:	8019      	strh	r1, [r3, #0]
 8001c16:	709a      	strb	r2, [r3, #2]
                lcd_gotoxy(&lcd1, 3, 1);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	4850      	ldr	r0, [pc, #320]	@ (8001d60 <menu_display+0x540>)
 8001c1e:	f7ff f92d 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, set_value_buffer);
 8001c22:	f107 0318 	add.w	r3, r7, #24
 8001c26:	4619      	mov	r1, r3
 8001c28:	484d      	ldr	r0, [pc, #308]	@ (8001d60 <menu_display+0x540>)
 8001c2a:	f7ff f98a 	bl	8000f42 <lcd_puts>
                last_set_value_display = last_set_value;  // Simpan nilai yang ditampilkan
 8001c2e:	4b56      	ldr	r3, [pc, #344]	@ (8001d88 <menu_display+0x568>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a53      	ldr	r2, [pc, #332]	@ (8001d80 <menu_display+0x560>)
 8001c34:	6013      	str	r3, [r2, #0]
                is_first_update = 0;  // Set flag ke 0 agar tidak mengulang ini lagi
 8001c36:	4b4f      	ldr	r3, [pc, #316]	@ (8001d74 <menu_display+0x554>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e030      	b.n	8001ca0 <menu_display+0x480>
                if (last_set_value != last_set_value_display)
 8001c3e:	4b52      	ldr	r3, [pc, #328]	@ (8001d88 <menu_display+0x568>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b4f      	ldr	r3, [pc, #316]	@ (8001d80 <menu_display+0x560>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d02a      	beq.n	8001ca0 <menu_display+0x480>
                    lcd_gotoxy(&lcd1, 3, 1);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	4844      	ldr	r0, [pc, #272]	@ (8001d60 <menu_display+0x540>)
 8001c50:	f7ff f914 	bl	8000e7c <lcd_gotoxy>
                    lcd_puts(&lcd1, "                        ");  // Tampilkan spasi kosong untuk membersihkan angka lama
 8001c54:	494b      	ldr	r1, [pc, #300]	@ (8001d84 <menu_display+0x564>)
 8001c56:	4842      	ldr	r0, [pc, #264]	@ (8001d60 <menu_display+0x540>)
 8001c58:	f7ff f973 	bl	8000f42 <lcd_puts>
                    format_number(last_set_value, set_value_buffer);
 8001c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d88 <menu_display+0x568>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1d3a      	adds	r2, r7, #4
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f899 	bl	8001d9c <format_number>
                    strcat(set_value_buffer,"Hz");
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fab7 	bl	80001e0 <strlen>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a40      	ldr	r2, [pc, #256]	@ (8001d7c <menu_display+0x55c>)
 8001c7c:	8811      	ldrh	r1, [r2, #0]
 8001c7e:	7892      	ldrb	r2, [r2, #2]
 8001c80:	8019      	strh	r1, [r3, #0]
 8001c82:	709a      	strb	r2, [r3, #2]
                    lcd_gotoxy(&lcd1, 3, 1);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2103      	movs	r1, #3
 8001c88:	4835      	ldr	r0, [pc, #212]	@ (8001d60 <menu_display+0x540>)
 8001c8a:	f7ff f8f7 	bl	8000e7c <lcd_gotoxy>
                    lcd_puts(&lcd1, set_value_buffer);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4833      	ldr	r0, [pc, #204]	@ (8001d60 <menu_display+0x540>)
 8001c94:	f7ff f955 	bl	8000f42 <lcd_puts>
                    last_set_value_display = last_set_value;
 8001c98:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <menu_display+0x568>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a38      	ldr	r2, [pc, #224]	@ (8001d80 <menu_display+0x560>)
 8001c9e:	6013      	str	r3, [r2, #0]
        if (secondary_menu_pos != last_secondary_menu_pos) {
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8001d8c <menu_display+0x56c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <menu_display+0x570>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d055      	beq.n	8001d58 <menu_display+0x538>
            if (last_secondary_menu_pos == 0) {
 8001cac:	4b38      	ldr	r3, [pc, #224]	@ (8001d90 <menu_display+0x570>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <menu_display+0x4a8>
                lcd_gotoxy(&lcd1, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4829      	ldr	r0, [pc, #164]	@ (8001d60 <menu_display+0x540>)
 8001cba:	f7ff f8df 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001cbe:	4935      	ldr	r1, [pc, #212]	@ (8001d94 <menu_display+0x574>)
 8001cc0:	4827      	ldr	r0, [pc, #156]	@ (8001d60 <menu_display+0x540>)
 8001cc2:	f7ff f93e 	bl	8000f42 <lcd_puts>
 8001cc6:	e01a      	b.n	8001cfe <menu_display+0x4de>
            } else if (last_secondary_menu_pos == 1) {
 8001cc8:	4b31      	ldr	r3, [pc, #196]	@ (8001d90 <menu_display+0x570>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d109      	bne.n	8001ce4 <menu_display+0x4c4>
                lcd_gotoxy(&lcd1, 0, 1);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4822      	ldr	r0, [pc, #136]	@ (8001d60 <menu_display+0x540>)
 8001cd6:	f7ff f8d1 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001cda:	492e      	ldr	r1, [pc, #184]	@ (8001d94 <menu_display+0x574>)
 8001cdc:	4820      	ldr	r0, [pc, #128]	@ (8001d60 <menu_display+0x540>)
 8001cde:	f7ff f930 	bl	8000f42 <lcd_puts>
 8001ce2:	e00c      	b.n	8001cfe <menu_display+0x4de>
            } else if (last_secondary_menu_pos == 2) {
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <menu_display+0x570>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d108      	bne.n	8001cfe <menu_display+0x4de>
                lcd_gotoxy(&lcd1, 13, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	210d      	movs	r1, #13
 8001cf0:	481b      	ldr	r0, [pc, #108]	@ (8001d60 <menu_display+0x540>)
 8001cf2:	f7ff f8c3 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001cf6:	4927      	ldr	r1, [pc, #156]	@ (8001d94 <menu_display+0x574>)
 8001cf8:	4819      	ldr	r0, [pc, #100]	@ (8001d60 <menu_display+0x540>)
 8001cfa:	f7ff f922 	bl	8000f42 <lcd_puts>
            if (secondary_menu_pos == 0) {  // Arrow di "SCALE"
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <menu_display+0x56c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <menu_display+0x4fa>
                lcd_gotoxy(&lcd1, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4815      	ldr	r0, [pc, #84]	@ (8001d60 <menu_display+0x540>)
 8001d0c:	f7ff f8b6 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001d10:	4921      	ldr	r1, [pc, #132]	@ (8001d98 <menu_display+0x578>)
 8001d12:	4813      	ldr	r0, [pc, #76]	@ (8001d60 <menu_display+0x540>)
 8001d14:	f7ff f915 	bl	8000f42 <lcd_puts>
 8001d18:	e01a      	b.n	8001d50 <menu_display+0x530>
            } else if (secondary_menu_pos == 1) {  // Arrow di "F"
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <menu_display+0x56c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d109      	bne.n	8001d36 <menu_display+0x516>
                lcd_gotoxy(&lcd1, 0, 1);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2100      	movs	r1, #0
 8001d26:	480e      	ldr	r0, [pc, #56]	@ (8001d60 <menu_display+0x540>)
 8001d28:	f7ff f8a8 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001d2c:	491a      	ldr	r1, [pc, #104]	@ (8001d98 <menu_display+0x578>)
 8001d2e:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <menu_display+0x540>)
 8001d30:	f7ff f907 	bl	8000f42 <lcd_puts>
 8001d34:	e00c      	b.n	8001d50 <menu_display+0x530>
            } else if (secondary_menu_pos == 2) {  // Arrow di "OK"
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <menu_display+0x56c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d108      	bne.n	8001d50 <menu_display+0x530>
                lcd_gotoxy(&lcd1, 13, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	210d      	movs	r1, #13
 8001d42:	4807      	ldr	r0, [pc, #28]	@ (8001d60 <menu_display+0x540>)
 8001d44:	f7ff f89a 	bl	8000e7c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001d48:	4913      	ldr	r1, [pc, #76]	@ (8001d98 <menu_display+0x578>)
 8001d4a:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <menu_display+0x540>)
 8001d4c:	f7ff f8f9 	bl	8000f42 <lcd_puts>
            last_secondary_menu_pos = secondary_menu_pos;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <menu_display+0x56c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0e      	ldr	r2, [pc, #56]	@ (8001d90 <menu_display+0x570>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	3790      	adds	r7, #144	@ 0x90
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000184 	.word	0x20000184
 8001d64:	200001b4 	.word	0x200001b4
 8001d68:	08005b78 	.word	0x08005b78
 8001d6c:	08005b54 	.word	0x08005b54
 8001d70:	200001b8 	.word	0x200001b8
 8001d74:	2000001c 	.word	0x2000001c
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	08005b14 	.word	0x08005b14
 8001d80:	20000018 	.word	0x20000018
 8001d84:	08005b58 	.word	0x08005b58
 8001d88:	20000004 	.word	0x20000004
 8001d8c:	200001a8 	.word	0x200001a8
 8001d90:	20000010 	.word	0x20000010
 8001d94:	08005b30 	.word	0x08005b30
 8001d98:	08005b34 	.word	0x08005b34

08001d9c <format_number>:

void format_number(uint32_t value, char *buffer) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
    char temp[16];
    sprintf(temp, "%u", value);  // Konversi angka ke string tanpa koma
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4927      	ldr	r1, [pc, #156]	@ (8001e4c <format_number+0xb0>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fa02 	bl	80051b8 <siprintf>
    int len = strlen(temp);
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fa11 	bl	80001e0 <strlen>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	623b      	str	r3, [r7, #32]
    int comma_count = (len - 1) / 3;  // Hitung jumlah koma yang diperlukan
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <format_number+0xb4>)
 8001dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dcc:	17db      	asrs	r3, r3, #31
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]
    int new_len = len + comma_count;
 8001dd2:	6a3a      	ldr	r2, [r7, #32]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]

    buffer[new_len] = '\0';  // Terminasi string
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
    int j = new_len - 1;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int counter = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Salin karakter dan tambahkan koma
    for (int i = len - 1; i >= 0; i--) {
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df4:	e021      	b.n	8001e3a <format_number+0x9e>
        buffer[j--] = temp[i];
 8001df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df8:	1e5a      	subs	r2, r3, #1
 8001dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	4413      	add	r3, r2
 8001e02:	f107 0108 	add.w	r1, r7, #8
 8001e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e08:	440a      	add	r2, r1
 8001e0a:	7812      	ldrb	r2, [r2, #0]
 8001e0c:	701a      	strb	r2, [r3, #0]
        counter++;
 8001e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e10:	3301      	adds	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (counter == 3 && i > 0) {
 8001e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d10c      	bne.n	8001e34 <format_number+0x98>
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	dd09      	ble.n	8001e34 <format_number+0x98>
            buffer[j--] = '.';  // Tambahkan koma
 8001e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e22:	1e5a      	subs	r2, r3, #1
 8001e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e26:	461a      	mov	r2, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	222e      	movs	r2, #46	@ 0x2e
 8001e2e:	701a      	strb	r2, [r3, #0]
            counter = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = len - 1; i >= 0; i--) {
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	3b01      	subs	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	dada      	bge.n	8001df6 <format_number+0x5a>
        }
    }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3730      	adds	r7, #48	@ 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	08005b74 	.word	0x08005b74
 8001e50:	55555556 	.word	0x55555556

08001e54 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency and desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 8001e5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <si5351_Init+0x6c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 8001e62:	21ff      	movs	r1, #255	@ 0xff
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 fa39 	bl	80022dc <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 8001e6a:	2180      	movs	r1, #128	@ 0x80
 8001e6c:	2010      	movs	r0, #16
 8001e6e:	f000 fa35 	bl	80022dc <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 8001e72:	2180      	movs	r1, #128	@ 0x80
 8001e74:	2011      	movs	r0, #17
 8001e76:	f000 fa31 	bl	80022dc <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	2012      	movs	r0, #18
 8001e7e:	f000 fa2d 	bl	80022dc <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 8001e82:	2180      	movs	r1, #128	@ 0x80
 8001e84:	2013      	movs	r0, #19
 8001e86:	f000 fa29 	bl	80022dc <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 8001e8a:	2180      	movs	r1, #128	@ 0x80
 8001e8c:	2014      	movs	r0, #20
 8001e8e:	f000 fa25 	bl	80022dc <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 8001e92:	2180      	movs	r1, #128	@ 0x80
 8001e94:	2015      	movs	r0, #21
 8001e96:	f000 fa21 	bl	80022dc <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	2016      	movs	r0, #22
 8001e9e:	f000 fa1d 	bl	80022dc <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 8001ea2:	2180      	movs	r1, #128	@ 0x80
 8001ea4:	2017      	movs	r0, #23
 8001ea6:	f000 fa19 	bl	80022dc <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 8001eaa:	23c0      	movs	r3, #192	@ 0xc0
 8001eac:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	20b7      	movs	r0, #183	@ 0xb7
 8001eb4:	f000 fa12 	bl	80022dc <si5351_write>
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200001c4 	.word	0x200001c4

08001ec4 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t num = conf->num;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	01da      	lsls	r2, r3, #7
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	01d9      	lsls	r1, r3, #7
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fb91 f3f3 	sdiv	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001ef6:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	01db      	lsls	r3, r3, #7
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	fb93 f2f2 	sdiv	r2, r3, r2
 8001f02:	69f9      	ldr	r1, [r7, #28]
 8001f04:	fb01 f202 	mul.w	r2, r1, r2
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
    P3 = denom;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <si5351_SetupPLL+0x56>
 8001f16:	231a      	movs	r3, #26
 8001f18:	e000      	b.n	8001f1c <si5351_SetupPLL+0x58>
 8001f1a:	2322      	movs	r3, #34	@ 0x22
 8001f1c:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 8001f1e:	7bf8      	ldrb	r0, [r7, #15]
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2300      	movs	r3, #0
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	69b9      	ldr	r1, [r7, #24]
 8001f2e:	f000 f9fd 	bl	800232c <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 8001f32:	21a0      	movs	r1, #160	@ 0xa0
 8001f34:	20b1      	movs	r0, #177	@ 0xb1
 8001f36:	f000 f9d1 	bl	80022dc <si5351_write>
}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	@ 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b08c      	sub	sp, #48	@ 0x30
 8001f46:	af02      	add	r7, sp, #8
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	71bb      	strb	r3, [r7, #6]
 8001f52:	4613      	mov	r3, r2
 8001f54:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <si5351_SetupOutput+0x36>
        return 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e08d      	b.n	8002094 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <si5351_SetupOutput+0x54>
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b07      	cmp	r3, #7
 8001f84:	dd05      	ble.n	8001f92 <si5351_SetupOutput+0x50>
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d104      	bne.n	8001f96 <si5351_SetupOutput+0x54>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e07e      	b.n	8002094 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d109      	bne.n	8001fb0 <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
        P2 = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001fae:	e016      	b.n	8001fde <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	01da      	lsls	r2, r3, #7
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	01d9      	lsls	r1, r3, #7
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	fb91 f3f3 	sdiv	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001fc4:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	01db      	lsls	r3, r3, #7
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	fb93 f2f2 	sdiv	r2, r3, r2
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	fb01 f202 	mul.w	r2, r1, r2
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	757b      	strb	r3, [r7, #21]
    switch (output) {
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d014      	beq.n	800201a <si5351_SetupOutput+0xd8>
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	dc19      	bgt.n	8002028 <si5351_SetupOutput+0xe6>
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <si5351_SetupOutput+0xbc>
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d007      	beq.n	800200c <si5351_SetupOutput+0xca>
 8001ffc:	e014      	b.n	8002028 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8001ffe:	232a      	movs	r3, #42	@ 0x2a
 8002000:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 8002002:	23a5      	movs	r3, #165	@ 0xa5
 8002004:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 8002006:	2310      	movs	r3, #16
 8002008:	757b      	strb	r3, [r7, #21]
        break;
 800200a:	e00d      	b.n	8002028 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 800200c:	2332      	movs	r3, #50	@ 0x32
 800200e:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 8002010:	23a6      	movs	r3, #166	@ 0xa6
 8002012:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 8002014:	2311      	movs	r3, #17
 8002016:	757b      	strb	r3, [r7, #21]
        break;
 8002018:	e006      	b.n	8002028 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800201a:	233a      	movs	r3, #58	@ 0x3a
 800201c:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 800201e:	23a7      	movs	r3, #167	@ 0xa7
 8002020:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 8002022:	2312      	movs	r3, #18
 8002024:	757b      	strb	r3, [r7, #21]
        break;
 8002026:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 8002028:	797b      	ldrb	r3, [r7, #5]
 800202a:	f043 030c 	orr.w	r3, r3, #12
 800202e:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 8002030:	79bb      	ldrb	r3, [r7, #6]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d103      	bne.n	800203e <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 8002036:	7d3b      	ldrb	r3, [r7, #20]
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <si5351_SetupOutput+0x118>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <si5351_SetupOutput+0x110>
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b04      	cmp	r3, #4
 8002050:	d103      	bne.n	800205a <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 8002052:	7d3b      	ldrb	r3, [r7, #20]
 8002054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002058:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 800205a:	7d3a      	ldrb	r2, [r7, #20]
 800205c:	7d7b      	ldrb	r3, [r7, #21]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f93b 	bl	80022dc <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	7c1b      	ldrb	r3, [r3, #16]
 800206a:	7df8      	ldrb	r0, [r7, #23]
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	f000 f957 	bl	800232c <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800207e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002086:	b2da      	uxtb	r2, r3
 8002088:	7dbb      	ldrb	r3, [r7, #22]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f925 	bl	80022dc <si5351_write>

    return 0;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3728      	adds	r7, #40	@ 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	0000      	movs	r0, r0
	...

080020a0 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b08e      	sub	sp, #56	@ 0x38
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80020b2:	da03      	bge.n	80020bc <si5351_Calc+0x1c>
 80020b4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e005      	b.n	80020c8 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a56      	ldr	r2, [pc, #344]	@ (8002218 <si5351_Calc+0x178>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	dd01      	ble.n	80020c8 <si5351_Calc+0x28>
 80020c4:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <si5351_Calc+0x178>)
 80020c6:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a52      	ldr	r2, [pc, #328]	@ (800221c <si5351_Calc+0x17c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	dc06      	bgt.n	80020e4 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	019b      	lsls	r3, r3, #6
 80020da:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2206      	movs	r2, #6
 80020e0:	741a      	strb	r2, [r3, #16]
 80020e2:	e002      	b.n	80020ea <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - (int32_t)((((double)Fclk)/100000000.0)*((double)si5351Correction));
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fa22 	bl	8000534 <__aeabi_i2d>
 80020f0:	a347      	add	r3, pc, #284	@ (adr r3, 8002210 <si5351_Calc+0x170>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	f7fe fbb1 	bl	800085c <__aeabi_ddiv>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4614      	mov	r4, r2
 8002100:	461d      	mov	r5, r3
 8002102:	4b47      	ldr	r3, [pc, #284]	@ (8002220 <si5351_Calc+0x180>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fa14 	bl	8000534 <__aeabi_i2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4620      	mov	r0, r4
 8002112:	4629      	mov	r1, r5
 8002114:	f7fe fa78 	bl	8000608 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fc84 	bl	8000a2c <__aeabi_d2iz>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 800212c:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <si5351_Calc+0x184>)
 800212e:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a3d      	ldr	r2, [pc, #244]	@ (8002228 <si5351_Calc+0x188>)
 8002134:	4293      	cmp	r3, r2
 8002136:	dc22      	bgt.n	800217e <si5351_Calc+0xde>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 8002138:	2324      	movs	r3, #36	@ 0x24
 800213a:	637b      	str	r3, [r7, #52]	@ 0x34
        b = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	633b      	str	r3, [r7, #48]	@ 0x30
        c = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int32_t Fpll = 900000000;
 8002144:	4b39      	ldr	r3, [pc, #228]	@ (800222c <si5351_Calc+0x18c>)
 8002146:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
        t = (Fclk >> 20) + 1;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	151b      	asrs	r3, r3, #20
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	fb01 f202 	mul.w	r2, r1, r2
 8002168:	1a9a      	subs	r2, r3, r2
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
        z = Fclk / t;
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fb92 f3f3 	sdiv	r3, r2, r3
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	e032      	b.n	80021e4 <si5351_Calc+0x144>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a2b      	ldr	r2, [pc, #172]	@ (8002230 <si5351_Calc+0x190>)
 8002182:	4293      	cmp	r3, r2
 8002184:	dd02      	ble.n	800218c <si5351_Calc+0xec>
            x = 4;
 8002186:	2304      	movs	r3, #4
 8002188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800218a:	e008      	b.n	800219e <si5351_Calc+0xfe>
        } else if (Fclk >= 100000000) {
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4a29      	ldr	r2, [pc, #164]	@ (8002234 <si5351_Calc+0x194>)
 8002190:	4293      	cmp	r3, r2
 8002192:	dd02      	ble.n	800219a <si5351_Calc+0xfa>
            x = 6;
 8002194:	2306      	movs	r3, #6
 8002196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002198:	e001      	b.n	800219e <si5351_Calc+0xfe>
        } else {
            x = 8;
 800219a:	2308      	movs	r3, #8
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        y = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
        z = 1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	623b      	str	r3, [r7, #32]

        int32_t numerator = x*Fclk;
 80021a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80021b8:	637b      	str	r3, [r7, #52]	@ 0x34
        t = (Fxtal >> 20) + 1;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	151b      	asrs	r3, r3, #20
 80021be:	3301      	adds	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	fb93 f2f2 	sdiv	r2, r3, r2
 80021ca:	69f9      	ldr	r1, [r7, #28]
 80021cc:	fb01 f202 	mul.w	r2, r1, r2
 80021d0:	1a9a      	subs	r2, r3, r2
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80021d8:	633b      	str	r3, [r7, #48]	@ 0x30
        c = Fxtal / t;
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fb92 f3f3 	sdiv	r3, r2, r3
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    pll_conf->mult = a;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021e8:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021ee:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021f4:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021fa:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002200:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a3a      	ldr	r2, [r7, #32]
 8002206:	60da      	str	r2, [r3, #12]
}
 8002208:	bf00      	nop
 800220a:	3738      	adds	r7, #56	@ 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bdb0      	pop	{r4, r5, r7, pc}
 8002210:	00000000 	.word	0x00000000
 8002214:	4197d784 	.word	0x4197d784
 8002218:	09896800 	.word	0x09896800
 800221c:	000f423f 	.word	0x000f423f
 8002220:	200001c4 	.word	0x200001c4
 8002224:	017d7840 	.word	0x017d7840
 8002228:	04d3f63f 	.word	0x04d3f63f
 800222c:	35a4e900 	.word	0x35a4e900
 8002230:	08f0d17f 	.word	0x08f0d17f
 8002234:	05f5e0ff 	.word	0x05f5e0ff

08002238 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	@ 0x30
 800223c:	af02      	add	r7, sp, #8
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 8002244:	f107 0208 	add.w	r2, r7, #8
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff26 	bl	80020a0 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff fe32 	bl	8001ec4 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	2100      	movs	r1, #0
 8002268:	9100      	str	r1, [sp, #0]
 800226a:	2100      	movs	r1, #0
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff fe68 	bl	8001f42 <si5351_SetupOutput>
}
 8002272:	bf00      	nop
 8002274:	3728      	adds	r7, #40	@ 0x28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <si5351_SetupCLK2>:

// Setup CLK2 for given frequency and drive strength. Use PLLB.
void si5351_SetupCLK2(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 800227a:	b580      	push	{r7, lr}
 800227c:	b08c      	sub	sp, #48	@ 0x30
 800227e:	af02      	add	r7, sp, #8
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 8002286:	f107 0208 	add.w	r2, r7, #8
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff05 	bl	80020a0 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_B, &pll_conf);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	2001      	movs	r0, #1
 800229e:	f7ff fe11 	bl	8001ec4 <si5351_SetupPLL>
	si5351_SetupOutput(2, SI5351_PLL_B, driveStrength, &out_conf, 0);
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	2100      	movs	r1, #0
 80022aa:	9100      	str	r1, [sp, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7ff fe47 	bl	8001f42 <si5351_SetupOutput>
}
 80022b4:	bf00      	nop
 80022b6:	3728      	adds	r7, #40	@ 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	2003      	movs	r0, #3
 80022d0:	f000 f804 	bl	80022dc <si5351_write>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af04      	add	r7, sp, #16
 80022e2:	4603      	mov	r3, r0
 80022e4:	460a      	mov	r2, r1
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	4613      	mov	r3, r2
 80022ea:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 80022ec:	bf00      	nop
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	2203      	movs	r2, #3
 80022f4:	21c0      	movs	r1, #192	@ 0xc0
 80022f6:	480c      	ldr	r0, [pc, #48]	@ (8002328 <si5351_write+0x4c>)
 80022f8:	f001 fb5a 	bl	80039b0 <HAL_I2C_IsDeviceReady>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f5      	bne.n	80022ee <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	b29a      	uxth	r2, r3
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2301      	movs	r3, #1
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	1dbb      	adds	r3, r7, #6
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2301      	movs	r3, #1
 8002316:	21c0      	movs	r1, #192	@ 0xc0
 8002318:	4803      	ldr	r0, [pc, #12]	@ (8002328 <si5351_write+0x4c>)
 800231a:	f001 fa4f 	bl	80037bc <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200000e8 	.word	0x200000e8

0800232c <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	121b      	asrs	r3, r3, #8
 8002340:	b2da      	uxtb	r2, r3
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ffc8 	bl	80022dc <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	3301      	adds	r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ffbf 	bl	80022dc <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	3302      	adds	r3, #2
 8002362:	b2d8      	uxtb	r0, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	141b      	asrs	r3, r3, #16
 8002368:	b25b      	sxtb	r3, r3
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	b25a      	sxtb	r2, r3
 8002370:	7e3b      	ldrb	r3, [r7, #24]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	b25b      	sxtb	r3, r3
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	b25b      	sxtb	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b25a      	sxtb	r2, r3
 8002380:	7f3b      	ldrb	r3, [r7, #28]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	b25b      	sxtb	r3, r3
 8002386:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800238a:	b25b      	sxtb	r3, r3
 800238c:	4313      	orrs	r3, r2
 800238e:	b25b      	sxtb	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4619      	mov	r1, r3
 8002394:	f7ff ffa2 	bl	80022dc <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	3303      	adds	r3, #3
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	121b      	asrs	r3, r3, #8
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f7ff ff98 	bl	80022dc <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	3304      	adds	r3, #4
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	4611      	mov	r1, r2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff8f 	bl	80022dc <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	3305      	adds	r3, #5
 80023c2:	b2d8      	uxtb	r0, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	131b      	asrs	r3, r3, #12
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	f023 030f 	bic.w	r3, r3, #15
 80023ce:	b25a      	sxtb	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	141b      	asrs	r3, r3, #16
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7ff ff7a 	bl	80022dc <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	3306      	adds	r3, #6
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	121b      	asrs	r3, r3, #8
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	4619      	mov	r1, r3
 80023f6:	4610      	mov	r0, r2
 80023f8:	f7ff ff70 	bl	80022dc <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	3307      	adds	r3, #7
 8002400:	b2db      	uxtb	r3, r3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff67 	bl	80022dc <si5351_write>
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_MspInit+0x4c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	4a0f      	ldr	r2, [pc, #60]	@ (8002464 <HAL_MspInit+0x4c>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800242c:	6453      	str	r3, [r2, #68]	@ 0x44
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <HAL_MspInit+0x4c>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <HAL_MspInit+0x4c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <HAL_MspInit+0x4c>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002448:	6413      	str	r3, [r2, #64]	@ 0x40
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_MspInit+0x4c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800

08002468 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	@ 0x28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <HAL_ADC_MspInit+0x7c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d127      	bne.n	80024da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <HAL_ADC_MspInit+0x80>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	4a15      	ldr	r2, [pc, #84]	@ (80024e8 <HAL_ADC_MspInit+0x80>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002498:	6453      	str	r3, [r2, #68]	@ 0x44
 800249a:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <HAL_ADC_MspInit+0x80>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <HAL_ADC_MspInit+0x80>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	4a0e      	ldr	r2, [pc, #56]	@ (80024e8 <HAL_ADC_MspInit+0x80>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b6:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <HAL_ADC_MspInit+0x80>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024c2:	2302      	movs	r3, #2
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c6:	2303      	movs	r3, #3
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	@ (80024ec <HAL_ADC_MspInit+0x84>)
 80024d6:	f000 fd5f 	bl	8002f98 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	@ 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40012000 	.word	0x40012000
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020000 	.word	0x40020000

080024f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	@ (8002574 <HAL_I2C_MspInit+0x84>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d12b      	bne.n	800256a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b18      	ldr	r3, [pc, #96]	@ (8002578 <HAL_I2C_MspInit+0x88>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a17      	ldr	r2, [pc, #92]	@ (8002578 <HAL_I2C_MspInit+0x88>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <HAL_I2C_MspInit+0x88>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800252e:	23c0      	movs	r3, #192	@ 0xc0
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002532:	2312      	movs	r3, #18
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800253e:	2304      	movs	r3, #4
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	480c      	ldr	r0, [pc, #48]	@ (800257c <HAL_I2C_MspInit+0x8c>)
 800254a:	f000 fd25 	bl	8002f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_I2C_MspInit+0x88>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <HAL_I2C_MspInit+0x88>)
 8002558:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800255c:	6413      	str	r3, [r2, #64]	@ 0x40
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_I2C_MspInit+0x88>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800256a:	bf00      	nop
 800256c:	3728      	adds	r7, #40	@ 0x28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40005400 	.word	0x40005400
 8002578:	40023800 	.word	0x40023800
 800257c:	40020400 	.word	0x40020400

08002580 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <HAL_TIM_Encoder_MspInit+0x94>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d133      	bne.n	800260a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <HAL_TIM_Encoder_MspInit+0x98>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_TIM_Encoder_MspInit+0x98>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_TIM_Encoder_MspInit+0x98>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_TIM_Encoder_MspInit+0x98>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a14      	ldr	r2, [pc, #80]	@ (8002618 <HAL_TIM_Encoder_MspInit+0x98>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b12      	ldr	r3, [pc, #72]	@ (8002618 <HAL_TIM_Encoder_MspInit+0x98>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025da:	23c0      	movs	r3, #192	@ 0xc0
 80025dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025ea:	2302      	movs	r3, #2
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4619      	mov	r1, r3
 80025f4:	4809      	ldr	r0, [pc, #36]	@ (800261c <HAL_TIM_Encoder_MspInit+0x9c>)
 80025f6:	f000 fccf 	bl	8002f98 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	201d      	movs	r0, #29
 8002600:	f000 fc93 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002604:	201d      	movs	r0, #29
 8002606:	f000 fcac 	bl	8002f62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800260a:	bf00      	nop
 800260c:	3728      	adds	r7, #40	@ 0x28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40000400 	.word	0x40000400
 8002618:	40023800 	.word	0x40023800
 800261c:	40020000 	.word	0x40020000

08002620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <NMI_Handler+0x4>

08002628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <HardFault_Handler+0x4>

08002630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <MemManage_Handler+0x4>

08002638 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <BusFault_Handler+0x4>

08002640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <UsageFault_Handler+0x4>

08002648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002676:	f000 f8d7 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}

0800267e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_SW_Pin);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 fe40 	bl	8003308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}

0800268c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <TIM3_IRQHandler+0x10>)
 8002692:	f002 fb45 	bl	8004d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000013c 	.word	0x2000013c

080026a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a8:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b4:	4b13      	ldr	r3, [pc, #76]	@ (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d0:	f002 fd9a 	bl	8005208 <__errno>
 80026d4:	4603      	mov	r3, r0
 80026d6:	220c      	movs	r2, #12
 80026d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e009      	b.n	80026f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20010000 	.word	0x20010000
 8002700:	00000400 	.word	0x00000400
 8002704:	200001c8 	.word	0x200001c8
 8002708:	20000318 	.word	0x20000318

0800270c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <SystemInit+0x20>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	4a05      	ldr	r2, [pc, #20]	@ (800272c <SystemInit+0x20>)
 8002718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002768 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002734:	f7ff ffea 	bl	800270c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002738:	480c      	ldr	r0, [pc, #48]	@ (800276c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800273a:	490d      	ldr	r1, [pc, #52]	@ (8002770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800273c:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002740:	e002      	b.n	8002748 <LoopCopyDataInit>

08002742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002746:	3304      	adds	r3, #4

08002748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800274c:	d3f9      	bcc.n	8002742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274e:	4a0a      	ldr	r2, [pc, #40]	@ (8002778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002750:	4c0a      	ldr	r4, [pc, #40]	@ (800277c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002754:	e001      	b.n	800275a <LoopFillZerobss>

08002756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002758:	3204      	adds	r2, #4

0800275a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800275c:	d3fb      	bcc.n	8002756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275e:	f002 fd59 	bl	8005214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002762:	f7fe fca9 	bl	80010b8 <main>
  bx  lr    
 8002766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002768:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002774:	08005bec 	.word	0x08005bec
  ldr r2, =_sbss
 8002778:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800277c:	20000318 	.word	0x20000318

08002780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC_IRQHandler>
	...

08002784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002788:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <HAL_Init+0x40>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <HAL_Init+0x40>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800279e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <HAL_Init+0x40>)
 80027a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 fbb1 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b2:	200f      	movs	r0, #15
 80027b4:	f000 f808 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7ff fe2e 	bl	8002418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fbc9 	bl	8002f7e <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f000 fb91 	bl	8002f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	@ (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000024 	.word	0x20000024
 8002820:	2000002c 	.word	0x2000002c
 8002824:	20000028 	.word	0x20000028

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000002c 	.word	0x2000002c
 800284c:	200001cc 	.word	0x200001cc

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200001cc 	.word	0x200001cc

08002868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d005      	beq.n	800288e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <HAL_Delay+0x44>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288e:	bf00      	nop
 8002890:	f7ff ffde 	bl	8002850 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8f7      	bhi.n	8002890 <HAL_Delay+0x28>
  {
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000002c 	.word	0x2000002c

080028b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e033      	b.n	800292e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fdca 	bl	8002468 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d118      	bne.n	8002920 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028f6:	f023 0302 	bic.w	r3, r3, #2
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f93a 	bl	8002b7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	@ 0x40
 800291e:	e001      	b.n	8002924 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1c>
 8002950:	2302      	movs	r3, #2
 8002952:	e105      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x228>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b09      	cmp	r3, #9
 8002962:	d925      	bls.n	80029b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	3b1e      	subs	r3, #30
 800297a:	2207      	movs	r2, #7
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43da      	mvns	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	400a      	ands	r2, r1
 8002988:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	4603      	mov	r3, r0
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4403      	add	r3, r0
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	409a      	lsls	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	e022      	b.n	80029f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6919      	ldr	r1, [r3, #16]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	2207      	movs	r2, #7
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6919      	ldr	r1, [r3, #16]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4618      	mov	r0, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4403      	add	r3, r0
 80029ec:	409a      	lsls	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d824      	bhi.n	8002a48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b05      	subs	r3, #5
 8002a10:	221f      	movs	r2, #31
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	3b05      	subs	r3, #5
 8002a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a46:	e04c      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b0c      	cmp	r3, #12
 8002a4e:	d824      	bhi.n	8002a9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b23      	subs	r3, #35	@ 0x23
 8002a62:	221f      	movs	r2, #31
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	400a      	ands	r2, r1
 8002a70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b23      	subs	r3, #35	@ 0x23
 8002a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a98:	e023      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b41      	subs	r3, #65	@ 0x41
 8002aac:	221f      	movs	r2, #31
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	400a      	ands	r2, r1
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b41      	subs	r3, #65	@ 0x41
 8002ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_ADC_ConfigChannel+0x234>)
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <HAL_ADC_ConfigChannel+0x238>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d109      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1cc>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	@ (8002b70 <HAL_ADC_ConfigChannel+0x238>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d123      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d003      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x1e6>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b11      	cmp	r3, #17
 8002b1c:	d11b      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b10      	cmp	r3, #16
 8002b30:	d111      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_ADC_ConfigChannel+0x23c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a10      	ldr	r2, [pc, #64]	@ (8002b78 <HAL_ADC_ConfigChannel+0x240>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	0c9a      	lsrs	r2, r3, #18
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b48:	e002      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f9      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40012300 	.word	0x40012300
 8002b70:	40012000 	.word	0x40012000
 8002b74:	20000024 	.word	0x20000024
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b84:	4b79      	ldr	r3, [pc, #484]	@ (8002d6c <ADC_Init+0x1f0>)
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	4a58      	ldr	r2, [pc, #352]	@ (8002d70 <ADC_Init+0x1f4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	e00f      	b.n	8002c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0202 	bic.w	r2, r2, #2
 8002c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7e1b      	ldrb	r3, [r3, #24]
 8002c94:	005a      	lsls	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	035a      	lsls	r2, r3, #13
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e007      	b.n	8002cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	051a      	lsls	r2, r3, #20
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d32:	025a      	lsls	r2, r3, #9
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	029a      	lsls	r2, r3, #10
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	0f000001 	.word	0x0f000001

08002d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d84:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d90:	4013      	ands	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da6:	4a04      	ldr	r2, [pc, #16]	@ (8002db8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	60d3      	str	r3, [r2, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 0307 	and.w	r3, r3, #7
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0b      	blt.n	8002e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4907      	ldr	r1, [pc, #28]	@ (8002e10 <__NVIC_EnableIRQ+0x38>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	@ (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	@ (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	@ 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
         );
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	@ 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ee0:	d301      	bcc.n	8002ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <SysTick_Config+0x40>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eee:	210f      	movs	r1, #15
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f7ff ff8e 	bl	8002e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <SysTick_Config+0x40>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <SysTick_Config+0x40>)
 8002f00:	2207      	movs	r2, #7
 8002f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	e000e010 	.word	0xe000e010

08002f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff29 	bl	8002d74 <__NVIC_SetPriorityGrouping>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3c:	f7ff ff3e 	bl	8002dbc <__NVIC_GetPriorityGrouping>
 8002f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f7ff ff8e 	bl	8002e68 <NVIC_EncodePriority>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff5d 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff31 	bl	8002dd8 <__NVIC_EnableIRQ>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff ffa2 	bl	8002ed0 <SysTick_Config>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	@ 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	e159      	b.n	8003268 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	f040 8148 	bne.w	8003262 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d005      	beq.n	8002fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d130      	bne.n	800304c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003020:	2201      	movs	r2, #1
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 0201 	and.w	r2, r3, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b03      	cmp	r3, #3
 8003056:	d017      	beq.n	8003088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d123      	bne.n	80030dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	08da      	lsrs	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3208      	adds	r2, #8
 800309c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	220f      	movs	r2, #15
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	08da      	lsrs	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3208      	adds	r2, #8
 80030d6:	69b9      	ldr	r1, [r7, #24]
 80030d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	2203      	movs	r2, #3
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0203 	and.w	r2, r3, #3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80a2 	beq.w	8003262 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b57      	ldr	r3, [pc, #348]	@ (8003280 <HAL_GPIO_Init+0x2e8>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	4a56      	ldr	r2, [pc, #344]	@ (8003280 <HAL_GPIO_Init+0x2e8>)
 8003128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800312c:	6453      	str	r3, [r2, #68]	@ 0x44
 800312e:	4b54      	ldr	r3, [pc, #336]	@ (8003280 <HAL_GPIO_Init+0x2e8>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800313a:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <HAL_GPIO_Init+0x2ec>)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	220f      	movs	r2, #15
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a49      	ldr	r2, [pc, #292]	@ (8003288 <HAL_GPIO_Init+0x2f0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d019      	beq.n	800319a <HAL_GPIO_Init+0x202>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a48      	ldr	r2, [pc, #288]	@ (800328c <HAL_GPIO_Init+0x2f4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0x1fe>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a47      	ldr	r2, [pc, #284]	@ (8003290 <HAL_GPIO_Init+0x2f8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00d      	beq.n	8003192 <HAL_GPIO_Init+0x1fa>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a46      	ldr	r2, [pc, #280]	@ (8003294 <HAL_GPIO_Init+0x2fc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <HAL_GPIO_Init+0x1f6>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a45      	ldr	r2, [pc, #276]	@ (8003298 <HAL_GPIO_Init+0x300>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_GPIO_Init+0x1f2>
 8003186:	2304      	movs	r3, #4
 8003188:	e008      	b.n	800319c <HAL_GPIO_Init+0x204>
 800318a:	2307      	movs	r3, #7
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x204>
 800318e:	2303      	movs	r3, #3
 8003190:	e004      	b.n	800319c <HAL_GPIO_Init+0x204>
 8003192:	2302      	movs	r3, #2
 8003194:	e002      	b.n	800319c <HAL_GPIO_Init+0x204>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_GPIO_Init+0x204>
 800319a:	2300      	movs	r3, #0
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f002 0203 	and.w	r2, r2, #3
 80031a2:	0092      	lsls	r2, r2, #2
 80031a4:	4093      	lsls	r3, r2
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ac:	4935      	ldr	r1, [pc, #212]	@ (8003284 <HAL_GPIO_Init+0x2ec>)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ba:	4b38      	ldr	r3, [pc, #224]	@ (800329c <HAL_GPIO_Init+0x304>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031de:	4a2f      	ldr	r2, [pc, #188]	@ (800329c <HAL_GPIO_Init+0x304>)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031e4:	4b2d      	ldr	r3, [pc, #180]	@ (800329c <HAL_GPIO_Init+0x304>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003208:	4a24      	ldr	r2, [pc, #144]	@ (800329c <HAL_GPIO_Init+0x304>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800320e:	4b23      	ldr	r3, [pc, #140]	@ (800329c <HAL_GPIO_Init+0x304>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003232:	4a1a      	ldr	r2, [pc, #104]	@ (800329c <HAL_GPIO_Init+0x304>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003238:	4b18      	ldr	r3, [pc, #96]	@ (800329c <HAL_GPIO_Init+0x304>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800325c:	4a0f      	ldr	r2, [pc, #60]	@ (800329c <HAL_GPIO_Init+0x304>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3301      	adds	r3, #1
 8003266:	61fb      	str	r3, [r7, #28]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b0f      	cmp	r3, #15
 800326c:	f67f aea2 	bls.w	8002fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3724      	adds	r7, #36	@ 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40013800 	.word	0x40013800
 8003288:	40020000 	.word	0x40020000
 800328c:	40020400 	.word	0x40020400
 8003290:	40020800 	.word	0x40020800
 8003294:	40020c00 	.word	0x40020c00
 8003298:	40021000 	.word	0x40021000
 800329c:	40013c00 	.word	0x40013c00

080032a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
 80032ac:	4613      	mov	r3, r2
 80032ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b0:	787b      	ldrb	r3, [r7, #1]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032bc:	e003      	b.n	80032c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	041a      	lsls	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	619a      	str	r2, [r3, #24]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032e4:	887a      	ldrh	r2, [r7, #2]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	041a      	lsls	r2, r3, #16
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43d9      	mvns	r1, r3
 80032f0:	887b      	ldrh	r3, [r7, #2]
 80032f2:	400b      	ands	r3, r1
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	619a      	str	r2, [r3, #24]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003312:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800331e:	4a05      	ldr	r2, [pc, #20]	@ (8003334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fe3c 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40013c00 	.word	0x40013c00

08003338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e12b      	b.n	80035a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff f8c6 	bl	80024f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	@ 0x24
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800338a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800339a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800339c:	f001 fb58 	bl	8004a50 <HAL_RCC_GetPCLK1Freq>
 80033a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a81      	ldr	r2, [pc, #516]	@ (80035ac <HAL_I2C_Init+0x274>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d807      	bhi.n	80033bc <HAL_I2C_Init+0x84>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a80      	ldr	r2, [pc, #512]	@ (80035b0 <HAL_I2C_Init+0x278>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	bf94      	ite	ls
 80033b4:	2301      	movls	r3, #1
 80033b6:	2300      	movhi	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e006      	b.n	80033ca <HAL_I2C_Init+0x92>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a7d      	ldr	r2, [pc, #500]	@ (80035b4 <HAL_I2C_Init+0x27c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bf94      	ite	ls
 80033c4:	2301      	movls	r3, #1
 80033c6:	2300      	movhi	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0e7      	b.n	80035a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a78      	ldr	r2, [pc, #480]	@ (80035b8 <HAL_I2C_Init+0x280>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	0c9b      	lsrs	r3, r3, #18
 80033dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a6a      	ldr	r2, [pc, #424]	@ (80035ac <HAL_I2C_Init+0x274>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d802      	bhi.n	800340c <HAL_I2C_Init+0xd4>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3301      	adds	r3, #1
 800340a:	e009      	b.n	8003420 <HAL_I2C_Init+0xe8>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	4a69      	ldr	r2, [pc, #420]	@ (80035bc <HAL_I2C_Init+0x284>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	3301      	adds	r3, #1
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	430b      	orrs	r3, r1
 8003426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003432:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	495c      	ldr	r1, [pc, #368]	@ (80035ac <HAL_I2C_Init+0x274>)
 800343c:	428b      	cmp	r3, r1
 800343e:	d819      	bhi.n	8003474 <HAL_I2C_Init+0x13c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1e59      	subs	r1, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fbb1 f3f3 	udiv	r3, r1, r3
 800344e:	1c59      	adds	r1, r3, #1
 8003450:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003454:	400b      	ands	r3, r1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_I2C_Init+0x138>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e59      	subs	r1, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fbb1 f3f3 	udiv	r3, r1, r3
 8003468:	3301      	adds	r3, #1
 800346a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346e:	e051      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 8003470:	2304      	movs	r3, #4
 8003472:	e04f      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <HAL_I2C_Init+0x168>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e012      	b.n	80034c6 <HAL_I2C_Init+0x18e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1e58      	subs	r0, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	0099      	lsls	r1, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b6:	3301      	adds	r3, #1
 80034b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Init+0x196>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e022      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10e      	bne.n	80034f4 <HAL_I2C_Init+0x1bc>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e58      	subs	r0, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	440b      	add	r3, r1
 80034e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	e00f      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1e58      	subs	r0, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	0099      	lsls	r1, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	fbb0 f3f3 	udiv	r3, r0, r3
 800350a:	3301      	adds	r3, #1
 800350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003510:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	6809      	ldr	r1, [r1, #0]
 8003518:	4313      	orrs	r3, r2
 800351a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003542:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6911      	ldr	r1, [r2, #16]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	4311      	orrs	r1, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	000186a0 	.word	0x000186a0
 80035b0:	001e847f 	.word	0x001e847f
 80035b4:	003d08ff 	.word	0x003d08ff
 80035b8:	431bde83 	.word	0x431bde83
 80035bc:	10624dd3 	.word	0x10624dd3

080035c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	461a      	mov	r2, r3
 80035cc:	460b      	mov	r3, r1
 80035ce:	817b      	strh	r3, [r7, #10]
 80035d0:	4613      	mov	r3, r2
 80035d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff f93c 	bl	8002850 <HAL_GetTick>
 80035d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	f040 80e0 	bne.w	80037a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2319      	movs	r3, #25
 80035ee:	2201      	movs	r2, #1
 80035f0:	4970      	ldr	r1, [pc, #448]	@ (80037b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fc22 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
 8003600:	e0d3      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_I2C_Master_Transmit+0x50>
 800360c:	2302      	movs	r3, #2
 800360e:	e0cc      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d007      	beq.n	8003636 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003644:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2221      	movs	r2, #33	@ 0x21
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2210      	movs	r2, #16
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	893a      	ldrh	r2, [r7, #8]
 8003666:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a50      	ldr	r2, [pc, #320]	@ (80037b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003676:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003678:	8979      	ldrh	r1, [r7, #10]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	6a3a      	ldr	r2, [r7, #32]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fac4 	bl	8003c0c <I2C_MasterRequestWrite>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e08d      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036a4:	e066      	b.n	8003774 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fce0 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d107      	bne.n	80036ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e06b      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d11b      	bne.n	8003748 <HAL_I2C_Master_Transmit+0x188>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	d017      	beq.n	8003748 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	6a39      	ldr	r1, [r7, #32]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fcd7 	bl	8004100 <I2C_WaitOnBTFFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	2b04      	cmp	r3, #4
 800375e:	d107      	bne.n	8003770 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e01a      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d194      	bne.n	80036a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	00100002 	.word	0x00100002
 80037b8:	ffff0000 	.word	0xffff0000

080037bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	4608      	mov	r0, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	461a      	mov	r2, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	817b      	strh	r3, [r7, #10]
 80037ce:	460b      	mov	r3, r1
 80037d0:	813b      	strh	r3, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037d6:	f7ff f83b 	bl	8002850 <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	f040 80d9 	bne.w	800399c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2319      	movs	r3, #25
 80037f0:	2201      	movs	r2, #1
 80037f2:	496d      	ldr	r1, [pc, #436]	@ (80039a8 <HAL_I2C_Mem_Write+0x1ec>)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fb21 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
 8003802:	e0cc      	b.n	800399e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Mem_Write+0x56>
 800380e:	2302      	movs	r3, #2
 8003810:	e0c5      	b.n	800399e <HAL_I2C_Mem_Write+0x1e2>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d007      	beq.n	8003838 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003846:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2221      	movs	r2, #33	@ 0x21
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2240      	movs	r2, #64	@ 0x40
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a3a      	ldr	r2, [r7, #32]
 8003862:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003868:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a4d      	ldr	r2, [pc, #308]	@ (80039ac <HAL_I2C_Mem_Write+0x1f0>)
 8003878:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800387a:	88f8      	ldrh	r0, [r7, #6]
 800387c:	893a      	ldrh	r2, [r7, #8]
 800387e:	8979      	ldrh	r1, [r7, #10]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4603      	mov	r3, r0
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa40 	bl	8003d10 <I2C_RequestMemoryWrite>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d052      	beq.n	800393c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e081      	b.n	800399e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fbe6 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d107      	bne.n	80038c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06b      	b.n	800399e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b04      	cmp	r3, #4
 8003902:	d11b      	bne.n	800393c <HAL_I2C_Mem_Write+0x180>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d017      	beq.n	800393c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1aa      	bne.n	800389a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fbd9 	bl	8004100 <I2C_WaitOnBTFFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00d      	beq.n	8003970 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	2b04      	cmp	r3, #4
 800395a:	d107      	bne.n	800396c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e016      	b.n	800399e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	00100002 	.word	0x00100002
 80039ac:	ffff0000 	.word	0xffff0000

080039b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	460b      	mov	r3, r1
 80039be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7fe ff46 	bl	8002850 <HAL_GetTick>
 80039c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	f040 8111 	bne.w	8003bfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2319      	movs	r3, #25
 80039de:	2201      	movs	r2, #1
 80039e0:	4988      	ldr	r1, [pc, #544]	@ (8003c04 <HAL_I2C_IsDeviceReady+0x254>)
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fa2a 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
 80039f0:	e104      	b.n	8003bfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_I2C_IsDeviceReady+0x50>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0fd      	b.n	8003bfc <HAL_I2C_IsDeviceReady+0x24c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d007      	beq.n	8003a26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0201 	orr.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2224      	movs	r2, #36	@ 0x24
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a70      	ldr	r2, [pc, #448]	@ (8003c08 <HAL_I2C_IsDeviceReady+0x258>)
 8003a48:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f9e8 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a80:	d103      	bne.n	8003a8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a88:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0b6      	b.n	8003bfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fed7 	bl	8002850 <HAL_GetTick>
 8003aa2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ad2:	e025      	b.n	8003b20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ad4:	f7fe febc 	bl	8002850 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <HAL_I2C_IsDeviceReady+0x13a>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	22a0      	movs	r2, #160	@ 0xa0
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b2a:	d005      	beq.n	8003b38 <HAL_I2C_IsDeviceReady+0x188>
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <HAL_I2C_IsDeviceReady+0x188>
 8003b32:	7dbb      	ldrb	r3, [r7, #22]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0cd      	beq.n	8003ad4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d129      	bne.n	8003ba2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2319      	movs	r3, #25
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4921      	ldr	r1, [pc, #132]	@ (8003c04 <HAL_I2C_IsDeviceReady+0x254>)
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f95c 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e036      	b.n	8003bfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e02c      	b.n	8003bfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2319      	movs	r3, #25
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	490f      	ldr	r1, [pc, #60]	@ (8003c04 <HAL_I2C_IsDeviceReady+0x254>)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f938 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e012      	b.n	8003bfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	f4ff af32 	bcc.w	8003a4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	00100002 	.word	0x00100002
 8003c08:	ffff0000 	.word	0xffff0000

08003c0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d006      	beq.n	8003c36 <I2C_MasterRequestWrite+0x2a>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d003      	beq.n	8003c36 <I2C_MasterRequestWrite+0x2a>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c34:	d108      	bne.n	8003c48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e00b      	b.n	8003c60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	2b12      	cmp	r3, #18
 8003c4e:	d107      	bne.n	8003c60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8e5 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c86:	d103      	bne.n	8003c90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e035      	b.n	8003d00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c9c:	d108      	bne.n	8003cb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c9e:	897b      	ldrh	r3, [r7, #10]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	e01b      	b.n	8003ce8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cb0:	897b      	ldrh	r3, [r7, #10]
 8003cb2:	11db      	asrs	r3, r3, #7
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f003 0306 	and.w	r3, r3, #6
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f063 030f 	orn	r3, r3, #15
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	490e      	ldr	r1, [pc, #56]	@ (8003d08 <I2C_MasterRequestWrite+0xfc>)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f92e 	bl	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e010      	b.n	8003d00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cde:	897b      	ldrh	r3, [r7, #10]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4907      	ldr	r1, [pc, #28]	@ (8003d0c <I2C_MasterRequestWrite+0x100>)
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f91e 	bl	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	00010008 	.word	0x00010008
 8003d0c:	00010002 	.word	0x00010002

08003d10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4603      	mov	r3, r0
 8003d20:	817b      	strh	r3, [r7, #10]
 8003d22:	460b      	mov	r3, r1
 8003d24:	813b      	strh	r3, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f878 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d60:	d103      	bne.n	8003d6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e05f      	b.n	8003e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	492d      	ldr	r1, [pc, #180]	@ (8003e38 <I2C_RequestMemoryWrite+0x128>)
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f8d3 	bl	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e04c      	b.n	8003e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dac:	6a39      	ldr	r1, [r7, #32]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f95e 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d107      	bne.n	8003dd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e02b      	b.n	8003e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ddc:	893b      	ldrh	r3, [r7, #8]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]
 8003de6:	e021      	b.n	8003e2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003de8:	893b      	ldrh	r3, [r7, #8]
 8003dea:	0a1b      	lsrs	r3, r3, #8
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df8:	6a39      	ldr	r1, [r7, #32]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f938 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00d      	beq.n	8003e22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d107      	bne.n	8003e1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e005      	b.n	8003e2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e22:	893b      	ldrh	r3, [r7, #8]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	00010002 	.word	0x00010002

08003e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4c:	e048      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d044      	beq.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fe fcfb 	bl	8002850 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d139      	bne.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10d      	bne.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	e00c      	b.n	8003eac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d116      	bne.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e023      	b.n	8003f28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10d      	bne.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	e00c      	b.n	8003f20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d093      	beq.n	8003e4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f3e:	e071      	b.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d123      	bne.n	8003f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e067      	b.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d041      	beq.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa0:	f7fe fc56 	bl	8002850 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d302      	bcc.n	8003fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d136      	bne.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10c      	bne.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e00b      	b.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	43da      	mvns	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e021      	b.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	0c1b      	lsrs	r3, r3, #16
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	d10c      	bne.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	43da      	mvns	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e00b      	b.n	8004060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	43da      	mvns	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf14      	ite	ne
 800405a:	2301      	movne	r3, #1
 800405c:	2300      	moveq	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f af6d 	bne.w	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800407c:	e034      	b.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f886 	bl	8004190 <I2C_IsAcknowledgeFailed>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e034      	b.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d028      	beq.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fe fbdb 	bl	8002850 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d11d      	bne.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	2b80      	cmp	r3, #128	@ 0x80
 80040b8:	d016      	beq.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e007      	b.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	2b80      	cmp	r3, #128	@ 0x80
 80040f4:	d1c3      	bne.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410c:	e034      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f83e 	bl	8004190 <I2C_IsAcknowledgeFailed>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e034      	b.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d028      	beq.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fe fb93 	bl	8002850 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11d      	bne.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b04      	cmp	r3, #4
 8004148:	d016      	beq.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e007      	b.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d1c3      	bne.n	800410e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a6:	d11b      	bne.n	80041e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	f043 0204 	orr.w	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e267      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d075      	beq.n	80042fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800420e:	4b88      	ldr	r3, [pc, #544]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b04      	cmp	r3, #4
 8004218:	d00c      	beq.n	8004234 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421a:	4b85      	ldr	r3, [pc, #532]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004222:	2b08      	cmp	r3, #8
 8004224:	d112      	bne.n	800424c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004226:	4b82      	ldr	r3, [pc, #520]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800422e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004232:	d10b      	bne.n	800424c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004234:	4b7e      	ldr	r3, [pc, #504]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d05b      	beq.n	80042f8 <HAL_RCC_OscConfig+0x108>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d157      	bne.n	80042f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e242      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004254:	d106      	bne.n	8004264 <HAL_RCC_OscConfig+0x74>
 8004256:	4b76      	ldr	r3, [pc, #472]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a75      	ldr	r2, [pc, #468]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e01d      	b.n	80042a0 <HAL_RCC_OscConfig+0xb0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x98>
 800426e:	4b70      	ldr	r3, [pc, #448]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a6f      	ldr	r2, [pc, #444]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b6d      	ldr	r3, [pc, #436]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6c      	ldr	r2, [pc, #432]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0xb0>
 8004288:	4b69      	ldr	r3, [pc, #420]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a68      	ldr	r2, [pc, #416]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800428e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	4b66      	ldr	r3, [pc, #408]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a65      	ldr	r2, [pc, #404]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800429a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800429e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fe fad2 	bl	8002850 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b0:	f7fe face 	bl	8002850 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	@ 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e207      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0xc0>
 80042ce:	e014      	b.n	80042fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fe fabe 	bl	8002850 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d8:	f7fe faba 	bl	8002850 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	@ 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e1f3      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	4b51      	ldr	r3, [pc, #324]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0xe8>
 80042f6:	e000      	b.n	80042fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d063      	beq.n	80043ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004306:	4b4a      	ldr	r3, [pc, #296]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004312:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800431a:	2b08      	cmp	r3, #8
 800431c:	d11c      	bne.n	8004358 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b44      	ldr	r3, [pc, #272]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d116      	bne.n	8004358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	4b41      	ldr	r3, [pc, #260]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_RCC_OscConfig+0x152>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d001      	beq.n	8004342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e1c7      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4b3b      	ldr	r3, [pc, #236]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4937      	ldr	r1, [pc, #220]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	e03a      	b.n	80043ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004360:	4b34      	ldr	r3, [pc, #208]	@ (8004434 <HAL_RCC_OscConfig+0x244>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fe fa73 	bl	8002850 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436e:	f7fe fa6f 	bl	8002850 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e1a8      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004380:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b28      	ldr	r3, [pc, #160]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4925      	ldr	r1, [pc, #148]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
 80043a0:	e015      	b.n	80043ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043a2:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <HAL_RCC_OscConfig+0x244>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fe fa52 	bl	8002850 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b0:	f7fe fa4e 	bl	8002850 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e187      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d036      	beq.n	8004448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d016      	beq.n	8004410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e2:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <HAL_RCC_OscConfig+0x248>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fe fa32 	bl	8002850 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fe fa2e 	bl	8002850 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e167      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_RCC_OscConfig+0x240>)
 8004404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x200>
 800440e:	e01b      	b.n	8004448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004410:	4b09      	ldr	r3, [pc, #36]	@ (8004438 <HAL_RCC_OscConfig+0x248>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004416:	f7fe fa1b 	bl	8002850 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441c:	e00e      	b.n	800443c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441e:	f7fe fa17 	bl	8002850 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d907      	bls.n	800443c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e150      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
 8004430:	40023800 	.word	0x40023800
 8004434:	42470000 	.word	0x42470000
 8004438:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443c:	4b88      	ldr	r3, [pc, #544]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800443e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ea      	bne.n	800441e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8097 	beq.w	8004584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4b81      	ldr	r3, [pc, #516]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10f      	bne.n	8004486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	4b7d      	ldr	r3, [pc, #500]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	4a7c      	ldr	r2, [pc, #496]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	@ 0x40
 8004476:	4b7a      	ldr	r3, [pc, #488]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	4b77      	ldr	r3, [pc, #476]	@ (8004664 <HAL_RCC_OscConfig+0x474>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d118      	bne.n	80044c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004492:	4b74      	ldr	r3, [pc, #464]	@ (8004664 <HAL_RCC_OscConfig+0x474>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a73      	ldr	r2, [pc, #460]	@ (8004664 <HAL_RCC_OscConfig+0x474>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449e:	f7fe f9d7 	bl	8002850 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a6:	f7fe f9d3 	bl	8002850 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e10c      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004664 <HAL_RCC_OscConfig+0x474>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x2ea>
 80044cc:	4b64      	ldr	r3, [pc, #400]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d0:	4a63      	ldr	r2, [pc, #396]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d8:	e01c      	b.n	8004514 <HAL_RCC_OscConfig+0x324>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x30c>
 80044e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0x324>
 80044fc:	4b58      	ldr	r3, [pc, #352]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004500:	4a57      	ldr	r2, [pc, #348]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	6713      	str	r3, [r2, #112]	@ 0x70
 8004508:	4b55      	ldr	r3, [pc, #340]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450c:	4a54      	ldr	r2, [pc, #336]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800450e:	f023 0304 	bic.w	r3, r3, #4
 8004512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d015      	beq.n	8004548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fe f998 	bl	8002850 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	e00a      	b.n	800453a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fe f994 	bl	8002850 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0cb      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453a:	4b49      	ldr	r3, [pc, #292]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0ee      	beq.n	8004524 <HAL_RCC_OscConfig+0x334>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004548:	f7fe f982 	bl	8002850 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454e:	e00a      	b.n	8004566 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fe f97e 	bl	8002850 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0b5      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004566:	4b3e      	ldr	r3, [pc, #248]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ee      	bne.n	8004550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004578:	4b39      	ldr	r3, [pc, #228]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	4a38      	ldr	r2, [pc, #224]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800457e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a1 	beq.w	80046d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800458e:	4b34      	ldr	r3, [pc, #208]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b08      	cmp	r3, #8
 8004598:	d05c      	beq.n	8004654 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d141      	bne.n	8004626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a2:	4b31      	ldr	r3, [pc, #196]	@ (8004668 <HAL_RCC_OscConfig+0x478>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fe f952 	bl	8002850 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fe f94e 	bl	8002850 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e087      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	4b27      	ldr	r3, [pc, #156]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	019b      	lsls	r3, r3, #6
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	3b01      	subs	r3, #1
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	491b      	ldr	r1, [pc, #108]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004668 <HAL_RCC_OscConfig+0x478>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fe f927 	bl	8002850 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004606:	f7fe f923 	bl	8002850 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e05c      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004618:	4b11      	ldr	r3, [pc, #68]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x416>
 8004624:	e054      	b.n	80046d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <HAL_RCC_OscConfig+0x478>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe f910 	bl	8002850 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe f90c 	bl	8002850 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e045      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <HAL_RCC_OscConfig+0x470>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x444>
 8004652:	e03d      	b.n	80046d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e038      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
 8004660:	40023800 	.word	0x40023800
 8004664:	40007000 	.word	0x40007000
 8004668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800466c:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <HAL_RCC_OscConfig+0x4ec>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d028      	beq.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d121      	bne.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d11a      	bne.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d111      	bne.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	3b01      	subs	r3, #1
 80046b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0cc      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f4:	4b68      	ldr	r3, [pc, #416]	@ (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d90c      	bls.n	800471c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b65      	ldr	r3, [pc, #404]	@ (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b63      	ldr	r3, [pc, #396]	@ (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0b8      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d020      	beq.n	800476a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004734:	4b59      	ldr	r3, [pc, #356]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a58      	ldr	r2, [pc, #352]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800473e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800474c:	4b53      	ldr	r3, [pc, #332]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	4a52      	ldr	r2, [pc, #328]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004758:	4b50      	ldr	r3, [pc, #320]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	494d      	ldr	r1, [pc, #308]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d044      	beq.n	8004800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d107      	bne.n	800478e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	4b47      	ldr	r3, [pc, #284]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d119      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e07f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d003      	beq.n	800479e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479a:	2b03      	cmp	r3, #3
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	4b3f      	ldr	r3, [pc, #252]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e06f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ae:	4b3b      	ldr	r3, [pc, #236]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e067      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047be:	4b37      	ldr	r3, [pc, #220]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4934      	ldr	r1, [pc, #208]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d0:	f7fe f83e 	bl	8002850 <HAL_GetTick>
 80047d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d8:	f7fe f83a 	bl	8002850 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e04f      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	4b2b      	ldr	r3, [pc, #172]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 020c 	and.w	r2, r3, #12
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d1eb      	bne.n	80047d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004800:	4b25      	ldr	r3, [pc, #148]	@ (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d20c      	bcs.n	8004828 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b22      	ldr	r3, [pc, #136]	@ (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004816:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <HAL_RCC_ClockConfig+0x1b8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e032      	b.n	800488e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004834:	4b19      	ldr	r3, [pc, #100]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4916      	ldr	r1, [pc, #88]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	4313      	orrs	r3, r2
 8004844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004852:	4b12      	ldr	r3, [pc, #72]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	490e      	ldr	r1, [pc, #56]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004866:	f000 f821 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 800486a:	4602      	mov	r2, r0
 800486c:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	490a      	ldr	r1, [pc, #40]	@ (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	5ccb      	ldrb	r3, [r1, r3]
 800487a:	fa22 f303 	lsr.w	r3, r2, r3
 800487e:	4a09      	ldr	r2, [pc, #36]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004882:	4b09      	ldr	r3, [pc, #36]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd ff9e 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40023c00 	.word	0x40023c00
 800489c:	40023800 	.word	0x40023800
 80048a0:	08005b90 	.word	0x08005b90
 80048a4:	20000024 	.word	0x20000024
 80048a8:	20000028 	.word	0x20000028

080048ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b090      	sub	sp, #64	@ 0x40
 80048b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c4:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d00d      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x40>
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	f200 80a1 	bhi.w	8004a18 <HAL_RCC_GetSysClockFreq+0x16c>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x34>
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d003      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048de:	e09b      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4b53      	ldr	r3, [pc, #332]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x184>)
 80048e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048e4:	e09b      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e6:	4b53      	ldr	r3, [pc, #332]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x188>)
 80048e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048ea:	e098      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048ec:	4b4f      	ldr	r3, [pc, #316]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f6:	4b4d      	ldr	r3, [pc, #308]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d028      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004902:	4b4a      	ldr	r3, [pc, #296]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	2200      	movs	r2, #0
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	627a      	str	r2, [r7, #36]	@ 0x24
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004914:	2100      	movs	r1, #0
 8004916:	4b47      	ldr	r3, [pc, #284]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004918:	fb03 f201 	mul.w	r2, r3, r1
 800491c:	2300      	movs	r3, #0
 800491e:	fb00 f303 	mul.w	r3, r0, r3
 8004922:	4413      	add	r3, r2
 8004924:	4a43      	ldr	r2, [pc, #268]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8004926:	fba0 1202 	umull	r1, r2, r0, r2
 800492a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800492c:	460a      	mov	r2, r1
 800492e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004932:	4413      	add	r3, r2
 8004934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004938:	2200      	movs	r2, #0
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	61fa      	str	r2, [r7, #28]
 800493e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004946:	f7fc f899 	bl	8000a7c <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4613      	mov	r3, r2
 8004950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004952:	e053      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004954:	4b35      	ldr	r3, [pc, #212]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	2200      	movs	r2, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	617a      	str	r2, [r7, #20]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004966:	f04f 0b00 	mov.w	fp, #0
 800496a:	4652      	mov	r2, sl
 800496c:	465b      	mov	r3, fp
 800496e:	f04f 0000 	mov.w	r0, #0
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	0159      	lsls	r1, r3, #5
 8004978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800497c:	0150      	lsls	r0, r2, #5
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	ebb2 080a 	subs.w	r8, r2, sl
 8004986:	eb63 090b 	sbc.w	r9, r3, fp
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004996:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800499a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800499e:	ebb2 0408 	subs.w	r4, r2, r8
 80049a2:	eb63 0509 	sbc.w	r5, r3, r9
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	00eb      	lsls	r3, r5, #3
 80049b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b4:	00e2      	lsls	r2, r4, #3
 80049b6:	4614      	mov	r4, r2
 80049b8:	461d      	mov	r5, r3
 80049ba:	eb14 030a 	adds.w	r3, r4, sl
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	eb45 030b 	adc.w	r3, r5, fp
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049d2:	4629      	mov	r1, r5
 80049d4:	028b      	lsls	r3, r1, #10
 80049d6:	4621      	mov	r1, r4
 80049d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049dc:	4621      	mov	r1, r4
 80049de:	028a      	lsls	r2, r1, #10
 80049e0:	4610      	mov	r0, r2
 80049e2:	4619      	mov	r1, r3
 80049e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e6:	2200      	movs	r2, #0
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	60fa      	str	r2, [r7, #12]
 80049ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f0:	f7fc f844 	bl	8000a7c <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4613      	mov	r3, r2
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	3301      	adds	r3, #1
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3740      	adds	r7, #64	@ 0x40
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	00f42400 	.word	0x00f42400
 8004a34:	017d7840 	.word	0x017d7840

08004a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000024 	.word	0x20000024

08004a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a54:	f7ff fff0 	bl	8004a38 <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4903      	ldr	r1, [pc, #12]	@ (8004a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	08005ba0 	.word	0x08005ba0

08004a78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e097      	b.n	8004bbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fd fd6d 	bl	8002580 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004abc:	f023 0307 	bic.w	r3, r3, #7
 8004ac0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f000 fa3f 	bl	8004f50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b18:	f023 030c 	bic.w	r3, r3, #12
 8004b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	4313      	orrs	r3, r2
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	011a      	lsls	r2, r3, #4
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	031b      	lsls	r3, r3, #12
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004be4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004bec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d110      	bne.n	8004c16 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d102      	bne.n	8004c00 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bfa:	7b7b      	ldrb	r3, [r7, #13]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d001      	beq.n	8004c04 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e089      	b.n	8004d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c14:	e031      	b.n	8004c7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d110      	bne.n	8004c3e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c1c:	7bbb      	ldrb	r3, [r7, #14]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d102      	bne.n	8004c28 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c22:	7b3b      	ldrb	r3, [r7, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d001      	beq.n	8004c2c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e075      	b.n	8004d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c3c:	e01d      	b.n	8004c7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d108      	bne.n	8004c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c44:	7bbb      	ldrb	r3, [r7, #14]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4a:	7b7b      	ldrb	r3, [r7, #13]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d102      	bne.n	8004c56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c50:	7b3b      	ldrb	r3, [r7, #12]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d001      	beq.n	8004c5a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e05e      	b.n	8004d18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d010      	beq.n	8004ca8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004c86:	e01f      	b.n	8004cc8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f9e9 	bl	8005068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0202 	orr.w	r2, r2, #2
 8004ca4:	60da      	str	r2, [r3, #12]
      break;
 8004ca6:	e02e      	b.n	8004d06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2201      	movs	r2, #1
 8004cae:	2104      	movs	r1, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f9d9 	bl	8005068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0204 	orr.w	r2, r2, #4
 8004cc4:	60da      	str	r2, [r3, #12]
      break;
 8004cc6:	e01e      	b.n	8004d06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	2100      	movs	r1, #0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f9c9 	bl	8005068 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2104      	movs	r1, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f9c2 	bl	8005068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0202 	orr.w	r2, r2, #2
 8004cf2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0204 	orr.w	r2, r2, #4
 8004d02:	60da      	str	r2, [r3, #12]
      break;
 8004d04:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d020      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01b      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0202 	mvn.w	r2, #2
 8004d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc f992 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8ce 	bl	8004f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f8d5 	bl	8004f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d020      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01b      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0204 	mvn.w	r2, #4
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc f96c 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8a8 	bl	8004f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8af 	bl	8004f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d020      	beq.n	8004e1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01b      	beq.n	8004e1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0208 	mvn.w	r2, #8
 8004dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2204      	movs	r2, #4
 8004df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc f946 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f882 	bl	8004f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f889 	bl	8004f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d020      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0210 	mvn.w	r2, #16
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fc f920 	bl	8001094 <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f85c 	bl	8004f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f863 	bl	8004f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0201 	mvn.w	r2, #1
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f83a 	bl	8004f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f97a 	bl	80051a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f834 	bl	8004f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0220 	mvn.w	r2, #32
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f94c 	bl	8005190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a3a      	ldr	r2, [pc, #232]	@ (800504c <TIM_Base_SetConfig+0xfc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00f      	beq.n	8004f88 <TIM_Base_SetConfig+0x38>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6e:	d00b      	beq.n	8004f88 <TIM_Base_SetConfig+0x38>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a37      	ldr	r2, [pc, #220]	@ (8005050 <TIM_Base_SetConfig+0x100>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_Base_SetConfig+0x38>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a36      	ldr	r2, [pc, #216]	@ (8005054 <TIM_Base_SetConfig+0x104>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0x38>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a35      	ldr	r2, [pc, #212]	@ (8005058 <TIM_Base_SetConfig+0x108>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d108      	bne.n	8004f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800504c <TIM_Base_SetConfig+0xfc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01b      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa8:	d017      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a28      	ldr	r2, [pc, #160]	@ (8005050 <TIM_Base_SetConfig+0x100>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a27      	ldr	r2, [pc, #156]	@ (8005054 <TIM_Base_SetConfig+0x104>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00f      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a26      	ldr	r2, [pc, #152]	@ (8005058 <TIM_Base_SetConfig+0x108>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00b      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a25      	ldr	r2, [pc, #148]	@ (800505c <TIM_Base_SetConfig+0x10c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a24      	ldr	r2, [pc, #144]	@ (8005060 <TIM_Base_SetConfig+0x110>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_Base_SetConfig+0x8a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a23      	ldr	r2, [pc, #140]	@ (8005064 <TIM_Base_SetConfig+0x114>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d108      	bne.n	8004fec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a0e      	ldr	r2, [pc, #56]	@ (800504c <TIM_Base_SetConfig+0xfc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d103      	bne.n	8005020 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d105      	bne.n	800503e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]
  }
}
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800

08005068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2201      	movs	r2, #1
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1a      	ldr	r2, [r3, #32]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	43db      	mvns	r3, r3
 800508a:	401a      	ands	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1a      	ldr	r2, [r3, #32]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e050      	b.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005118:	d013      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a16      	ldr	r2, [pc, #88]	@ (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a15      	ldr	r2, [pc, #84]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a13      	ldr	r2, [pc, #76]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10c      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4313      	orrs	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40014000 	.word	0x40014000

08005190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <siprintf>:
 80051b8:	b40e      	push	{r1, r2, r3}
 80051ba:	b500      	push	{lr}
 80051bc:	b09c      	sub	sp, #112	@ 0x70
 80051be:	ab1d      	add	r3, sp, #116	@ 0x74
 80051c0:	9002      	str	r0, [sp, #8]
 80051c2:	9006      	str	r0, [sp, #24]
 80051c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80051c8:	4809      	ldr	r0, [pc, #36]	@ (80051f0 <siprintf+0x38>)
 80051ca:	9107      	str	r1, [sp, #28]
 80051cc:	9104      	str	r1, [sp, #16]
 80051ce:	4909      	ldr	r1, [pc, #36]	@ (80051f4 <siprintf+0x3c>)
 80051d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d4:	9105      	str	r1, [sp, #20]
 80051d6:	6800      	ldr	r0, [r0, #0]
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	a902      	add	r1, sp, #8
 80051dc:	f000 f994 	bl	8005508 <_svfiprintf_r>
 80051e0:	9b02      	ldr	r3, [sp, #8]
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	b01c      	add	sp, #112	@ 0x70
 80051e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051ec:	b003      	add	sp, #12
 80051ee:	4770      	bx	lr
 80051f0:	20000030 	.word	0x20000030
 80051f4:	ffff0208 	.word	0xffff0208

080051f8 <memset>:
 80051f8:	4402      	add	r2, r0
 80051fa:	4603      	mov	r3, r0
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d100      	bne.n	8005202 <memset+0xa>
 8005200:	4770      	bx	lr
 8005202:	f803 1b01 	strb.w	r1, [r3], #1
 8005206:	e7f9      	b.n	80051fc <memset+0x4>

08005208 <__errno>:
 8005208:	4b01      	ldr	r3, [pc, #4]	@ (8005210 <__errno+0x8>)
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000030 	.word	0x20000030

08005214 <__libc_init_array>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	4d0d      	ldr	r5, [pc, #52]	@ (800524c <__libc_init_array+0x38>)
 8005218:	4c0d      	ldr	r4, [pc, #52]	@ (8005250 <__libc_init_array+0x3c>)
 800521a:	1b64      	subs	r4, r4, r5
 800521c:	10a4      	asrs	r4, r4, #2
 800521e:	2600      	movs	r6, #0
 8005220:	42a6      	cmp	r6, r4
 8005222:	d109      	bne.n	8005238 <__libc_init_array+0x24>
 8005224:	4d0b      	ldr	r5, [pc, #44]	@ (8005254 <__libc_init_array+0x40>)
 8005226:	4c0c      	ldr	r4, [pc, #48]	@ (8005258 <__libc_init_array+0x44>)
 8005228:	f000 fc66 	bl	8005af8 <_init>
 800522c:	1b64      	subs	r4, r4, r5
 800522e:	10a4      	asrs	r4, r4, #2
 8005230:	2600      	movs	r6, #0
 8005232:	42a6      	cmp	r6, r4
 8005234:	d105      	bne.n	8005242 <__libc_init_array+0x2e>
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	f855 3b04 	ldr.w	r3, [r5], #4
 800523c:	4798      	blx	r3
 800523e:	3601      	adds	r6, #1
 8005240:	e7ee      	b.n	8005220 <__libc_init_array+0xc>
 8005242:	f855 3b04 	ldr.w	r3, [r5], #4
 8005246:	4798      	blx	r3
 8005248:	3601      	adds	r6, #1
 800524a:	e7f2      	b.n	8005232 <__libc_init_array+0x1e>
 800524c:	08005be4 	.word	0x08005be4
 8005250:	08005be4 	.word	0x08005be4
 8005254:	08005be4 	.word	0x08005be4
 8005258:	08005be8 	.word	0x08005be8

0800525c <__retarget_lock_acquire_recursive>:
 800525c:	4770      	bx	lr

0800525e <__retarget_lock_release_recursive>:
 800525e:	4770      	bx	lr

08005260 <_free_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4605      	mov	r5, r0
 8005264:	2900      	cmp	r1, #0
 8005266:	d041      	beq.n	80052ec <_free_r+0x8c>
 8005268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526c:	1f0c      	subs	r4, r1, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfb8      	it	lt
 8005272:	18e4      	addlt	r4, r4, r3
 8005274:	f000 f8e0 	bl	8005438 <__malloc_lock>
 8005278:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <_free_r+0x90>)
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	b933      	cbnz	r3, 800528c <_free_r+0x2c>
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	6014      	str	r4, [r2, #0]
 8005282:	4628      	mov	r0, r5
 8005284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005288:	f000 b8dc 	b.w	8005444 <__malloc_unlock>
 800528c:	42a3      	cmp	r3, r4
 800528e:	d908      	bls.n	80052a2 <_free_r+0x42>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	1821      	adds	r1, r4, r0
 8005294:	428b      	cmp	r3, r1
 8005296:	bf01      	itttt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	1809      	addeq	r1, r1, r0
 800529e:	6021      	streq	r1, [r4, #0]
 80052a0:	e7ed      	b.n	800527e <_free_r+0x1e>
 80052a2:	461a      	mov	r2, r3
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	b10b      	cbz	r3, 80052ac <_free_r+0x4c>
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	d9fa      	bls.n	80052a2 <_free_r+0x42>
 80052ac:	6811      	ldr	r1, [r2, #0]
 80052ae:	1850      	adds	r0, r2, r1
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	d10b      	bne.n	80052cc <_free_r+0x6c>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	4401      	add	r1, r0
 80052b8:	1850      	adds	r0, r2, r1
 80052ba:	4283      	cmp	r3, r0
 80052bc:	6011      	str	r1, [r2, #0]
 80052be:	d1e0      	bne.n	8005282 <_free_r+0x22>
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	6053      	str	r3, [r2, #4]
 80052c6:	4408      	add	r0, r1
 80052c8:	6010      	str	r0, [r2, #0]
 80052ca:	e7da      	b.n	8005282 <_free_r+0x22>
 80052cc:	d902      	bls.n	80052d4 <_free_r+0x74>
 80052ce:	230c      	movs	r3, #12
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	e7d6      	b.n	8005282 <_free_r+0x22>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	1821      	adds	r1, r4, r0
 80052d8:	428b      	cmp	r3, r1
 80052da:	bf04      	itt	eq
 80052dc:	6819      	ldreq	r1, [r3, #0]
 80052de:	685b      	ldreq	r3, [r3, #4]
 80052e0:	6063      	str	r3, [r4, #4]
 80052e2:	bf04      	itt	eq
 80052e4:	1809      	addeq	r1, r1, r0
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	6054      	str	r4, [r2, #4]
 80052ea:	e7ca      	b.n	8005282 <_free_r+0x22>
 80052ec:	bd38      	pop	{r3, r4, r5, pc}
 80052ee:	bf00      	nop
 80052f0:	20000314 	.word	0x20000314

080052f4 <sbrk_aligned>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005334 <sbrk_aligned+0x40>)
 80052f8:	460c      	mov	r4, r1
 80052fa:	6831      	ldr	r1, [r6, #0]
 80052fc:	4605      	mov	r5, r0
 80052fe:	b911      	cbnz	r1, 8005306 <sbrk_aligned+0x12>
 8005300:	f000 fba6 	bl	8005a50 <_sbrk_r>
 8005304:	6030      	str	r0, [r6, #0]
 8005306:	4621      	mov	r1, r4
 8005308:	4628      	mov	r0, r5
 800530a:	f000 fba1 	bl	8005a50 <_sbrk_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d103      	bne.n	800531a <sbrk_aligned+0x26>
 8005312:	f04f 34ff 	mov.w	r4, #4294967295
 8005316:	4620      	mov	r0, r4
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	1cc4      	adds	r4, r0, #3
 800531c:	f024 0403 	bic.w	r4, r4, #3
 8005320:	42a0      	cmp	r0, r4
 8005322:	d0f8      	beq.n	8005316 <sbrk_aligned+0x22>
 8005324:	1a21      	subs	r1, r4, r0
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fb92 	bl	8005a50 <_sbrk_r>
 800532c:	3001      	adds	r0, #1
 800532e:	d1f2      	bne.n	8005316 <sbrk_aligned+0x22>
 8005330:	e7ef      	b.n	8005312 <sbrk_aligned+0x1e>
 8005332:	bf00      	nop
 8005334:	20000310 	.word	0x20000310

08005338 <_malloc_r>:
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	1ccd      	adds	r5, r1, #3
 800533e:	f025 0503 	bic.w	r5, r5, #3
 8005342:	3508      	adds	r5, #8
 8005344:	2d0c      	cmp	r5, #12
 8005346:	bf38      	it	cc
 8005348:	250c      	movcc	r5, #12
 800534a:	2d00      	cmp	r5, #0
 800534c:	4606      	mov	r6, r0
 800534e:	db01      	blt.n	8005354 <_malloc_r+0x1c>
 8005350:	42a9      	cmp	r1, r5
 8005352:	d904      	bls.n	800535e <_malloc_r+0x26>
 8005354:	230c      	movs	r3, #12
 8005356:	6033      	str	r3, [r6, #0]
 8005358:	2000      	movs	r0, #0
 800535a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005434 <_malloc_r+0xfc>
 8005362:	f000 f869 	bl	8005438 <__malloc_lock>
 8005366:	f8d8 3000 	ldr.w	r3, [r8]
 800536a:	461c      	mov	r4, r3
 800536c:	bb44      	cbnz	r4, 80053c0 <_malloc_r+0x88>
 800536e:	4629      	mov	r1, r5
 8005370:	4630      	mov	r0, r6
 8005372:	f7ff ffbf 	bl	80052f4 <sbrk_aligned>
 8005376:	1c43      	adds	r3, r0, #1
 8005378:	4604      	mov	r4, r0
 800537a:	d158      	bne.n	800542e <_malloc_r+0xf6>
 800537c:	f8d8 4000 	ldr.w	r4, [r8]
 8005380:	4627      	mov	r7, r4
 8005382:	2f00      	cmp	r7, #0
 8005384:	d143      	bne.n	800540e <_malloc_r+0xd6>
 8005386:	2c00      	cmp	r4, #0
 8005388:	d04b      	beq.n	8005422 <_malloc_r+0xea>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	eb04 0903 	add.w	r9, r4, r3
 8005394:	f000 fb5c 	bl	8005a50 <_sbrk_r>
 8005398:	4581      	cmp	r9, r0
 800539a:	d142      	bne.n	8005422 <_malloc_r+0xea>
 800539c:	6821      	ldr	r1, [r4, #0]
 800539e:	1a6d      	subs	r5, r5, r1
 80053a0:	4629      	mov	r1, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffa6 	bl	80052f4 <sbrk_aligned>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d03a      	beq.n	8005422 <_malloc_r+0xea>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	442b      	add	r3, r5
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	f8d8 3000 	ldr.w	r3, [r8]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	bb62      	cbnz	r2, 8005414 <_malloc_r+0xdc>
 80053ba:	f8c8 7000 	str.w	r7, [r8]
 80053be:	e00f      	b.n	80053e0 <_malloc_r+0xa8>
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	1b52      	subs	r2, r2, r5
 80053c4:	d420      	bmi.n	8005408 <_malloc_r+0xd0>
 80053c6:	2a0b      	cmp	r2, #11
 80053c8:	d917      	bls.n	80053fa <_malloc_r+0xc2>
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	bf18      	it	ne
 80053d2:	6059      	strne	r1, [r3, #4]
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	bf08      	it	eq
 80053d8:	f8c8 1000 	streq.w	r1, [r8]
 80053dc:	5162      	str	r2, [r4, r5]
 80053de:	604b      	str	r3, [r1, #4]
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f82f 	bl	8005444 <__malloc_unlock>
 80053e6:	f104 000b 	add.w	r0, r4, #11
 80053ea:	1d23      	adds	r3, r4, #4
 80053ec:	f020 0007 	bic.w	r0, r0, #7
 80053f0:	1ac2      	subs	r2, r0, r3
 80053f2:	bf1c      	itt	ne
 80053f4:	1a1b      	subne	r3, r3, r0
 80053f6:	50a3      	strne	r3, [r4, r2]
 80053f8:	e7af      	b.n	800535a <_malloc_r+0x22>
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	bf0c      	ite	eq
 8005400:	f8c8 2000 	streq.w	r2, [r8]
 8005404:	605a      	strne	r2, [r3, #4]
 8005406:	e7eb      	b.n	80053e0 <_malloc_r+0xa8>
 8005408:	4623      	mov	r3, r4
 800540a:	6864      	ldr	r4, [r4, #4]
 800540c:	e7ae      	b.n	800536c <_malloc_r+0x34>
 800540e:	463c      	mov	r4, r7
 8005410:	687f      	ldr	r7, [r7, #4]
 8005412:	e7b6      	b.n	8005382 <_malloc_r+0x4a>
 8005414:	461a      	mov	r2, r3
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	42a3      	cmp	r3, r4
 800541a:	d1fb      	bne.n	8005414 <_malloc_r+0xdc>
 800541c:	2300      	movs	r3, #0
 800541e:	6053      	str	r3, [r2, #4]
 8005420:	e7de      	b.n	80053e0 <_malloc_r+0xa8>
 8005422:	230c      	movs	r3, #12
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	4630      	mov	r0, r6
 8005428:	f000 f80c 	bl	8005444 <__malloc_unlock>
 800542c:	e794      	b.n	8005358 <_malloc_r+0x20>
 800542e:	6005      	str	r5, [r0, #0]
 8005430:	e7d6      	b.n	80053e0 <_malloc_r+0xa8>
 8005432:	bf00      	nop
 8005434:	20000314 	.word	0x20000314

08005438 <__malloc_lock>:
 8005438:	4801      	ldr	r0, [pc, #4]	@ (8005440 <__malloc_lock+0x8>)
 800543a:	f7ff bf0f 	b.w	800525c <__retarget_lock_acquire_recursive>
 800543e:	bf00      	nop
 8005440:	2000030c 	.word	0x2000030c

08005444 <__malloc_unlock>:
 8005444:	4801      	ldr	r0, [pc, #4]	@ (800544c <__malloc_unlock+0x8>)
 8005446:	f7ff bf0a 	b.w	800525e <__retarget_lock_release_recursive>
 800544a:	bf00      	nop
 800544c:	2000030c 	.word	0x2000030c

08005450 <__ssputs_r>:
 8005450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005454:	688e      	ldr	r6, [r1, #8]
 8005456:	461f      	mov	r7, r3
 8005458:	42be      	cmp	r6, r7
 800545a:	680b      	ldr	r3, [r1, #0]
 800545c:	4682      	mov	sl, r0
 800545e:	460c      	mov	r4, r1
 8005460:	4690      	mov	r8, r2
 8005462:	d82d      	bhi.n	80054c0 <__ssputs_r+0x70>
 8005464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005468:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800546c:	d026      	beq.n	80054bc <__ssputs_r+0x6c>
 800546e:	6965      	ldr	r5, [r4, #20]
 8005470:	6909      	ldr	r1, [r1, #16]
 8005472:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005476:	eba3 0901 	sub.w	r9, r3, r1
 800547a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800547e:	1c7b      	adds	r3, r7, #1
 8005480:	444b      	add	r3, r9
 8005482:	106d      	asrs	r5, r5, #1
 8005484:	429d      	cmp	r5, r3
 8005486:	bf38      	it	cc
 8005488:	461d      	movcc	r5, r3
 800548a:	0553      	lsls	r3, r2, #21
 800548c:	d527      	bpl.n	80054de <__ssputs_r+0x8e>
 800548e:	4629      	mov	r1, r5
 8005490:	f7ff ff52 	bl	8005338 <_malloc_r>
 8005494:	4606      	mov	r6, r0
 8005496:	b360      	cbz	r0, 80054f2 <__ssputs_r+0xa2>
 8005498:	6921      	ldr	r1, [r4, #16]
 800549a:	464a      	mov	r2, r9
 800549c:	f000 fae8 	bl	8005a70 <memcpy>
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80054a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	6126      	str	r6, [r4, #16]
 80054ae:	6165      	str	r5, [r4, #20]
 80054b0:	444e      	add	r6, r9
 80054b2:	eba5 0509 	sub.w	r5, r5, r9
 80054b6:	6026      	str	r6, [r4, #0]
 80054b8:	60a5      	str	r5, [r4, #8]
 80054ba:	463e      	mov	r6, r7
 80054bc:	42be      	cmp	r6, r7
 80054be:	d900      	bls.n	80054c2 <__ssputs_r+0x72>
 80054c0:	463e      	mov	r6, r7
 80054c2:	6820      	ldr	r0, [r4, #0]
 80054c4:	4632      	mov	r2, r6
 80054c6:	4641      	mov	r1, r8
 80054c8:	f000 faa8 	bl	8005a1c <memmove>
 80054cc:	68a3      	ldr	r3, [r4, #8]
 80054ce:	1b9b      	subs	r3, r3, r6
 80054d0:	60a3      	str	r3, [r4, #8]
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	4433      	add	r3, r6
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	2000      	movs	r0, #0
 80054da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054de:	462a      	mov	r2, r5
 80054e0:	f000 fad4 	bl	8005a8c <_realloc_r>
 80054e4:	4606      	mov	r6, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d1e0      	bne.n	80054ac <__ssputs_r+0x5c>
 80054ea:	6921      	ldr	r1, [r4, #16]
 80054ec:	4650      	mov	r0, sl
 80054ee:	f7ff feb7 	bl	8005260 <_free_r>
 80054f2:	230c      	movs	r3, #12
 80054f4:	f8ca 3000 	str.w	r3, [sl]
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	e7e9      	b.n	80054da <__ssputs_r+0x8a>
	...

08005508 <_svfiprintf_r>:
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	4698      	mov	r8, r3
 800550e:	898b      	ldrh	r3, [r1, #12]
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	b09d      	sub	sp, #116	@ 0x74
 8005514:	4607      	mov	r7, r0
 8005516:	460d      	mov	r5, r1
 8005518:	4614      	mov	r4, r2
 800551a:	d510      	bpl.n	800553e <_svfiprintf_r+0x36>
 800551c:	690b      	ldr	r3, [r1, #16]
 800551e:	b973      	cbnz	r3, 800553e <_svfiprintf_r+0x36>
 8005520:	2140      	movs	r1, #64	@ 0x40
 8005522:	f7ff ff09 	bl	8005338 <_malloc_r>
 8005526:	6028      	str	r0, [r5, #0]
 8005528:	6128      	str	r0, [r5, #16]
 800552a:	b930      	cbnz	r0, 800553a <_svfiprintf_r+0x32>
 800552c:	230c      	movs	r3, #12
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	b01d      	add	sp, #116	@ 0x74
 8005536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553a:	2340      	movs	r3, #64	@ 0x40
 800553c:	616b      	str	r3, [r5, #20]
 800553e:	2300      	movs	r3, #0
 8005540:	9309      	str	r3, [sp, #36]	@ 0x24
 8005542:	2320      	movs	r3, #32
 8005544:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005548:	f8cd 800c 	str.w	r8, [sp, #12]
 800554c:	2330      	movs	r3, #48	@ 0x30
 800554e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056ec <_svfiprintf_r+0x1e4>
 8005552:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005556:	f04f 0901 	mov.w	r9, #1
 800555a:	4623      	mov	r3, r4
 800555c:	469a      	mov	sl, r3
 800555e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005562:	b10a      	cbz	r2, 8005568 <_svfiprintf_r+0x60>
 8005564:	2a25      	cmp	r2, #37	@ 0x25
 8005566:	d1f9      	bne.n	800555c <_svfiprintf_r+0x54>
 8005568:	ebba 0b04 	subs.w	fp, sl, r4
 800556c:	d00b      	beq.n	8005586 <_svfiprintf_r+0x7e>
 800556e:	465b      	mov	r3, fp
 8005570:	4622      	mov	r2, r4
 8005572:	4629      	mov	r1, r5
 8005574:	4638      	mov	r0, r7
 8005576:	f7ff ff6b 	bl	8005450 <__ssputs_r>
 800557a:	3001      	adds	r0, #1
 800557c:	f000 80a7 	beq.w	80056ce <_svfiprintf_r+0x1c6>
 8005580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005582:	445a      	add	r2, fp
 8005584:	9209      	str	r2, [sp, #36]	@ 0x24
 8005586:	f89a 3000 	ldrb.w	r3, [sl]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 809f 	beq.w	80056ce <_svfiprintf_r+0x1c6>
 8005590:	2300      	movs	r3, #0
 8005592:	f04f 32ff 	mov.w	r2, #4294967295
 8005596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800559a:	f10a 0a01 	add.w	sl, sl, #1
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	9307      	str	r3, [sp, #28]
 80055a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80055a8:	4654      	mov	r4, sl
 80055aa:	2205      	movs	r2, #5
 80055ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b0:	484e      	ldr	r0, [pc, #312]	@ (80056ec <_svfiprintf_r+0x1e4>)
 80055b2:	f7fa fe1d 	bl	80001f0 <memchr>
 80055b6:	9a04      	ldr	r2, [sp, #16]
 80055b8:	b9d8      	cbnz	r0, 80055f2 <_svfiprintf_r+0xea>
 80055ba:	06d0      	lsls	r0, r2, #27
 80055bc:	bf44      	itt	mi
 80055be:	2320      	movmi	r3, #32
 80055c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055c4:	0711      	lsls	r1, r2, #28
 80055c6:	bf44      	itt	mi
 80055c8:	232b      	movmi	r3, #43	@ 0x2b
 80055ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055ce:	f89a 3000 	ldrb.w	r3, [sl]
 80055d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80055d4:	d015      	beq.n	8005602 <_svfiprintf_r+0xfa>
 80055d6:	9a07      	ldr	r2, [sp, #28]
 80055d8:	4654      	mov	r4, sl
 80055da:	2000      	movs	r0, #0
 80055dc:	f04f 0c0a 	mov.w	ip, #10
 80055e0:	4621      	mov	r1, r4
 80055e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055e6:	3b30      	subs	r3, #48	@ 0x30
 80055e8:	2b09      	cmp	r3, #9
 80055ea:	d94b      	bls.n	8005684 <_svfiprintf_r+0x17c>
 80055ec:	b1b0      	cbz	r0, 800561c <_svfiprintf_r+0x114>
 80055ee:	9207      	str	r2, [sp, #28]
 80055f0:	e014      	b.n	800561c <_svfiprintf_r+0x114>
 80055f2:	eba0 0308 	sub.w	r3, r0, r8
 80055f6:	fa09 f303 	lsl.w	r3, r9, r3
 80055fa:	4313      	orrs	r3, r2
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	46a2      	mov	sl, r4
 8005600:	e7d2      	b.n	80055a8 <_svfiprintf_r+0xa0>
 8005602:	9b03      	ldr	r3, [sp, #12]
 8005604:	1d19      	adds	r1, r3, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	9103      	str	r1, [sp, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	bfbb      	ittet	lt
 800560e:	425b      	neglt	r3, r3
 8005610:	f042 0202 	orrlt.w	r2, r2, #2
 8005614:	9307      	strge	r3, [sp, #28]
 8005616:	9307      	strlt	r3, [sp, #28]
 8005618:	bfb8      	it	lt
 800561a:	9204      	strlt	r2, [sp, #16]
 800561c:	7823      	ldrb	r3, [r4, #0]
 800561e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005620:	d10a      	bne.n	8005638 <_svfiprintf_r+0x130>
 8005622:	7863      	ldrb	r3, [r4, #1]
 8005624:	2b2a      	cmp	r3, #42	@ 0x2a
 8005626:	d132      	bne.n	800568e <_svfiprintf_r+0x186>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	1d1a      	adds	r2, r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	9203      	str	r2, [sp, #12]
 8005630:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005634:	3402      	adds	r4, #2
 8005636:	9305      	str	r3, [sp, #20]
 8005638:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056fc <_svfiprintf_r+0x1f4>
 800563c:	7821      	ldrb	r1, [r4, #0]
 800563e:	2203      	movs	r2, #3
 8005640:	4650      	mov	r0, sl
 8005642:	f7fa fdd5 	bl	80001f0 <memchr>
 8005646:	b138      	cbz	r0, 8005658 <_svfiprintf_r+0x150>
 8005648:	9b04      	ldr	r3, [sp, #16]
 800564a:	eba0 000a 	sub.w	r0, r0, sl
 800564e:	2240      	movs	r2, #64	@ 0x40
 8005650:	4082      	lsls	r2, r0
 8005652:	4313      	orrs	r3, r2
 8005654:	3401      	adds	r4, #1
 8005656:	9304      	str	r3, [sp, #16]
 8005658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565c:	4824      	ldr	r0, [pc, #144]	@ (80056f0 <_svfiprintf_r+0x1e8>)
 800565e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005662:	2206      	movs	r2, #6
 8005664:	f7fa fdc4 	bl	80001f0 <memchr>
 8005668:	2800      	cmp	r0, #0
 800566a:	d036      	beq.n	80056da <_svfiprintf_r+0x1d2>
 800566c:	4b21      	ldr	r3, [pc, #132]	@ (80056f4 <_svfiprintf_r+0x1ec>)
 800566e:	bb1b      	cbnz	r3, 80056b8 <_svfiprintf_r+0x1b0>
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	3307      	adds	r3, #7
 8005674:	f023 0307 	bic.w	r3, r3, #7
 8005678:	3308      	adds	r3, #8
 800567a:	9303      	str	r3, [sp, #12]
 800567c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800567e:	4433      	add	r3, r6
 8005680:	9309      	str	r3, [sp, #36]	@ 0x24
 8005682:	e76a      	b.n	800555a <_svfiprintf_r+0x52>
 8005684:	fb0c 3202 	mla	r2, ip, r2, r3
 8005688:	460c      	mov	r4, r1
 800568a:	2001      	movs	r0, #1
 800568c:	e7a8      	b.n	80055e0 <_svfiprintf_r+0xd8>
 800568e:	2300      	movs	r3, #0
 8005690:	3401      	adds	r4, #1
 8005692:	9305      	str	r3, [sp, #20]
 8005694:	4619      	mov	r1, r3
 8005696:	f04f 0c0a 	mov.w	ip, #10
 800569a:	4620      	mov	r0, r4
 800569c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056a0:	3a30      	subs	r2, #48	@ 0x30
 80056a2:	2a09      	cmp	r2, #9
 80056a4:	d903      	bls.n	80056ae <_svfiprintf_r+0x1a6>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0c6      	beq.n	8005638 <_svfiprintf_r+0x130>
 80056aa:	9105      	str	r1, [sp, #20]
 80056ac:	e7c4      	b.n	8005638 <_svfiprintf_r+0x130>
 80056ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80056b2:	4604      	mov	r4, r0
 80056b4:	2301      	movs	r3, #1
 80056b6:	e7f0      	b.n	800569a <_svfiprintf_r+0x192>
 80056b8:	ab03      	add	r3, sp, #12
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	462a      	mov	r2, r5
 80056be:	4b0e      	ldr	r3, [pc, #56]	@ (80056f8 <_svfiprintf_r+0x1f0>)
 80056c0:	a904      	add	r1, sp, #16
 80056c2:	4638      	mov	r0, r7
 80056c4:	f3af 8000 	nop.w
 80056c8:	1c42      	adds	r2, r0, #1
 80056ca:	4606      	mov	r6, r0
 80056cc:	d1d6      	bne.n	800567c <_svfiprintf_r+0x174>
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	065b      	lsls	r3, r3, #25
 80056d2:	f53f af2d 	bmi.w	8005530 <_svfiprintf_r+0x28>
 80056d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056d8:	e72c      	b.n	8005534 <_svfiprintf_r+0x2c>
 80056da:	ab03      	add	r3, sp, #12
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	462a      	mov	r2, r5
 80056e0:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <_svfiprintf_r+0x1f0>)
 80056e2:	a904      	add	r1, sp, #16
 80056e4:	4638      	mov	r0, r7
 80056e6:	f000 f879 	bl	80057dc <_printf_i>
 80056ea:	e7ed      	b.n	80056c8 <_svfiprintf_r+0x1c0>
 80056ec:	08005ba8 	.word	0x08005ba8
 80056f0:	08005bb2 	.word	0x08005bb2
 80056f4:	00000000 	.word	0x00000000
 80056f8:	08005451 	.word	0x08005451
 80056fc:	08005bae 	.word	0x08005bae

08005700 <_printf_common>:
 8005700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	4616      	mov	r6, r2
 8005706:	4698      	mov	r8, r3
 8005708:	688a      	ldr	r2, [r1, #8]
 800570a:	690b      	ldr	r3, [r1, #16]
 800570c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005710:	4293      	cmp	r3, r2
 8005712:	bfb8      	it	lt
 8005714:	4613      	movlt	r3, r2
 8005716:	6033      	str	r3, [r6, #0]
 8005718:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800571c:	4607      	mov	r7, r0
 800571e:	460c      	mov	r4, r1
 8005720:	b10a      	cbz	r2, 8005726 <_printf_common+0x26>
 8005722:	3301      	adds	r3, #1
 8005724:	6033      	str	r3, [r6, #0]
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	0699      	lsls	r1, r3, #26
 800572a:	bf42      	ittt	mi
 800572c:	6833      	ldrmi	r3, [r6, #0]
 800572e:	3302      	addmi	r3, #2
 8005730:	6033      	strmi	r3, [r6, #0]
 8005732:	6825      	ldr	r5, [r4, #0]
 8005734:	f015 0506 	ands.w	r5, r5, #6
 8005738:	d106      	bne.n	8005748 <_printf_common+0x48>
 800573a:	f104 0a19 	add.w	sl, r4, #25
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	6832      	ldr	r2, [r6, #0]
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	42ab      	cmp	r3, r5
 8005746:	dc26      	bgt.n	8005796 <_printf_common+0x96>
 8005748:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	3b00      	subs	r3, #0
 8005750:	bf18      	it	ne
 8005752:	2301      	movne	r3, #1
 8005754:	0692      	lsls	r2, r2, #26
 8005756:	d42b      	bmi.n	80057b0 <_printf_common+0xb0>
 8005758:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800575c:	4641      	mov	r1, r8
 800575e:	4638      	mov	r0, r7
 8005760:	47c8      	blx	r9
 8005762:	3001      	adds	r0, #1
 8005764:	d01e      	beq.n	80057a4 <_printf_common+0xa4>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	6922      	ldr	r2, [r4, #16]
 800576a:	f003 0306 	and.w	r3, r3, #6
 800576e:	2b04      	cmp	r3, #4
 8005770:	bf02      	ittt	eq
 8005772:	68e5      	ldreq	r5, [r4, #12]
 8005774:	6833      	ldreq	r3, [r6, #0]
 8005776:	1aed      	subeq	r5, r5, r3
 8005778:	68a3      	ldr	r3, [r4, #8]
 800577a:	bf0c      	ite	eq
 800577c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005780:	2500      	movne	r5, #0
 8005782:	4293      	cmp	r3, r2
 8005784:	bfc4      	itt	gt
 8005786:	1a9b      	subgt	r3, r3, r2
 8005788:	18ed      	addgt	r5, r5, r3
 800578a:	2600      	movs	r6, #0
 800578c:	341a      	adds	r4, #26
 800578e:	42b5      	cmp	r5, r6
 8005790:	d11a      	bne.n	80057c8 <_printf_common+0xc8>
 8005792:	2000      	movs	r0, #0
 8005794:	e008      	b.n	80057a8 <_printf_common+0xa8>
 8005796:	2301      	movs	r3, #1
 8005798:	4652      	mov	r2, sl
 800579a:	4641      	mov	r1, r8
 800579c:	4638      	mov	r0, r7
 800579e:	47c8      	blx	r9
 80057a0:	3001      	adds	r0, #1
 80057a2:	d103      	bne.n	80057ac <_printf_common+0xac>
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ac:	3501      	adds	r5, #1
 80057ae:	e7c6      	b.n	800573e <_printf_common+0x3e>
 80057b0:	18e1      	adds	r1, r4, r3
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	2030      	movs	r0, #48	@ 0x30
 80057b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057ba:	4422      	add	r2, r4
 80057bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057c4:	3302      	adds	r3, #2
 80057c6:	e7c7      	b.n	8005758 <_printf_common+0x58>
 80057c8:	2301      	movs	r3, #1
 80057ca:	4622      	mov	r2, r4
 80057cc:	4641      	mov	r1, r8
 80057ce:	4638      	mov	r0, r7
 80057d0:	47c8      	blx	r9
 80057d2:	3001      	adds	r0, #1
 80057d4:	d0e6      	beq.n	80057a4 <_printf_common+0xa4>
 80057d6:	3601      	adds	r6, #1
 80057d8:	e7d9      	b.n	800578e <_printf_common+0x8e>
	...

080057dc <_printf_i>:
 80057dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057e0:	7e0f      	ldrb	r7, [r1, #24]
 80057e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057e4:	2f78      	cmp	r7, #120	@ 0x78
 80057e6:	4691      	mov	r9, r2
 80057e8:	4680      	mov	r8, r0
 80057ea:	460c      	mov	r4, r1
 80057ec:	469a      	mov	sl, r3
 80057ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057f2:	d807      	bhi.n	8005804 <_printf_i+0x28>
 80057f4:	2f62      	cmp	r7, #98	@ 0x62
 80057f6:	d80a      	bhi.n	800580e <_printf_i+0x32>
 80057f8:	2f00      	cmp	r7, #0
 80057fa:	f000 80d2 	beq.w	80059a2 <_printf_i+0x1c6>
 80057fe:	2f58      	cmp	r7, #88	@ 0x58
 8005800:	f000 80b9 	beq.w	8005976 <_printf_i+0x19a>
 8005804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005808:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800580c:	e03a      	b.n	8005884 <_printf_i+0xa8>
 800580e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005812:	2b15      	cmp	r3, #21
 8005814:	d8f6      	bhi.n	8005804 <_printf_i+0x28>
 8005816:	a101      	add	r1, pc, #4	@ (adr r1, 800581c <_printf_i+0x40>)
 8005818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800581c:	08005875 	.word	0x08005875
 8005820:	08005889 	.word	0x08005889
 8005824:	08005805 	.word	0x08005805
 8005828:	08005805 	.word	0x08005805
 800582c:	08005805 	.word	0x08005805
 8005830:	08005805 	.word	0x08005805
 8005834:	08005889 	.word	0x08005889
 8005838:	08005805 	.word	0x08005805
 800583c:	08005805 	.word	0x08005805
 8005840:	08005805 	.word	0x08005805
 8005844:	08005805 	.word	0x08005805
 8005848:	08005989 	.word	0x08005989
 800584c:	080058b3 	.word	0x080058b3
 8005850:	08005943 	.word	0x08005943
 8005854:	08005805 	.word	0x08005805
 8005858:	08005805 	.word	0x08005805
 800585c:	080059ab 	.word	0x080059ab
 8005860:	08005805 	.word	0x08005805
 8005864:	080058b3 	.word	0x080058b3
 8005868:	08005805 	.word	0x08005805
 800586c:	08005805 	.word	0x08005805
 8005870:	0800594b 	.word	0x0800594b
 8005874:	6833      	ldr	r3, [r6, #0]
 8005876:	1d1a      	adds	r2, r3, #4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6032      	str	r2, [r6, #0]
 800587c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005884:	2301      	movs	r3, #1
 8005886:	e09d      	b.n	80059c4 <_printf_i+0x1e8>
 8005888:	6833      	ldr	r3, [r6, #0]
 800588a:	6820      	ldr	r0, [r4, #0]
 800588c:	1d19      	adds	r1, r3, #4
 800588e:	6031      	str	r1, [r6, #0]
 8005890:	0606      	lsls	r6, r0, #24
 8005892:	d501      	bpl.n	8005898 <_printf_i+0xbc>
 8005894:	681d      	ldr	r5, [r3, #0]
 8005896:	e003      	b.n	80058a0 <_printf_i+0xc4>
 8005898:	0645      	lsls	r5, r0, #25
 800589a:	d5fb      	bpl.n	8005894 <_printf_i+0xb8>
 800589c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	da03      	bge.n	80058ac <_printf_i+0xd0>
 80058a4:	232d      	movs	r3, #45	@ 0x2d
 80058a6:	426d      	negs	r5, r5
 80058a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ac:	4859      	ldr	r0, [pc, #356]	@ (8005a14 <_printf_i+0x238>)
 80058ae:	230a      	movs	r3, #10
 80058b0:	e011      	b.n	80058d6 <_printf_i+0xfa>
 80058b2:	6821      	ldr	r1, [r4, #0]
 80058b4:	6833      	ldr	r3, [r6, #0]
 80058b6:	0608      	lsls	r0, r1, #24
 80058b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80058bc:	d402      	bmi.n	80058c4 <_printf_i+0xe8>
 80058be:	0649      	lsls	r1, r1, #25
 80058c0:	bf48      	it	mi
 80058c2:	b2ad      	uxthmi	r5, r5
 80058c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80058c6:	4853      	ldr	r0, [pc, #332]	@ (8005a14 <_printf_i+0x238>)
 80058c8:	6033      	str	r3, [r6, #0]
 80058ca:	bf14      	ite	ne
 80058cc:	230a      	movne	r3, #10
 80058ce:	2308      	moveq	r3, #8
 80058d0:	2100      	movs	r1, #0
 80058d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058d6:	6866      	ldr	r6, [r4, #4]
 80058d8:	60a6      	str	r6, [r4, #8]
 80058da:	2e00      	cmp	r6, #0
 80058dc:	bfa2      	ittt	ge
 80058de:	6821      	ldrge	r1, [r4, #0]
 80058e0:	f021 0104 	bicge.w	r1, r1, #4
 80058e4:	6021      	strge	r1, [r4, #0]
 80058e6:	b90d      	cbnz	r5, 80058ec <_printf_i+0x110>
 80058e8:	2e00      	cmp	r6, #0
 80058ea:	d04b      	beq.n	8005984 <_printf_i+0x1a8>
 80058ec:	4616      	mov	r6, r2
 80058ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80058f2:	fb03 5711 	mls	r7, r3, r1, r5
 80058f6:	5dc7      	ldrb	r7, [r0, r7]
 80058f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058fc:	462f      	mov	r7, r5
 80058fe:	42bb      	cmp	r3, r7
 8005900:	460d      	mov	r5, r1
 8005902:	d9f4      	bls.n	80058ee <_printf_i+0x112>
 8005904:	2b08      	cmp	r3, #8
 8005906:	d10b      	bne.n	8005920 <_printf_i+0x144>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	07df      	lsls	r7, r3, #31
 800590c:	d508      	bpl.n	8005920 <_printf_i+0x144>
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	6861      	ldr	r1, [r4, #4]
 8005912:	4299      	cmp	r1, r3
 8005914:	bfde      	ittt	le
 8005916:	2330      	movle	r3, #48	@ 0x30
 8005918:	f806 3c01 	strble.w	r3, [r6, #-1]
 800591c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005920:	1b92      	subs	r2, r2, r6
 8005922:	6122      	str	r2, [r4, #16]
 8005924:	f8cd a000 	str.w	sl, [sp]
 8005928:	464b      	mov	r3, r9
 800592a:	aa03      	add	r2, sp, #12
 800592c:	4621      	mov	r1, r4
 800592e:	4640      	mov	r0, r8
 8005930:	f7ff fee6 	bl	8005700 <_printf_common>
 8005934:	3001      	adds	r0, #1
 8005936:	d14a      	bne.n	80059ce <_printf_i+0x1f2>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	b004      	add	sp, #16
 800593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	f043 0320 	orr.w	r3, r3, #32
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	4833      	ldr	r0, [pc, #204]	@ (8005a18 <_printf_i+0x23c>)
 800594c:	2778      	movs	r7, #120	@ 0x78
 800594e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	6831      	ldr	r1, [r6, #0]
 8005956:	061f      	lsls	r7, r3, #24
 8005958:	f851 5b04 	ldr.w	r5, [r1], #4
 800595c:	d402      	bmi.n	8005964 <_printf_i+0x188>
 800595e:	065f      	lsls	r7, r3, #25
 8005960:	bf48      	it	mi
 8005962:	b2ad      	uxthmi	r5, r5
 8005964:	6031      	str	r1, [r6, #0]
 8005966:	07d9      	lsls	r1, r3, #31
 8005968:	bf44      	itt	mi
 800596a:	f043 0320 	orrmi.w	r3, r3, #32
 800596e:	6023      	strmi	r3, [r4, #0]
 8005970:	b11d      	cbz	r5, 800597a <_printf_i+0x19e>
 8005972:	2310      	movs	r3, #16
 8005974:	e7ac      	b.n	80058d0 <_printf_i+0xf4>
 8005976:	4827      	ldr	r0, [pc, #156]	@ (8005a14 <_printf_i+0x238>)
 8005978:	e7e9      	b.n	800594e <_printf_i+0x172>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	f023 0320 	bic.w	r3, r3, #32
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	e7f6      	b.n	8005972 <_printf_i+0x196>
 8005984:	4616      	mov	r6, r2
 8005986:	e7bd      	b.n	8005904 <_printf_i+0x128>
 8005988:	6833      	ldr	r3, [r6, #0]
 800598a:	6825      	ldr	r5, [r4, #0]
 800598c:	6961      	ldr	r1, [r4, #20]
 800598e:	1d18      	adds	r0, r3, #4
 8005990:	6030      	str	r0, [r6, #0]
 8005992:	062e      	lsls	r6, r5, #24
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	d501      	bpl.n	800599c <_printf_i+0x1c0>
 8005998:	6019      	str	r1, [r3, #0]
 800599a:	e002      	b.n	80059a2 <_printf_i+0x1c6>
 800599c:	0668      	lsls	r0, r5, #25
 800599e:	d5fb      	bpl.n	8005998 <_printf_i+0x1bc>
 80059a0:	8019      	strh	r1, [r3, #0]
 80059a2:	2300      	movs	r3, #0
 80059a4:	6123      	str	r3, [r4, #16]
 80059a6:	4616      	mov	r6, r2
 80059a8:	e7bc      	b.n	8005924 <_printf_i+0x148>
 80059aa:	6833      	ldr	r3, [r6, #0]
 80059ac:	1d1a      	adds	r2, r3, #4
 80059ae:	6032      	str	r2, [r6, #0]
 80059b0:	681e      	ldr	r6, [r3, #0]
 80059b2:	6862      	ldr	r2, [r4, #4]
 80059b4:	2100      	movs	r1, #0
 80059b6:	4630      	mov	r0, r6
 80059b8:	f7fa fc1a 	bl	80001f0 <memchr>
 80059bc:	b108      	cbz	r0, 80059c2 <_printf_i+0x1e6>
 80059be:	1b80      	subs	r0, r0, r6
 80059c0:	6060      	str	r0, [r4, #4]
 80059c2:	6863      	ldr	r3, [r4, #4]
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	2300      	movs	r3, #0
 80059c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059cc:	e7aa      	b.n	8005924 <_printf_i+0x148>
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	4632      	mov	r2, r6
 80059d2:	4649      	mov	r1, r9
 80059d4:	4640      	mov	r0, r8
 80059d6:	47d0      	blx	sl
 80059d8:	3001      	adds	r0, #1
 80059da:	d0ad      	beq.n	8005938 <_printf_i+0x15c>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	079b      	lsls	r3, r3, #30
 80059e0:	d413      	bmi.n	8005a0a <_printf_i+0x22e>
 80059e2:	68e0      	ldr	r0, [r4, #12]
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	4298      	cmp	r0, r3
 80059e8:	bfb8      	it	lt
 80059ea:	4618      	movlt	r0, r3
 80059ec:	e7a6      	b.n	800593c <_printf_i+0x160>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4632      	mov	r2, r6
 80059f2:	4649      	mov	r1, r9
 80059f4:	4640      	mov	r0, r8
 80059f6:	47d0      	blx	sl
 80059f8:	3001      	adds	r0, #1
 80059fa:	d09d      	beq.n	8005938 <_printf_i+0x15c>
 80059fc:	3501      	adds	r5, #1
 80059fe:	68e3      	ldr	r3, [r4, #12]
 8005a00:	9903      	ldr	r1, [sp, #12]
 8005a02:	1a5b      	subs	r3, r3, r1
 8005a04:	42ab      	cmp	r3, r5
 8005a06:	dcf2      	bgt.n	80059ee <_printf_i+0x212>
 8005a08:	e7eb      	b.n	80059e2 <_printf_i+0x206>
 8005a0a:	2500      	movs	r5, #0
 8005a0c:	f104 0619 	add.w	r6, r4, #25
 8005a10:	e7f5      	b.n	80059fe <_printf_i+0x222>
 8005a12:	bf00      	nop
 8005a14:	08005bb9 	.word	0x08005bb9
 8005a18:	08005bca 	.word	0x08005bca

08005a1c <memmove>:
 8005a1c:	4288      	cmp	r0, r1
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	eb01 0402 	add.w	r4, r1, r2
 8005a24:	d902      	bls.n	8005a2c <memmove+0x10>
 8005a26:	4284      	cmp	r4, r0
 8005a28:	4623      	mov	r3, r4
 8005a2a:	d807      	bhi.n	8005a3c <memmove+0x20>
 8005a2c:	1e43      	subs	r3, r0, #1
 8005a2e:	42a1      	cmp	r1, r4
 8005a30:	d008      	beq.n	8005a44 <memmove+0x28>
 8005a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a3a:	e7f8      	b.n	8005a2e <memmove+0x12>
 8005a3c:	4402      	add	r2, r0
 8005a3e:	4601      	mov	r1, r0
 8005a40:	428a      	cmp	r2, r1
 8005a42:	d100      	bne.n	8005a46 <memmove+0x2a>
 8005a44:	bd10      	pop	{r4, pc}
 8005a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a4e:	e7f7      	b.n	8005a40 <memmove+0x24>

08005a50 <_sbrk_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d06      	ldr	r5, [pc, #24]	@ (8005a6c <_sbrk_r+0x1c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	f7fc fe20 	bl	80026a0 <_sbrk>
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	d102      	bne.n	8005a6a <_sbrk_r+0x1a>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	b103      	cbz	r3, 8005a6a <_sbrk_r+0x1a>
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	20000308 	.word	0x20000308

08005a70 <memcpy>:
 8005a70:	440a      	add	r2, r1
 8005a72:	4291      	cmp	r1, r2
 8005a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a78:	d100      	bne.n	8005a7c <memcpy+0xc>
 8005a7a:	4770      	bx	lr
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a86:	4291      	cmp	r1, r2
 8005a88:	d1f9      	bne.n	8005a7e <memcpy+0xe>
 8005a8a:	bd10      	pop	{r4, pc}

08005a8c <_realloc_r>:
 8005a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a90:	4680      	mov	r8, r0
 8005a92:	4615      	mov	r5, r2
 8005a94:	460c      	mov	r4, r1
 8005a96:	b921      	cbnz	r1, 8005aa2 <_realloc_r+0x16>
 8005a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	f7ff bc4b 	b.w	8005338 <_malloc_r>
 8005aa2:	b92a      	cbnz	r2, 8005ab0 <_realloc_r+0x24>
 8005aa4:	f7ff fbdc 	bl	8005260 <_free_r>
 8005aa8:	2400      	movs	r4, #0
 8005aaa:	4620      	mov	r0, r4
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab0:	f000 f81a 	bl	8005ae8 <_malloc_usable_size_r>
 8005ab4:	4285      	cmp	r5, r0
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	d802      	bhi.n	8005ac0 <_realloc_r+0x34>
 8005aba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005abe:	d8f4      	bhi.n	8005aaa <_realloc_r+0x1e>
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f7ff fc38 	bl	8005338 <_malloc_r>
 8005ac8:	4607      	mov	r7, r0
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0ec      	beq.n	8005aa8 <_realloc_r+0x1c>
 8005ace:	42b5      	cmp	r5, r6
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	bf28      	it	cs
 8005ad6:	4632      	movcs	r2, r6
 8005ad8:	f7ff ffca 	bl	8005a70 <memcpy>
 8005adc:	4621      	mov	r1, r4
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f7ff fbbe 	bl	8005260 <_free_r>
 8005ae4:	463c      	mov	r4, r7
 8005ae6:	e7e0      	b.n	8005aaa <_realloc_r+0x1e>

08005ae8 <_malloc_usable_size_r>:
 8005ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aec:	1f18      	subs	r0, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bfbc      	itt	lt
 8005af2:	580b      	ldrlt	r3, [r1, r0]
 8005af4:	18c0      	addlt	r0, r0, r3
 8005af6:	4770      	bx	lr

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr
