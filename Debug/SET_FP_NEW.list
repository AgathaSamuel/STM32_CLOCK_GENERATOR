
SET_FP_NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060b4  080060b4  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060bc  080060bc  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060bc  080060bc  000070bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060c0  080060c0  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080060c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000080  08006144  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08006144  00008328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7e4  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255f  00000000  00000000  00017894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00019df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4f  00000000  00000000  0001ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174f8  00000000  00000000  0001b7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012062  00000000  00000000  00032cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098975  00000000  00000000  00044d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004334  00000000  00000000  000dd6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e1a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fc0 	.word	0x08005fc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08005fc0 	.word	0x08005fc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b96a 	b.w	8000e08 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	460c      	mov	r4, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d14e      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b58:	4694      	mov	ip, r2
 8000b5a:	458c      	cmp	ip, r1
 8000b5c:	4686      	mov	lr, r0
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	d962      	bls.n	8000c2a <__udivmoddi4+0xde>
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0320 	rsb	r3, r2, #32
 8000b6a:	4091      	lsls	r1, r2
 8000b6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b74:	4319      	orrs	r1, r3
 8000b76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7e:	fa1f f68c 	uxth.w	r6, ip
 8000b82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb04 f106 	mul.w	r1, r4, r6
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ba2:	f080 8112 	bcs.w	8000dca <__udivmoddi4+0x27e>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 810f 	bls.w	8000dca <__udivmoddi4+0x27e>
 8000bac:	3c02      	subs	r4, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	fa1f f38e 	uxth.w	r3, lr
 8000bb6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bba:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb00 f606 	mul.w	r6, r0, r6
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x94>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd2:	f080 80fc 	bcs.w	8000dce <__udivmoddi4+0x282>
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	f240 80f9 	bls.w	8000dce <__udivmoddi4+0x282>
 8000bdc:	4463      	add	r3, ip
 8000bde:	3802      	subs	r0, #2
 8000be0:	1b9b      	subs	r3, r3, r6
 8000be2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000be6:	2100      	movs	r1, #0
 8000be8:	b11d      	cbz	r5, 8000bf2 <__udivmoddi4+0xa6>
 8000bea:	40d3      	lsrs	r3, r2
 8000bec:	2200      	movs	r2, #0
 8000bee:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d905      	bls.n	8000c06 <__udivmoddi4+0xba>
 8000bfa:	b10d      	cbz	r5, 8000c00 <__udivmoddi4+0xb4>
 8000bfc:	e9c5 0100 	strd	r0, r1, [r5]
 8000c00:	2100      	movs	r1, #0
 8000c02:	4608      	mov	r0, r1
 8000c04:	e7f5      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c06:	fab3 f183 	clz	r1, r3
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	d146      	bne.n	8000c9c <__udivmoddi4+0x150>
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xcc>
 8000c12:	4290      	cmp	r0, r2
 8000c14:	f0c0 80f0 	bcc.w	8000df8 <__udivmoddi4+0x2ac>
 8000c18:	1a86      	subs	r6, r0, r2
 8000c1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	2d00      	cmp	r5, #0
 8000c22:	d0e6      	beq.n	8000bf2 <__udivmoddi4+0xa6>
 8000c24:	e9c5 6300 	strd	r6, r3, [r5]
 8000c28:	e7e3      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	f040 8090 	bne.w	8000d50 <__udivmoddi4+0x204>
 8000c30:	eba1 040c 	sub.w	r4, r1, ip
 8000c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c38:	fa1f f78c 	uxth.w	r7, ip
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb08 4416 	mls	r4, r8, r6, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb07 f006 	mul.w	r0, r7, r6
 8000c52:	4298      	cmp	r0, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x11c>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x11a>
 8000c60:	4298      	cmp	r0, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c66:	4626      	mov	r6, r4
 8000c68:	1a1c      	subs	r4, r3, r0
 8000c6a:	fa1f f38e 	uxth.w	r3, lr
 8000c6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c72:	fb08 4410 	mls	r4, r8, r0, r4
 8000c76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7a:	fb00 f707 	mul.w	r7, r0, r7
 8000c7e:	429f      	cmp	r7, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x148>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x146>
 8000c8c:	429f      	cmp	r7, r3
 8000c8e:	f200 80b0 	bhi.w	8000df2 <__udivmoddi4+0x2a6>
 8000c92:	4620      	mov	r0, r4
 8000c94:	1bdb      	subs	r3, r3, r7
 8000c96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9a:	e7a5      	b.n	8000be8 <__udivmoddi4+0x9c>
 8000c9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ca0:	408b      	lsls	r3, r1
 8000ca2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ca6:	431f      	orrs	r7, r3
 8000ca8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cac:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb0:	ea43 030c 	orr.w	r3, r3, ip
 8000cb4:	40f4      	lsrs	r4, r6
 8000cb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cba:	0c38      	lsrs	r0, r7, #16
 8000cbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cc4:	fa1f fc87 	uxth.w	ip, r7
 8000cc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000ccc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cd4:	45a1      	cmp	r9, r4
 8000cd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x1a6>
 8000cdc:	193c      	adds	r4, r7, r4
 8000cde:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ce2:	f080 8084 	bcs.w	8000dee <__udivmoddi4+0x2a2>
 8000ce6:	45a1      	cmp	r9, r4
 8000ce8:	f240 8081 	bls.w	8000dee <__udivmoddi4+0x2a2>
 8000cec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	eba4 0409 	sub.w	r4, r4, r9
 8000cf6:	fa1f f983 	uxth.w	r9, r3
 8000cfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000d02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0x1d2>
 8000d0e:	193c      	adds	r4, r7, r4
 8000d10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d14:	d267      	bcs.n	8000de6 <__udivmoddi4+0x29a>
 8000d16:	45a4      	cmp	ip, r4
 8000d18:	d965      	bls.n	8000de6 <__udivmoddi4+0x29a>
 8000d1a:	3b02      	subs	r3, #2
 8000d1c:	443c      	add	r4, r7
 8000d1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d22:	fba0 9302 	umull	r9, r3, r0, r2
 8000d26:	eba4 040c 	sub.w	r4, r4, ip
 8000d2a:	429c      	cmp	r4, r3
 8000d2c:	46ce      	mov	lr, r9
 8000d2e:	469c      	mov	ip, r3
 8000d30:	d351      	bcc.n	8000dd6 <__udivmoddi4+0x28a>
 8000d32:	d04e      	beq.n	8000dd2 <__udivmoddi4+0x286>
 8000d34:	b155      	cbz	r5, 8000d4c <__udivmoddi4+0x200>
 8000d36:	ebb8 030e 	subs.w	r3, r8, lr
 8000d3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d42:	40cb      	lsrs	r3, r1
 8000d44:	431e      	orrs	r6, r3
 8000d46:	40cc      	lsrs	r4, r1
 8000d48:	e9c5 6400 	strd	r6, r4, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	e750      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f103 	lsr.w	r1, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d60:	4094      	lsls	r4, r2
 8000d62:	430c      	orrs	r4, r1
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d6c:	fa1f f78c 	uxth.w	r7, ip
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3110 	mls	r1, r8, r0, r3
 8000d78:	0c23      	lsrs	r3, r4, #16
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f107 	mul.w	r1, r0, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x24c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d8e:	d22c      	bcs.n	8000dea <__udivmoddi4+0x29e>
 8000d90:	4299      	cmp	r1, r3
 8000d92:	d92a      	bls.n	8000dea <__udivmoddi4+0x29e>
 8000d94:	3802      	subs	r0, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da0:	fb08 3311 	mls	r3, r8, r1, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb01 f307 	mul.w	r3, r1, r7
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x276>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000db8:	d213      	bcs.n	8000de2 <__udivmoddi4+0x296>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d911      	bls.n	8000de2 <__udivmoddi4+0x296>
 8000dbe:	3902      	subs	r1, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	1ae4      	subs	r4, r4, r3
 8000dc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc8:	e739      	b.n	8000c3e <__udivmoddi4+0xf2>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	e6f0      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e706      	b.n	8000be0 <__udivmoddi4+0x94>
 8000dd2:	45c8      	cmp	r8, r9
 8000dd4:	d2ae      	bcs.n	8000d34 <__udivmoddi4+0x1e8>
 8000dd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dde:	3801      	subs	r0, #1
 8000de0:	e7a8      	b.n	8000d34 <__udivmoddi4+0x1e8>
 8000de2:	4631      	mov	r1, r6
 8000de4:	e7ed      	b.n	8000dc2 <__udivmoddi4+0x276>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e799      	b.n	8000d1e <__udivmoddi4+0x1d2>
 8000dea:	4630      	mov	r0, r6
 8000dec:	e7d4      	b.n	8000d98 <__udivmoddi4+0x24c>
 8000dee:	46d6      	mov	lr, sl
 8000df0:	e77f      	b.n	8000cf2 <__udivmoddi4+0x1a6>
 8000df2:	4463      	add	r3, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e74d      	b.n	8000c94 <__udivmoddi4+0x148>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e70f      	b.n	8000c20 <__udivmoddi4+0xd4>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	e730      	b.n	8000c68 <__udivmoddi4+0x11c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <encoder_init>:
#include "encoder.h"

volatile int16_t encoder_value = 0;
volatile int16_t last_encoder_value = 0;

void encoder_init(TIM_HandleTypeDef *htim) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    HAL_TIM_Encoder_Start_IT(htim, TIM_CHANNEL_ALL); // Aktifkan mode encoder
 8000e14:	213c      	movs	r1, #60	@ 0x3c
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f004 f938 	bl	800508c <HAL_TIM_Encoder_Start_IT>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	f023 030f 	bic.w	r3, r3, #15
 8000e36:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f043 030c 	orr.w	r3, r3, #12
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	f043 030c 	orr.w	r3, r3, #12
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6818      	ldr	r0, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f107 0208 	add.w	r2, r7, #8
 8000e74:	2364      	movs	r3, #100	@ 0x64
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2304      	movs	r3, #4
 8000e7a:	f002 fe05 	bl	8003a88 <HAL_I2C_Master_Transmit>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af02      	add	r7, sp, #8
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 8000e92:	78fb      	ldrb	r3, [r7, #3]
 8000e94:	f023 030f 	bic.w	r3, r3, #15
 8000e98:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	011b      	lsls	r3, r3, #4
 8000e9e:	73bb      	strb	r3, [r7, #14]

    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f043 030d 	orr.w	r3, r3, #13
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f043 0309 	orr.w	r3, r3, #9
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	f043 030d 	orr.w	r3, r3, #13
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	f043 0309 	orr.w	r3, r3, #9
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	791b      	ldrb	r3, [r3, #4]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f107 0208 	add.w	r2, r7, #8
 8000ed6:	2364      	movs	r3, #100	@ 0x64
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2304      	movs	r3, #4
 8000edc:	f002 fdd4 	bl	8003a88 <HAL_I2C_Master_Transmit>
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 8000ef0:	2180      	movs	r1, #128	@ 0x80
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff96 	bl	8000e24 <lcd_send_cmd>
    for (int i = 0; i < 70; i++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e006      	b.n	8000f0c <lcd_clear+0x24>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 8000efe:	2120      	movs	r1, #32
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ffc0 	bl	8000e86 <lcd_send_data>
    for (int i = 0; i < 70; i++)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b45      	cmp	r3, #69	@ 0x45
 8000f10:	ddf5      	ble.n	8000efe <lcd_clear+0x16>
    }
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
    if (row == 0)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d104      	bne.n	8000f38 <lcd_gotoxy+0x1c>
        col |= 0x80;  // 1st row offset
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	e003      	b.n	8000f40 <lcd_gotoxy+0x24>
    else
        col |= 0xC0;  // 2nd row offset
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f3e:	60bb      	str	r3, [r7, #8]

    lcd_send_cmd(lcd, col);  // Send command to move the cursor
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4619      	mov	r1, r3
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff ff6c 	bl	8000e24 <lcd_send_cmd>
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000f5c:	2032      	movs	r0, #50	@ 0x32
 8000f5e:	f001 fd67 	bl	8002a30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f62:	2130      	movs	r1, #48	@ 0x30
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff5d 	bl	8000e24 <lcd_send_cmd>
    HAL_Delay(5);
 8000f6a:	2005      	movs	r0, #5
 8000f6c:	f001 fd60 	bl	8002a30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f70:	2130      	movs	r1, #48	@ 0x30
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff56 	bl	8000e24 <lcd_send_cmd>
    HAL_Delay(1);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f001 fd59 	bl	8002a30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000f7e:	2130      	movs	r1, #48	@ 0x30
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff4f 	bl	8000e24 <lcd_send_cmd>
    HAL_Delay(10);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f001 fd52 	bl	8002a30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff48 	bl	8000e24 <lcd_send_cmd>
    HAL_Delay(10);
 8000f94:	200a      	movs	r0, #10
 8000f96:	f001 fd4b 	bl	8002a30 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8000f9a:	2128      	movs	r1, #40	@ 0x28
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff41 	bl	8000e24 <lcd_send_cmd>
    HAL_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f001 fd44 	bl	8002a30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8000fa8:	2108      	movs	r1, #8
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff3a 	bl	8000e24 <lcd_send_cmd>
    HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f001 fd3d 	bl	8002a30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff33 	bl	8000e24 <lcd_send_cmd>
    HAL_Delay(2);
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f001 fd36 	bl	8002a30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000fc4:	2106      	movs	r1, #6
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff2c 	bl	8000e24 <lcd_send_cmd>
    HAL_Delay(1);
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f001 fd2f 	bl	8002a30 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 8000fd2:	210c      	movs	r1, #12
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff25 	bl	8000e24 <lcd_send_cmd>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 8000fec:	e007      	b.n	8000ffe <lcd_puts+0x1c>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	603a      	str	r2, [r7, #0]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff44 	bl	8000e86 <lcd_send_data>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f3      	bne.n	8000fee <lcd_puts+0xc>
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <debounce_check>:
#define DEBOUNCE_DELAY 300

uint32_t last_interrupt_time = 0;
volatile uint32_t last_time = 0;

uint8_t debounce_check() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();  // Dapatkan waktu sekarang
 8001016:	f001 fcff 	bl	8002a18 <HAL_GetTick>
 800101a:	6078      	str	r0, [r7, #4]
    if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY) {
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <debounce_check+0x30>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001028:	d904      	bls.n	8001034 <debounce_check+0x24>
        last_interrupt_time = current_time;  // Update waktu terakhir
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <debounce_check+0x30>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6013      	str	r3, [r2, #0]
        return 1;  // Tombol stabil
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <debounce_check+0x26>
    }
    return 0;  // Abaikan jika tombol masih bouncing
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001a0 	.word	0x200001a0

08001044 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0 && debounce_check()) {  // Filter tombol dengan debounce
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d156      	bne.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
 8001054:	f7ff ffdc 	bl	8001010 <debounce_check>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d051      	beq.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
        if (current_screen == 0) {  // Screen 1
 800105e:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d117      	bne.n	8001096 <HAL_GPIO_EXTI_Callback+0x52>
            switch (menu_position) {
 8001066:	4b2a      	ldr	r3, [pc, #168]	@ (8001110 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d008      	beq.n	8001080 <HAL_GPIO_EXTI_Callback+0x3c>
 800106e:	2b01      	cmp	r3, #1
 8001070:	d144      	bne.n	80010fc <HAL_GPIO_EXTI_Callback+0xb8>
                case 1:  // Menu "Set"
                    current_screen = 1;  // Pindah ke Screen 2
 8001072:	4b26      	ldr	r3, [pc, #152]	@ (800110c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
                    secondary_menu_pos = 0;  // Reset ke posisi menu awal pada Screen 2
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_GPIO_EXTI_Callback+0xd0>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
                    break;
 800107e:	e040      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>

                case 0:  // Menu "Start"
                    start_status = !start_status;  // Toggle Start/Stop
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf0c      	ite	eq
 8001088:	2301      	moveq	r3, #1
 800108a:	2300      	movne	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001092:	601a      	str	r2, [r3, #0]
                    break;
 8001094:	e035      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>

                default:
                    break;
            }
        }
        else if (current_screen == 1) {  // Screen 2
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d131      	bne.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
            if (is_selecting_scaler) {  // Jika sedang memilih scaler
 800109e:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <HAL_GPIO_EXTI_Callback+0xd8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_EXTI_Callback+0x72>
                current_scaler_index = selected_scaler_index;  // Simpan indeks scaler terakhir
 80010a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <HAL_GPIO_EXTI_Callback+0xdc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <HAL_GPIO_EXTI_Callback+0xe0>)
 80010ac:	6013      	str	r3, [r2, #0]
                is_selecting_scaler = 0;  // Keluar dari mode memilih scaler
 80010ae:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <HAL_GPIO_EXTI_Callback+0xd8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
                        break;
                }
            }
        }
    }
}
 80010b4:	e025      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
            }else if(is_selecting_frequency){
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <HAL_GPIO_EXTI_Callback+0xe4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_EXTI_Callback+0x8a>
            	last_set_value = set_value;
 80010be:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HAL_GPIO_EXTI_Callback+0xe8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001130 <HAL_GPIO_EXTI_Callback+0xec>)
 80010c4:	6013      	str	r3, [r2, #0]
            	is_selecting_frequency = 0;
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <HAL_GPIO_EXTI_Callback+0xe4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	e019      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
                switch (secondary_menu_pos) {
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_GPIO_EXTI_Callback+0xd0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d00e      	beq.n	80010f4 <HAL_GPIO_EXTI_Callback+0xb0>
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	dc12      	bgt.n	8001100 <HAL_GPIO_EXTI_Callback+0xbc>
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <HAL_GPIO_EXTI_Callback+0xa0>
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d004      	beq.n	80010ec <HAL_GPIO_EXTI_Callback+0xa8>
                        break;
 80010e2:	e00d      	b.n	8001100 <HAL_GPIO_EXTI_Callback+0xbc>
                        is_selecting_scaler = 1;  // Masuk ke mode memilih scaler
 80010e4:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HAL_GPIO_EXTI_Callback+0xd8>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
                        break;
 80010ea:	e00a      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
                    	is_selecting_frequency = 1;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_GPIO_EXTI_Callback+0xe4>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
                    	break;
 80010f2:	e006      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
                        current_screen = 0;  // Kembali ke Screen 1
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <HAL_GPIO_EXTI_Callback+0xc8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
                        break;
 80010fa:	e002      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
                    break;
 80010fc:	bf00      	nop
 80010fe:	e000      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0xbe>
                        break;
 8001100:	bf00      	nop
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200001b4 	.word	0x200001b4
 8001110:	200001a8 	.word	0x200001a8
 8001114:	200001b8 	.word	0x200001b8
 8001118:	200001b0 	.word	0x200001b0
 800111c:	200001bc 	.word	0x200001bc
 8001120:	200001c0 	.word	0x200001c0
 8001124:	200001c4 	.word	0x200001c4
 8001128:	200001c8 	.word	0x200001c8
 800112c:	20000000 	.word	0x20000000
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	encoder_value = __HAL_TIM_GET_COUNTER(htim);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_TIM_IC_CaptureCallback+0x20>)
 8001146:	801a      	strh	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	2000009c 	.word	0x2000009c

08001158 <ADC_ReadVoltage>:

float ADC_ReadVoltage(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
    // Mulai konversi ADC
    HAL_ADC_Start(&hadc1);
 800115c:	481c      	ldr	r0, [pc, #112]	@ (80011d0 <ADC_ReadVoltage+0x78>)
 800115e:	f001 fccf 	bl	8002b00 <HAL_ADC_Start>

    // Tunggu sampai konversi selesai
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001162:	2164      	movs	r1, #100	@ 0x64
 8001164:	481a      	ldr	r0, [pc, #104]	@ (80011d0 <ADC_ReadVoltage+0x78>)
 8001166:	f001 fdb2 	bl	8002cce <HAL_ADC_PollForConversion>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d121      	bne.n	80011b4 <ADC_ReadVoltage+0x5c>
    {
        // Ambil hasil konversi ADC
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001170:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <ADC_ReadVoltage+0x78>)
 8001172:	f001 fe37 	bl	8002de4 <HAL_ADC_GetValue>
 8001176:	4603      	mov	r3, r0
 8001178:	4a16      	ldr	r2, [pc, #88]	@ (80011d4 <ADC_ReadVoltage+0x7c>)
 800117a:	6013      	str	r3, [r2, #0]

        // Hitung tegangan berdasarkan nilai ADC (contoh: VREF = 3.3V, 12-bit ADC)
        voltage = (adcValue*11.79)/1880;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <ADC_ReadVoltage+0x7c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9c7 	bl	8000514 <__aeabi_ui2d>
 8001186:	a310      	add	r3, pc, #64	@ (adr r3, 80011c8 <ADC_ReadVoltage+0x70>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff fa3c 	bl	8000608 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <ADC_ReadVoltage+0x80>)
 800119e:	f7ff fb5d 	bl	800085c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc67 	bl	8000a7c <__aeabi_d2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <ADC_ReadVoltage+0x84>)
 80011b2:	6013      	str	r3, [r2, #0]
    }

    // Matikan ADC setelah selesai
    HAL_ADC_Stop(&hadc1);
 80011b4:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <ADC_ReadVoltage+0x78>)
 80011b6:	f001 fd57 	bl	8002c68 <HAL_ADC_Stop>

    return voltage;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <ADC_ReadVoltage+0x84>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	ee07 3a90 	vmov	s15, r3
}
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	e147ae14 	.word	0xe147ae14
 80011cc:	4027947a 	.word	0x4027947a
 80011d0:	200000a0 	.word	0x200000a0
 80011d4:	20000190 	.word	0x20000190
 80011d8:	409d6000 	.word	0x409d6000
 80011dc:	20000194 	.word	0x20000194

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e6:	f001 fbb1 	bl	800294c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ea:	f000 f88f 	bl	800130c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ee:	f000 f9cb 	bl	8001588 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011f2:	f000 f8f5 	bl	80013e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011f6:	f000 f945 	bl	8001484 <MX_I2C1_Init>
  MX_TIM3_Init();
 80011fa:	f000 f971 	bl	80014e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  lcd1.hi2c = &hi2c1;
 80011fe:	4b39      	ldr	r3, [pc, #228]	@ (80012e4 <main+0x104>)
 8001200:	4a39      	ldr	r2, [pc, #228]	@ (80012e8 <main+0x108>)
 8001202:	601a      	str	r2, [r3, #0]
  lcd1.address = 0x4E;
 8001204:	4b37      	ldr	r3, [pc, #220]	@ (80012e4 <main+0x104>)
 8001206:	224e      	movs	r2, #78	@ 0x4e
 8001208:	711a      	strb	r2, [r3, #4]
  lcd_init(&lcd1);
 800120a:	4836      	ldr	r0, [pc, #216]	@ (80012e4 <main+0x104>)
 800120c:	f7ff fea2 	bl	8000f54 <lcd_init>

  encoder_init(&htim3);
 8001210:	4836      	ldr	r0, [pc, #216]	@ (80012ec <main+0x10c>)
 8001212:	f7ff fdfb 	bl	8000e0c <encoder_init>
  menu_init();
 8001216:	f000 fa35 	bl	8001684 <menu_init>



  const int32_t correction = 978;
 800121a:	f240 33d2 	movw	r3, #978	@ 0x3d2
 800121e:	607b      	str	r3, [r7, #4]
  si5351_Init(correction);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fefd 	bl	8002020 <si5351_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      menu_update();   // Update logika menu
 8001226:	f000 fa49 	bl	80016bc <menu_update>
      menu_display();  // Tampilkan menu
 800122a:	f000 fb91 	bl	8001950 <menu_display>
	  if(HAL_GetTick()-adc_time >= 500)
 800122e:	f001 fbf3 	bl	8002a18 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <main+0x110>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800123e:	d30b      	bcc.n	8001258 <main+0x78>
	  {
		  sensed_voltage = ADC_ReadVoltage();
 8001240:	f7ff ff8a 	bl	8001158 <ADC_ReadVoltage>
 8001244:	eef0 7a40 	vmov.f32	s15, s0
 8001248:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <main+0x114>)
 800124a:	edc3 7a00 	vstr	s15, [r3]
		  adc_time = HAL_GetTick();
 800124e:	f001 fbe3 	bl	8002a18 <HAL_GetTick>
 8001252:	4603      	mov	r3, r0
 8001254:	4a26      	ldr	r2, [pc, #152]	@ (80012f0 <main+0x110>)
 8001256:	6013      	str	r3, [r2, #0]
	  }

      if (start_status == 1)
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <main+0x118>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d133      	bne.n	80012c8 <main+0xe8>

      {
    	  if (last_set_value != previous_set_value)
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <main+0x11c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <main+0x120>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d00f      	beq.n	800128c <main+0xac>
    	     {
    	         // Jika berubah, lakukan setup untuk CLK0 dan CLK2
    	         si5351_SetupCLK0(last_set_value, SI5351_DRIVE_STRENGTH_4MA);
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <main+0x11c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f001 f8c4 	bl	8002400 <si5351_SetupCLK0>
    	         si5351_SetupCLK2(last_set_value, SI5351_DRIVE_STRENGTH_4MA);
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <main+0x11c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	4618      	mov	r0, r3
 8001280:	f001 f8df 	bl	8002442 <si5351_SetupCLK2>


    	         // Update nilai terakhir
    	         previous_set_value = last_set_value;
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <main+0x11c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a1d      	ldr	r2, [pc, #116]	@ (8001300 <main+0x120>)
 800128a:	6013      	str	r3, [r2, #0]
    	     }
    	  si5351_EnableOutputs((1<<0) | (1<<2));
 800128c:	2005      	movs	r0, #5
 800128e:	f001 f8f9 	bl	8002484 <si5351_EnableOutputs>
    	  if(HAL_GetTick()-last_time >= 500)
 8001292:	f001 fbc1 	bl	8002a18 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <main+0x124>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012a2:	d31a      	bcc.n	80012da <main+0xfa>
    	  {
    		  HAL_GPIO_TogglePin(GPIOC, LED_PIN_Pin);
 80012a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a8:	4817      	ldr	r0, [pc, #92]	@ (8001308 <main+0x128>)
 80012aa:	f002 fa76 	bl	800379a <HAL_GPIO_TogglePin>
    		  sensed_voltage = ADC_ReadVoltage();
 80012ae:	f7ff ff53 	bl	8001158 <ADC_ReadVoltage>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <main+0x114>)
 80012b8:	edc3 7a00 	vstr	s15, [r3]
    		  last_time = HAL_GetTick();
 80012bc:	f001 fbac 	bl	8002a18 <HAL_GetTick>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <main+0x124>)
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e008      	b.n	80012da <main+0xfa>
    	  }
      }
      else
      {
    	  si5351_EnableOutputs(0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f001 f8db 	bl	8002484 <si5351_EnableOutputs>
    	  HAL_GPIO_WritePin(GPIOC, LED_PIN_Pin, SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <main+0x128>)
 80012d6:	f002 fa47 	bl	8003768 <HAL_GPIO_WritePin>
      }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_Delay(1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f001 fba8 	bl	8002a30 <HAL_Delay>
      menu_update();   // Update logika menu
 80012e0:	e7a1      	b.n	8001226 <main+0x46>
 80012e2:	bf00      	nop
 80012e4:	20000184 	.word	0x20000184
 80012e8:	200000e8 	.word	0x200000e8
 80012ec:	2000013c 	.word	0x2000013c
 80012f0:	2000019c 	.word	0x2000019c
 80012f4:	20000198 	.word	0x20000198
 80012f8:	200001b0 	.word	0x200001b0
 80012fc:	20000004 	.word	0x20000004
 8001300:	2000018c 	.word	0x2000018c
 8001304:	200001a4 	.word	0x200001a4
 8001308:	40020800 	.word	0x40020800

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b094      	sub	sp, #80	@ 0x50
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	2230      	movs	r2, #48	@ 0x30
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f004 f9d0 	bl	80056c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <SystemClock_Config+0xcc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <SystemClock_Config+0xcc>)
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001340:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <SystemClock_Config+0xcc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <SystemClock_Config+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001358:	4a20      	ldr	r2, [pc, #128]	@ (80013dc <SystemClock_Config+0xd0>)
 800135a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <SystemClock_Config+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136c:	2302      	movs	r3, #2
 800136e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001374:	2310      	movs	r3, #16
 8001376:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800137c:	2300      	movs	r3, #0
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001380:	2308      	movs	r3, #8
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001384:	2354      	movs	r3, #84	@ 0x54
 8001386:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001388:	2302      	movs	r3, #2
 800138a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	4618      	mov	r0, r3
 8001396:	f003 f98f 	bl	80046b8 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013a0:	f000 f96a 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2102      	movs	r1, #2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fbf1 	bl	8004ba8 <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013cc:	f000 f954 	bl	8001678 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3750      	adds	r7, #80	@ 0x50
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_ADC1_Init+0x98>)
 80013f4:	4a21      	ldr	r2, [pc, #132]	@ (800147c <MX_ADC1_Init+0x9c>)
 80013f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_ADC1_Init+0x98>)
 80013fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_ADC1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_ADC1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_ADC1_Init+0x98>)
 8001422:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <MX_ADC1_Init+0xa0>)
 8001424:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_ADC1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_ADC1_Init+0x98>)
 800142e:	2201      	movs	r2, #1
 8001430:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_ADC1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_ADC1_Init+0x98>)
 800143c:	2201      	movs	r2, #1
 800143e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001440:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_ADC1_Init+0x98>)
 8001442:	f001 fb19 	bl	8002a78 <HAL_ADC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800144c:	f000 f914 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001450:	2301      	movs	r3, #1
 8001452:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_ADC1_Init+0x98>)
 8001462:	f001 fccd 	bl	8002e00 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800146c:	f000 f904 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200000a0 	.word	0x200000a0
 800147c:	40012000 	.word	0x40012000
 8001480:	0f000001 	.word	0x0f000001

08001484 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MX_I2C1_Init+0x50>)
 800148a:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <MX_I2C1_Init+0x54>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_I2C1_Init+0x50>)
 8001490:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <MX_I2C1_Init+0x58>)
 8001492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014c2:	f002 f99d 	bl	8003800 <HAL_I2C_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014cc:	f000 f8d4 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200000e8 	.word	0x200000e8
 80014d8:	40005400 	.word	0x40005400
 80014dc:	000186a0 	.word	0x000186a0

080014e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2224      	movs	r2, #36	@ 0x24
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f004 f8e6 	bl	80056c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <MX_TIM3_Init+0xa0>)
 80014fe:	4a21      	ldr	r2, [pc, #132]	@ (8001584 <MX_TIM3_Init+0xa4>)
 8001500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <MX_TIM3_Init+0xa0>)
 8001504:	2200      	movs	r2, #0
 8001506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <MX_TIM3_Init+0xa0>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <MX_TIM3_Init+0xa0>)
 8001510:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001514:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_TIM3_Init+0xa0>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_TIM3_Init+0xa0>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001522:	2301      	movs	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800152a:	2301      	movs	r3, #1
 800152c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800153a:	2301      	movs	r3, #1
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	4619      	mov	r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <MX_TIM3_Init+0xa0>)
 800154e:	f003 fcf7 	bl	8004f40 <HAL_TIM_Encoder_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001558:	f000 f88e 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_TIM3_Init+0xa0>)
 800156a:	f004 f807 	bl	800557c <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001574:	f000 f880 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3730      	adds	r7, #48	@ 0x30
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000013c 	.word	0x2000013c
 8001584:	40000400 	.word	0x40000400

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b32      	ldr	r3, [pc, #200]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a31      	ldr	r2, [pc, #196]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b2f      	ldr	r3, [pc, #188]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b28      	ldr	r3, [pc, #160]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a23      	ldr	r2, [pc, #140]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b21      	ldr	r3, [pc, #132]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <MX_GPIO_Init+0xe4>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <MX_GPIO_Init+0xe4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001614:	4816      	ldr	r0, [pc, #88]	@ (8001670 <MX_GPIO_Init+0xe8>)
 8001616:	f002 f8a7 	bl	8003768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 800161a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	480f      	ldr	r0, [pc, #60]	@ (8001670 <MX_GPIO_Init+0xe8>)
 8001634:	f001 ff14 	bl	8003460 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8001638:	2301      	movs	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800163c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001642:	2301      	movs	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4809      	ldr	r0, [pc, #36]	@ (8001674 <MX_GPIO_Init+0xec>)
 800164e:	f001 ff07 	bl	8003460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2006      	movs	r0, #6
 8001658:	f001 fecb 	bl	80033f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800165c:	2006      	movs	r0, #6
 800165e:	f001 fee4 	bl	800342a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	@ 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020000 	.word	0x40020000

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <menu_init>:
uint32_t last_blink_time = 0;  // Waktu terakhir blink
int blink_state = 1;           // 1: Tampilkan "SCALE", 0: Hapus "SCALE"



void menu_init(void) {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
    menu_position = 0;
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <menu_init+0x28>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
    setting_mode = 0;
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <menu_init+0x2c>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    set_value = 8000;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <menu_init+0x30>)
 8001696:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800169a:	601a      	str	r2, [r3, #0]
    start_status = 0;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <menu_init+0x34>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	200001a8 	.word	0x200001a8
 80016b0:	200001ac 	.word	0x200001ac
 80016b4:	20000000 	.word	0x20000000
 80016b8:	200001b0 	.word	0x200001b0

080016bc <menu_update>:

void menu_update(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80016c2:	f001 f9a9 	bl	8002a18 <HAL_GetTick>
 80016c6:	6078      	str	r0, [r7, #4]
    uint32_t delta_time = current_time - last_update_time;
 80016c8:	4b7e      	ldr	r3, [pc, #504]	@ (80018c4 <menu_update+0x208>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	603b      	str	r3, [r7, #0]

    if (is_selecting_scaler)
 80016d2:	4b7d      	ldr	r3, [pc, #500]	@ (80018c8 <menu_update+0x20c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d044      	beq.n	8001764 <menu_update+0xa8>
    {  // Jika sedang memilih scaler
    	if(current_time - last_blink_time >= 500)
 80016da:	4b7c      	ldr	r3, [pc, #496]	@ (80018cc <menu_update+0x210>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016e6:	d30c      	bcc.n	8001702 <menu_update+0x46>
    	{
    		blink_state = !blink_state;  // Toggle blink state
 80016e8:	4b79      	ldr	r3, [pc, #484]	@ (80018d0 <menu_update+0x214>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b75      	ldr	r3, [pc, #468]	@ (80018d0 <menu_update+0x214>)
 80016fa:	601a      	str	r2, [r3, #0]
    		last_blink_time = current_time;
 80016fc:	4a73      	ldr	r2, [pc, #460]	@ (80018cc <menu_update+0x210>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
    	}
        if (encoder_value > last_encoder_value) {
 8001702:	4b74      	ldr	r3, [pc, #464]	@ (80018d4 <menu_update+0x218>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b21a      	sxth	r2, r3
 8001708:	4b73      	ldr	r3, [pc, #460]	@ (80018d8 <menu_update+0x21c>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b21b      	sxth	r3, r3
 800170e:	429a      	cmp	r2, r3
 8001710:	dd0e      	ble.n	8001730 <menu_update+0x74>
            if (selected_scaler_index < (sizeof(scaler_values) / sizeof(scaler_values[0])) - 1) {
 8001712:	4b72      	ldr	r3, [pc, #456]	@ (80018dc <menu_update+0x220>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b04      	cmp	r3, #4
 8001718:	d804      	bhi.n	8001724 <menu_update+0x68>
                selected_scaler_index++;  // Pindah ke scaler berikutnya
 800171a:	4b70      	ldr	r3, [pc, #448]	@ (80018dc <menu_update+0x220>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a6e      	ldr	r2, [pc, #440]	@ (80018dc <menu_update+0x220>)
 8001722:	6013      	str	r3, [r2, #0]
            }
            last_encoder_value = encoder_value;
 8001724:	4b6b      	ldr	r3, [pc, #428]	@ (80018d4 <menu_update+0x218>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b6b      	ldr	r3, [pc, #428]	@ (80018d8 <menu_update+0x21c>)
 800172c:	801a      	strh	r2, [r3, #0]
 800172e:	e015      	b.n	800175c <menu_update+0xa0>
        } else if (encoder_value < last_encoder_value) {
 8001730:	4b68      	ldr	r3, [pc, #416]	@ (80018d4 <menu_update+0x218>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	b21a      	sxth	r2, r3
 8001736:	4b68      	ldr	r3, [pc, #416]	@ (80018d8 <menu_update+0x21c>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	b21b      	sxth	r3, r3
 800173c:	429a      	cmp	r2, r3
 800173e:	da0d      	bge.n	800175c <menu_update+0xa0>
            if (selected_scaler_index > 0) {
 8001740:	4b66      	ldr	r3, [pc, #408]	@ (80018dc <menu_update+0x220>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	dd04      	ble.n	8001752 <menu_update+0x96>
                selected_scaler_index--;  // Pindah ke scaler sebelumnya
 8001748:	4b64      	ldr	r3, [pc, #400]	@ (80018dc <menu_update+0x220>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	4a63      	ldr	r2, [pc, #396]	@ (80018dc <menu_update+0x220>)
 8001750:	6013      	str	r3, [r2, #0]
            }
            last_encoder_value = encoder_value;
 8001752:	4b60      	ldr	r3, [pc, #384]	@ (80018d4 <menu_update+0x218>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b21a      	sxth	r2, r3
 8001758:	4b5f      	ldr	r3, [pc, #380]	@ (80018d8 <menu_update+0x21c>)
 800175a:	801a      	strh	r2, [r3, #0]
        }
        last_update_time = current_time;  // Perbarui waktu terakhir
 800175c:	4a59      	ldr	r2, [pc, #356]	@ (80018c4 <menu_update+0x208>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
    	} else if (encoder_value < last_encoder_value) {  // Bergerak ke kiri
    	    secondary_menu_pos = (secondary_menu_pos - 1 + 3) % 3;  // Warping: jika mencapai 0, kembali ke 2
    	    last_encoder_value = encoder_value;  // Update posisi terakhir
    	}
    }
}
 8001762:	e0e8      	b.n	8001936 <menu_update+0x27a>
    else if(is_selecting_frequency)
 8001764:	4b5e      	ldr	r3, [pc, #376]	@ (80018e0 <menu_update+0x224>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d059      	beq.n	8001820 <menu_update+0x164>
        if (current_time - last_blink_time >= 500)
 800176c:	4b57      	ldr	r3, [pc, #348]	@ (80018cc <menu_update+0x210>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001778:	d30c      	bcc.n	8001794 <menu_update+0xd8>
            blink_state = !blink_state;  // Toggle blink state
 800177a:	4b55      	ldr	r3, [pc, #340]	@ (80018d0 <menu_update+0x214>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf0c      	ite	eq
 8001782:	2301      	moveq	r3, #1
 8001784:	2300      	movne	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	4b51      	ldr	r3, [pc, #324]	@ (80018d0 <menu_update+0x214>)
 800178c:	601a      	str	r2, [r3, #0]
            last_blink_time = current_time;
 800178e:	4a4f      	ldr	r2, [pc, #316]	@ (80018cc <menu_update+0x210>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6013      	str	r3, [r2, #0]
        if (encoder_value > last_encoder_value)
 8001794:	4b4f      	ldr	r3, [pc, #316]	@ (80018d4 <menu_update+0x218>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b4f      	ldr	r3, [pc, #316]	@ (80018d8 <menu_update+0x21c>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dd19      	ble.n	80017d8 <menu_update+0x11c>
            set_value += scaler_values[selected_scaler_index];
 80017a4:	4b4d      	ldr	r3, [pc, #308]	@ (80018dc <menu_update+0x220>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a4e      	ldr	r2, [pc, #312]	@ (80018e4 <menu_update+0x228>)
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b4d      	ldr	r3, [pc, #308]	@ (80018e8 <menu_update+0x22c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a4c      	ldr	r2, [pc, #304]	@ (80018e8 <menu_update+0x22c>)
 80017b8:	6013      	str	r3, [r2, #0]
            if (set_value > MAX_SET_VALUE)  // Jika melebihi batas maksimum
 80017ba:	4b4b      	ldr	r3, [pc, #300]	@ (80018e8 <menu_update+0x22c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a4b      	ldr	r2, [pc, #300]	@ (80018ec <menu_update+0x230>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d903      	bls.n	80017cc <menu_update+0x110>
                set_value = MIN_SET_VALUE;  // Lompat ke batas minimum
 80017c4:	4b48      	ldr	r3, [pc, #288]	@ (80018e8 <menu_update+0x22c>)
 80017c6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80017ca:	601a      	str	r2, [r3, #0]
            last_encoder_value = encoder_value;
 80017cc:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <menu_update+0x218>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b41      	ldr	r3, [pc, #260]	@ (80018d8 <menu_update+0x21c>)
 80017d4:	801a      	strh	r2, [r3, #0]
 80017d6:	e01f      	b.n	8001818 <menu_update+0x15c>
        else if (encoder_value < last_encoder_value)
 80017d8:	4b3e      	ldr	r3, [pc, #248]	@ (80018d4 <menu_update+0x218>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b21a      	sxth	r2, r3
 80017de:	4b3e      	ldr	r3, [pc, #248]	@ (80018d8 <menu_update+0x21c>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	429a      	cmp	r2, r3
 80017e6:	da17      	bge.n	8001818 <menu_update+0x15c>
            if (set_value <= MIN_SET_VALUE)  // Jika kurang dari batas minimum
 80017e8:	4b3f      	ldr	r3, [pc, #252]	@ (80018e8 <menu_update+0x22c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80017f0:	d803      	bhi.n	80017fa <menu_update+0x13e>
                set_value = MAX_SET_VALUE;  // Lompat ke batas maksimum
 80017f2:	4b3d      	ldr	r3, [pc, #244]	@ (80018e8 <menu_update+0x22c>)
 80017f4:	4a3d      	ldr	r2, [pc, #244]	@ (80018ec <menu_update+0x230>)
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e009      	b.n	800180e <menu_update+0x152>
                set_value -= scaler_values[selected_scaler_index];
 80017fa:	4b38      	ldr	r3, [pc, #224]	@ (80018dc <menu_update+0x220>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a39      	ldr	r2, [pc, #228]	@ (80018e4 <menu_update+0x228>)
 8001800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001804:	4b38      	ldr	r3, [pc, #224]	@ (80018e8 <menu_update+0x22c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	4a37      	ldr	r2, [pc, #220]	@ (80018e8 <menu_update+0x22c>)
 800180c:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <menu_update+0x218>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b21a      	sxth	r2, r3
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <menu_update+0x21c>)
 8001816:	801a      	strh	r2, [r3, #0]
        last_update_time = current_time;  // Perbarui waktu terakhir
 8001818:	4a2a      	ldr	r2, [pc, #168]	@ (80018c4 <menu_update+0x208>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
}
 800181e:	e08a      	b.n	8001936 <menu_update+0x27a>
    else if (current_screen == 0)
 8001820:	4b33      	ldr	r3, [pc, #204]	@ (80018f0 <menu_update+0x234>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d12d      	bne.n	8001884 <menu_update+0x1c8>
        if (encoder_value > last_encoder_value) {  // Bergerak ke kanan
 8001828:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <menu_update+0x218>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b21a      	sxth	r2, r3
 800182e:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <menu_update+0x21c>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	b21b      	sxth	r3, r3
 8001834:	429a      	cmp	r2, r3
 8001836:	dd0e      	ble.n	8001856 <menu_update+0x19a>
            if (menu_position < MAX_MENU) {       // Batas kanan
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <menu_update+0x238>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	dc04      	bgt.n	800184a <menu_update+0x18e>
                menu_position++;
 8001840:	4b2c      	ldr	r3, [pc, #176]	@ (80018f4 <menu_update+0x238>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a2b      	ldr	r2, [pc, #172]	@ (80018f4 <menu_update+0x238>)
 8001848:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;  // Update posisi terakhir
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <menu_update+0x218>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	b21a      	sxth	r2, r3
 8001850:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <menu_update+0x21c>)
 8001852:	801a      	strh	r2, [r3, #0]
}
 8001854:	e06f      	b.n	8001936 <menu_update+0x27a>
        } else if (encoder_value < last_encoder_value) {  // Bergerak ke kiri
 8001856:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <menu_update+0x218>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	b21a      	sxth	r2, r3
 800185c:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <menu_update+0x21c>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b21b      	sxth	r3, r3
 8001862:	429a      	cmp	r2, r3
 8001864:	da67      	bge.n	8001936 <menu_update+0x27a>
            if (menu_position > MIN_MENU) {       // Batas kiri
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <menu_update+0x238>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	dd04      	ble.n	8001878 <menu_update+0x1bc>
                menu_position--;
 800186e:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <menu_update+0x238>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	4a1f      	ldr	r2, [pc, #124]	@ (80018f4 <menu_update+0x238>)
 8001876:	6013      	str	r3, [r2, #0]
            last_encoder_value = encoder_value;  // Update posisi terakhir
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <menu_update+0x218>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	b21a      	sxth	r2, r3
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <menu_update+0x21c>)
 8001880:	801a      	strh	r2, [r3, #0]
}
 8001882:	e058      	b.n	8001936 <menu_update+0x27a>
    else if (current_screen == 1)
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <menu_update+0x234>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d154      	bne.n	8001936 <menu_update+0x27a>
    	if (encoder_value > last_encoder_value) {  // Bergerak ke kanan
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <menu_update+0x218>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b21a      	sxth	r2, r3
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <menu_update+0x21c>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b21b      	sxth	r3, r3
 8001898:	429a      	cmp	r2, r3
 800189a:	dd31      	ble.n	8001900 <menu_update+0x244>
    	    secondary_menu_pos = (secondary_menu_pos + 1) % 3;  // Warping: jika mencapai 2, kembali ke 0
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <menu_update+0x23c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	1c59      	adds	r1, r3, #1
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <menu_update+0x240>)
 80018a4:	fb83 3201 	smull	r3, r2, r3, r1
 80018a8:	17cb      	asrs	r3, r1, #31
 80018aa:	1ad2      	subs	r2, r2, r3
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	1aca      	subs	r2, r1, r3
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <menu_update+0x23c>)
 80018b6:	601a      	str	r2, [r3, #0]
    	    last_encoder_value = encoder_value;  // Update posisi terakhir
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <menu_update+0x218>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b21a      	sxth	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <menu_update+0x21c>)
 80018c0:	801a      	strh	r2, [r3, #0]
}
 80018c2:	e038      	b.n	8001936 <menu_update+0x27a>
 80018c4:	200001cc 	.word	0x200001cc
 80018c8:	200001bc 	.word	0x200001bc
 80018cc:	200001d0 	.word	0x200001d0
 80018d0:	20000020 	.word	0x20000020
 80018d4:	2000009c 	.word	0x2000009c
 80018d8:	2000009e 	.word	0x2000009e
 80018dc:	200001c0 	.word	0x200001c0
 80018e0:	200001c8 	.word	0x200001c8
 80018e4:	08006050 	.word	0x08006050
 80018e8:	20000000 	.word	0x20000000
 80018ec:	09896800 	.word	0x09896800
 80018f0:	200001b4 	.word	0x200001b4
 80018f4:	200001a8 	.word	0x200001a8
 80018f8:	200001b8 	.word	0x200001b8
 80018fc:	55555556 	.word	0x55555556
    	} else if (encoder_value < last_encoder_value) {  // Bergerak ke kiri
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <menu_update+0x284>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b21a      	sxth	r2, r3
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <menu_update+0x288>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	b21b      	sxth	r3, r3
 800190c:	429a      	cmp	r2, r3
 800190e:	da12      	bge.n	8001936 <menu_update+0x27a>
    	    secondary_menu_pos = (secondary_menu_pos - 1 + 3) % 3;  // Warping: jika mencapai 0, kembali ke 2
 8001910:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <menu_update+0x28c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1c99      	adds	r1, r3, #2
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <menu_update+0x290>)
 8001918:	fb83 3201 	smull	r3, r2, r3, r1
 800191c:	17cb      	asrs	r3, r1, #31
 800191e:	1ad2      	subs	r2, r2, r3
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	1aca      	subs	r2, r1, r3
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <menu_update+0x28c>)
 800192a:	601a      	str	r2, [r3, #0]
    	    last_encoder_value = encoder_value;  // Update posisi terakhir
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <menu_update+0x284>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <menu_update+0x288>)
 8001934:	801a      	strh	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000009c 	.word	0x2000009c
 8001944:	2000009e 	.word	0x2000009e
 8001948:	200001b8 	.word	0x200001b8
 800194c:	55555556 	.word	0x55555556

08001950 <menu_display>:

void menu_display(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b0aa      	sub	sp, #168	@ 0xa8
 8001954:	af00      	add	r7, sp, #0
    if (current_screen != last_screen) {
 8001956:	4b99      	ldr	r3, [pc, #612]	@ (8001bbc <menu_display+0x26c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b99      	ldr	r3, [pc, #612]	@ (8001bc0 <menu_display+0x270>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d015      	beq.n	800198e <menu_display+0x3e>
        lcd_clear(&lcd1);  // Bersihkan layar hanya saat berpindah screen
 8001962:	4898      	ldr	r0, [pc, #608]	@ (8001bc4 <menu_display+0x274>)
 8001964:	f7ff fac0 	bl	8000ee8 <lcd_clear>
        last_screen = current_screen;  // Simpan screen terakhir
 8001968:	4b94      	ldr	r3, [pc, #592]	@ (8001bbc <menu_display+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a94      	ldr	r2, [pc, #592]	@ (8001bc0 <menu_display+0x270>)
 800196e:	6013      	str	r3, [r2, #0]
        if (current_screen == 0) {
 8001970:	4b92      	ldr	r3, [pc, #584]	@ (8001bbc <menu_display+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <menu_display+0x3e>
            last_start_status = -1;  // Paksa pembaruan ulang tulisan "START"/"STOP"
 8001978:	4b93      	ldr	r3, [pc, #588]	@ (8001bc8 <menu_display+0x278>)
 800197a:	f04f 32ff 	mov.w	r2, #4294967295
 800197e:	601a      	str	r2, [r3, #0]
            last_menu_position = -1;  // Paksa pembaruan ulang posisi menu
 8001980:	4b92      	ldr	r3, [pc, #584]	@ (8001bcc <menu_display+0x27c>)
 8001982:	f04f 32ff 	mov.w	r2, #4294967295
 8001986:	601a      	str	r2, [r3, #0]
            is_first_update = 1;
 8001988:	4b91      	ldr	r3, [pc, #580]	@ (8001bd0 <menu_display+0x280>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
        }
    }

    if (current_screen == 0) {  // Screen awal
 800198e:	4b8b      	ldr	r3, [pc, #556]	@ (8001bbc <menu_display+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f040 80df 	bne.w	8001b56 <menu_display+0x206>
        lcd_gotoxy(&lcd1, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	4889      	ldr	r0, [pc, #548]	@ (8001bc4 <menu_display+0x274>)
 800199e:	f7ff fabd 	bl	8000f1c <lcd_gotoxy>
        lcd_puts(&lcd1, "F:");
 80019a2:	498c      	ldr	r1, [pc, #560]	@ (8001bd4 <menu_display+0x284>)
 80019a4:	4887      	ldr	r0, [pc, #540]	@ (8001bc4 <menu_display+0x274>)
 80019a6:	f7ff fb1c 	bl	8000fe2 <lcd_puts>


        char set_value_buffer[20];
        format_number(last_set_value, set_value_buffer);
 80019aa:	4b8b      	ldr	r3, [pc, #556]	@ (8001bd8 <menu_display+0x288>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fad7 	bl	8001f68 <format_number>
        strcat(set_value_buffer,"Hz");
 80019ba:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fc0e 	bl	80001e0 <strlen>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80019cc:	4413      	add	r3, r2
 80019ce:	4a83      	ldr	r2, [pc, #524]	@ (8001bdc <menu_display+0x28c>)
 80019d0:	8811      	ldrh	r1, [r2, #0]
 80019d2:	7892      	ldrb	r2, [r2, #2]
 80019d4:	8019      	strh	r1, [r3, #0]
 80019d6:	709a      	strb	r2, [r3, #2]
        lcd_gotoxy(&lcd1, 2, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2102      	movs	r1, #2
 80019dc:	4879      	ldr	r0, [pc, #484]	@ (8001bc4 <menu_display+0x274>)
 80019de:	f7ff fa9d 	bl	8000f1c <lcd_gotoxy>
        lcd_puts(&lcd1, set_value_buffer);
 80019e2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80019e6:	4619      	mov	r1, r3
 80019e8:	4876      	ldr	r0, [pc, #472]	@ (8001bc4 <menu_display+0x274>)
 80019ea:	f7ff fafa 	bl	8000fe2 <lcd_puts>

        lcd_gotoxy(&lcd1, 0, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2100      	movs	r1, #0
 80019f2:	4874      	ldr	r0, [pc, #464]	@ (8001bc4 <menu_display+0x274>)
 80019f4:	f7ff fa92 	bl	8000f1c <lcd_gotoxy>
        lcd_puts(&lcd1, "V:");
 80019f8:	4979      	ldr	r1, [pc, #484]	@ (8001be0 <menu_display+0x290>)
 80019fa:	4872      	ldr	r0, [pc, #456]	@ (8001bc4 <menu_display+0x274>)
 80019fc:	f7ff faf1 	bl	8000fe2 <lcd_puts>
        lcd_gotoxy(&lcd1, 2, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2102      	movs	r1, #2
 8001a04:	486f      	ldr	r0, [pc, #444]	@ (8001bc4 <menu_display+0x274>)
 8001a06:	f7ff fa89 	bl	8000f1c <lcd_gotoxy>
        char voltage_buffer[20];
        int integer_part = (int)sensed_voltage;               // Bagian integer
 8001a0a:	4b76      	ldr	r3, [pc, #472]	@ (8001be4 <menu_display+0x294>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a14:	ee17 3a90 	vmov	r3, s15
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        int decimal_part = (int)((sensed_voltage - integer_part) * 10);  // Bagian desimal (1 digit)
 8001a1c:	4b71      	ldr	r3, [pc, #452]	@ (8001be4 <menu_display+0x294>)
 8001a1e:	ed93 7a00 	vldr	s14, [r3]
 8001a22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a32:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

        if (integer_part < 10) {
 8001a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a4a:	2b09      	cmp	r3, #9
 8001a4c:	dc09      	bgt.n	8001a62 <menu_display+0x112>
            // Jika nilai integer kurang dari 10, tampilkan dengan angka nol di depan
            sprintf(voltage_buffer, "0%d.%d", integer_part, decimal_part);
 8001a4e:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8001a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a56:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001a5a:	4963      	ldr	r1, [pc, #396]	@ (8001be8 <menu_display+0x298>)
 8001a5c:	f003 fe10 	bl	8005680 <siprintf>
 8001a60:	e008      	b.n	8001a74 <menu_display+0x124>
        } else {
            // Jika nilai integer sudah dua digit, tampilkan langsung
            sprintf(voltage_buffer, "%d.%d", integer_part, decimal_part);
 8001a62:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8001a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a6a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001a6e:	495f      	ldr	r1, [pc, #380]	@ (8001bec <menu_display+0x29c>)
 8001a70:	f003 fe06 	bl	8005680 <siprintf>
        }
        lcd_puts(&lcd1, voltage_buffer);
 8001a74:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4852      	ldr	r0, [pc, #328]	@ (8001bc4 <menu_display+0x274>)
 8001a7c:	f7ff fab1 	bl	8000fe2 <lcd_puts>

        lcd_gotoxy(&lcd1, 13, 1);
 8001a80:	2201      	movs	r2, #1
 8001a82:	210d      	movs	r1, #13
 8001a84:	484f      	ldr	r0, [pc, #316]	@ (8001bc4 <menu_display+0x274>)
 8001a86:	f7ff fa49 	bl	8000f1c <lcd_gotoxy>
        lcd_puts(&lcd1, "SET");
 8001a8a:	4959      	ldr	r1, [pc, #356]	@ (8001bf0 <menu_display+0x2a0>)
 8001a8c:	484d      	ldr	r0, [pc, #308]	@ (8001bc4 <menu_display+0x274>)
 8001a8e:	f7ff faa8 	bl	8000fe2 <lcd_puts>

        if (start_status != last_start_status) {
 8001a92:	4b58      	ldr	r3, [pc, #352]	@ (8001bf4 <menu_display+0x2a4>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc8 <menu_display+0x278>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d019      	beq.n	8001ad2 <menu_display+0x182>
            lcd_gotoxy(&lcd1, 7, 1);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2107      	movs	r1, #7
 8001aa2:	4848      	ldr	r0, [pc, #288]	@ (8001bc4 <menu_display+0x274>)
 8001aa4:	f7ff fa3a 	bl	8000f1c <lcd_gotoxy>
            if (start_status == 0) {
 8001aa8:	4b52      	ldr	r3, [pc, #328]	@ (8001bf4 <menu_display+0x2a4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d104      	bne.n	8001aba <menu_display+0x16a>
                lcd_puts(&lcd1, "START");
 8001ab0:	4951      	ldr	r1, [pc, #324]	@ (8001bf8 <menu_display+0x2a8>)
 8001ab2:	4844      	ldr	r0, [pc, #272]	@ (8001bc4 <menu_display+0x274>)
 8001ab4:	f7ff fa95 	bl	8000fe2 <lcd_puts>
 8001ab8:	e007      	b.n	8001aca <menu_display+0x17a>
            } else if (start_status == 1) {
 8001aba:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf4 <menu_display+0x2a4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d103      	bne.n	8001aca <menu_display+0x17a>
                lcd_puts(&lcd1, "STOP ");
 8001ac2:	494e      	ldr	r1, [pc, #312]	@ (8001bfc <menu_display+0x2ac>)
 8001ac4:	483f      	ldr	r0, [pc, #252]	@ (8001bc4 <menu_display+0x274>)
 8001ac6:	f7ff fa8c 	bl	8000fe2 <lcd_puts>
            }
            last_start_status = start_status;  // Simpan status terakhir
 8001aca:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <menu_display+0x2a4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a3e      	ldr	r2, [pc, #248]	@ (8001bc8 <menu_display+0x278>)
 8001ad0:	6013      	str	r3, [r2, #0]
        }

        if (menu_position != last_menu_position) {
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c00 <menu_display+0x2b0>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bcc <menu_display+0x27c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	f000 8237 	beq.w	8001f4e <menu_display+0x5fe>
            // Hapus arrow dari posisi sebelumnya
            if (last_menu_position == 0) {
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bcc <menu_display+0x27c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <menu_display+0x1ac>
                lcd_gotoxy(&lcd1, 6, 1);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2106      	movs	r1, #6
 8001aec:	4835      	ldr	r0, [pc, #212]	@ (8001bc4 <menu_display+0x274>)
 8001aee:	f7ff fa15 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001af2:	4944      	ldr	r1, [pc, #272]	@ (8001c04 <menu_display+0x2b4>)
 8001af4:	4833      	ldr	r0, [pc, #204]	@ (8001bc4 <menu_display+0x274>)
 8001af6:	f7ff fa74 	bl	8000fe2 <lcd_puts>
 8001afa:	e00c      	b.n	8001b16 <menu_display+0x1c6>
            } else if (last_menu_position == 1) {
 8001afc:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <menu_display+0x27c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <menu_display+0x1c6>
                lcd_gotoxy(&lcd1, 12, 1);
 8001b04:	2201      	movs	r2, #1
 8001b06:	210c      	movs	r1, #12
 8001b08:	482e      	ldr	r0, [pc, #184]	@ (8001bc4 <menu_display+0x274>)
 8001b0a:	f7ff fa07 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001b0e:	493d      	ldr	r1, [pc, #244]	@ (8001c04 <menu_display+0x2b4>)
 8001b10:	482c      	ldr	r0, [pc, #176]	@ (8001bc4 <menu_display+0x274>)
 8001b12:	f7ff fa66 	bl	8000fe2 <lcd_puts>
            }

            // Tampilkan arrow di posisi baru
            if (menu_position == 0) {
 8001b16:	4b3a      	ldr	r3, [pc, #232]	@ (8001c00 <menu_display+0x2b0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <menu_display+0x1e2>
                lcd_gotoxy(&lcd1, 6, 1);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2106      	movs	r1, #6
 8001b22:	4828      	ldr	r0, [pc, #160]	@ (8001bc4 <menu_display+0x274>)
 8001b24:	f7ff f9fa 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001b28:	4937      	ldr	r1, [pc, #220]	@ (8001c08 <menu_display+0x2b8>)
 8001b2a:	4826      	ldr	r0, [pc, #152]	@ (8001bc4 <menu_display+0x274>)
 8001b2c:	f7ff fa59 	bl	8000fe2 <lcd_puts>
 8001b30:	e00c      	b.n	8001b4c <menu_display+0x1fc>
            } else if (menu_position == 1) {
 8001b32:	4b33      	ldr	r3, [pc, #204]	@ (8001c00 <menu_display+0x2b0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d108      	bne.n	8001b4c <menu_display+0x1fc>
                lcd_gotoxy(&lcd1, 12, 1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	210c      	movs	r1, #12
 8001b3e:	4821      	ldr	r0, [pc, #132]	@ (8001bc4 <menu_display+0x274>)
 8001b40:	f7ff f9ec 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001b44:	4930      	ldr	r1, [pc, #192]	@ (8001c08 <menu_display+0x2b8>)
 8001b46:	481f      	ldr	r0, [pc, #124]	@ (8001bc4 <menu_display+0x274>)
 8001b48:	f7ff fa4b 	bl	8000fe2 <lcd_puts>
            }

            last_menu_position = menu_position;  // Simpan posisi terakhir
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c00 <menu_display+0x2b0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1e      	ldr	r2, [pc, #120]	@ (8001bcc <menu_display+0x27c>)
 8001b52:	6013      	str	r3, [r2, #0]
            last_secondary_menu_pos = secondary_menu_pos;
        }


    }
}
 8001b54:	e1fb      	b.n	8001f4e <menu_display+0x5fe>
    } else if (current_screen == 1) {  // Screen kedua
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <menu_display+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	f040 81f7 	bne.w	8001f4e <menu_display+0x5fe>
    	if(!is_selecting_scaler || blink_state)
 8001b60:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <menu_display+0x2bc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <menu_display+0x220>
 8001b68:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <menu_display+0x2c0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <menu_display+0x234>
    		lcd_gotoxy(&lcd1, 1, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2101      	movs	r1, #1
 8001b74:	4813      	ldr	r0, [pc, #76]	@ (8001bc4 <menu_display+0x274>)
 8001b76:	f7ff f9d1 	bl	8000f1c <lcd_gotoxy>
    		lcd_puts(&lcd1, "SCALE:");
 8001b7a:	4926      	ldr	r1, [pc, #152]	@ (8001c14 <menu_display+0x2c4>)
 8001b7c:	4811      	ldr	r0, [pc, #68]	@ (8001bc4 <menu_display+0x274>)
 8001b7e:	f7ff fa30 	bl	8000fe2 <lcd_puts>
 8001b82:	e008      	b.n	8001b96 <menu_display+0x246>
            lcd_gotoxy(&lcd1, 1, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2101      	movs	r1, #1
 8001b88:	480e      	ldr	r0, [pc, #56]	@ (8001bc4 <menu_display+0x274>)
 8001b8a:	f7ff f9c7 	bl	8000f1c <lcd_gotoxy>
            lcd_puts(&lcd1, "     ");  // Hapus tulisan "SCALE" saat blink off
 8001b8e:	4922      	ldr	r1, [pc, #136]	@ (8001c18 <menu_display+0x2c8>)
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <menu_display+0x274>)
 8001b92:	f7ff fa26 	bl	8000fe2 <lcd_puts>
    	if(!is_selecting_frequency || blink_state)
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <menu_display+0x2cc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <menu_display+0x256>
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <menu_display+0x2c0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03c      	beq.n	8001c20 <menu_display+0x2d0>
    		lcd_gotoxy(&lcd1, 1, 1);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4806      	ldr	r0, [pc, #24]	@ (8001bc4 <menu_display+0x274>)
 8001bac:	f7ff f9b6 	bl	8000f1c <lcd_gotoxy>
    		lcd_puts(&lcd1, "F:");
 8001bb0:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <menu_display+0x284>)
 8001bb2:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <menu_display+0x274>)
 8001bb4:	f7ff fa15 	bl	8000fe2 <lcd_puts>
 8001bb8:	e03b      	b.n	8001c32 <menu_display+0x2e2>
 8001bba:	bf00      	nop
 8001bbc:	200001b4 	.word	0x200001b4
 8001bc0:	20000014 	.word	0x20000014
 8001bc4:	20000184 	.word	0x20000184
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	2000001c 	.word	0x2000001c
 8001bd4:	08005fd8 	.word	0x08005fd8
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	08005fdc 	.word	0x08005fdc
 8001be0:	08005fe0 	.word	0x08005fe0
 8001be4:	20000198 	.word	0x20000198
 8001be8:	08005fe4 	.word	0x08005fe4
 8001bec:	08005fec 	.word	0x08005fec
 8001bf0:	08005ff4 	.word	0x08005ff4
 8001bf4:	200001b0 	.word	0x200001b0
 8001bf8:	08005ff8 	.word	0x08005ff8
 8001bfc:	08006000 	.word	0x08006000
 8001c00:	200001a8 	.word	0x200001a8
 8001c04:	08006008 	.word	0x08006008
 8001c08:	0800600c 	.word	0x0800600c
 8001c0c:	200001bc 	.word	0x200001bc
 8001c10:	20000020 	.word	0x20000020
 8001c14:	08006010 	.word	0x08006010
 8001c18:	08006018 	.word	0x08006018
 8001c1c:	200001c8 	.word	0x200001c8
            lcd_gotoxy(&lcd1, 1, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2101      	movs	r1, #1
 8001c24:	48ae      	ldr	r0, [pc, #696]	@ (8001ee0 <menu_display+0x590>)
 8001c26:	f7ff f979 	bl	8000f1c <lcd_gotoxy>
            lcd_puts(&lcd1, " ");  // Hapus tulisan "SCALE" saat blink off
 8001c2a:	49ae      	ldr	r1, [pc, #696]	@ (8001ee4 <menu_display+0x594>)
 8001c2c:	48ac      	ldr	r0, [pc, #688]	@ (8001ee0 <menu_display+0x590>)
 8001c2e:	f7ff f9d8 	bl	8000fe2 <lcd_puts>
        lcd_gotoxy(&lcd1, 14, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	210e      	movs	r1, #14
 8001c36:	48aa      	ldr	r0, [pc, #680]	@ (8001ee0 <menu_display+0x590>)
 8001c38:	f7ff f970 	bl	8000f1c <lcd_gotoxy>
        lcd_puts(&lcd1, "OK");
 8001c3c:	49aa      	ldr	r1, [pc, #680]	@ (8001ee8 <menu_display+0x598>)
 8001c3e:	48a8      	ldr	r0, [pc, #672]	@ (8001ee0 <menu_display+0x590>)
 8001c40:	f7ff f9cf 	bl	8000fe2 <lcd_puts>
        if (is_selecting_scaler) {
 8001c44:	4ba9      	ldr	r3, [pc, #676]	@ (8001eec <menu_display+0x59c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01f      	beq.n	8001c8c <menu_display+0x33c>
            lcd_gotoxy(&lcd1, 7, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2107      	movs	r1, #7
 8001c50:	48a3      	ldr	r0, [pc, #652]	@ (8001ee0 <menu_display+0x590>)
 8001c52:	f7ff f963 	bl	8000f1c <lcd_gotoxy>
            lcd_puts(&lcd1, "       ");
 8001c56:	49a6      	ldr	r1, [pc, #664]	@ (8001ef0 <menu_display+0x5a0>)
 8001c58:	48a1      	ldr	r0, [pc, #644]	@ (8001ee0 <menu_display+0x590>)
 8001c5a:	f7ff f9c2 	bl	8000fe2 <lcd_puts>
            lcd_gotoxy(&lcd1, 7, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2107      	movs	r1, #7
 8001c62:	489f      	ldr	r0, [pc, #636]	@ (8001ee0 <menu_display+0x590>)
 8001c64:	f7ff f95a 	bl	8000f1c <lcd_gotoxy>
            sprintf(scaler_buffer, "%d", scaler_values[selected_scaler_index]);  // Tampilkan nilai scaler
 8001c68:	4ba2      	ldr	r3, [pc, #648]	@ (8001ef4 <menu_display+0x5a4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4aa2      	ldr	r2, [pc, #648]	@ (8001ef8 <menu_display+0x5a8>)
 8001c6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c72:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c76:	49a1      	ldr	r1, [pc, #644]	@ (8001efc <menu_display+0x5ac>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fd01 	bl	8005680 <siprintf>
            lcd_puts(&lcd1, scaler_buffer);
 8001c7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c82:	4619      	mov	r1, r3
 8001c84:	4896      	ldr	r0, [pc, #600]	@ (8001ee0 <menu_display+0x590>)
 8001c86:	f7ff f9ac 	bl	8000fe2 <lcd_puts>
 8001c8a:	e015      	b.n	8001cb8 <menu_display+0x368>
            lcd_gotoxy(&lcd1, 7, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2107      	movs	r1, #7
 8001c90:	4893      	ldr	r0, [pc, #588]	@ (8001ee0 <menu_display+0x590>)
 8001c92:	f7ff f943 	bl	8000f1c <lcd_gotoxy>
            sprintf(scaler_buffer, "%d", scaler_values[current_scaler_index]);  // Nilai scaler terakhir
 8001c96:	4b9a      	ldr	r3, [pc, #616]	@ (8001f00 <menu_display+0x5b0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a97      	ldr	r2, [pc, #604]	@ (8001ef8 <menu_display+0x5a8>)
 8001c9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ca4:	4995      	ldr	r1, [pc, #596]	@ (8001efc <menu_display+0x5ac>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 fcea 	bl	8005680 <siprintf>
            lcd_puts(&lcd1, scaler_buffer);
 8001cac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	488b      	ldr	r0, [pc, #556]	@ (8001ee0 <menu_display+0x590>)
 8001cb4:	f7ff f995 	bl	8000fe2 <lcd_puts>
        if (is_selecting_frequency)
 8001cb8:	4b92      	ldr	r3, [pc, #584]	@ (8001f04 <menu_display+0x5b4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d064      	beq.n	8001d8a <menu_display+0x43a>
            if (is_first_update)
 8001cc0:	4b91      	ldr	r3, [pc, #580]	@ (8001f08 <menu_display+0x5b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d029      	beq.n	8001d1c <menu_display+0x3cc>
                format_number(set_value, set_value_buffer);
 8001cc8:	4b90      	ldr	r3, [pc, #576]	@ (8001f0c <menu_display+0x5bc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f948 	bl	8001f68 <format_number>
                strcat(set_value_buffer,"Hz");
 8001cd8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fa7f 	bl	80001e0 <strlen>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cea:	4413      	add	r3, r2
 8001cec:	4a88      	ldr	r2, [pc, #544]	@ (8001f10 <menu_display+0x5c0>)
 8001cee:	8811      	ldrh	r1, [r2, #0]
 8001cf0:	7892      	ldrb	r2, [r2, #2]
 8001cf2:	8019      	strh	r1, [r3, #0]
 8001cf4:	709a      	strb	r2, [r3, #2]
                lcd_gotoxy(&lcd1, 3, 1);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	4879      	ldr	r0, [pc, #484]	@ (8001ee0 <menu_display+0x590>)
 8001cfc:	f7ff f90e 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, set_value_buffer);
 8001d00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d04:	4619      	mov	r1, r3
 8001d06:	4876      	ldr	r0, [pc, #472]	@ (8001ee0 <menu_display+0x590>)
 8001d08:	f7ff f96b 	bl	8000fe2 <lcd_puts>
                last_set_value_display = set_value;  // Simpan nilai yang ditampilkan
 8001d0c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f0c <menu_display+0x5bc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a80      	ldr	r2, [pc, #512]	@ (8001f14 <menu_display+0x5c4>)
 8001d12:	6013      	str	r3, [r2, #0]
                is_first_update = 0;  // Set flag ke 0 agar tidak mengulang ini lagi
 8001d14:	4b7c      	ldr	r3, [pc, #496]	@ (8001f08 <menu_display+0x5b8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e095      	b.n	8001e48 <menu_display+0x4f8>
                if (set_value != last_set_value_display)
 8001d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f0c <menu_display+0x5bc>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b7c      	ldr	r3, [pc, #496]	@ (8001f14 <menu_display+0x5c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f000 808f 	beq.w	8001e48 <menu_display+0x4f8>
                    lcd_gotoxy(&lcd1, 3, 1);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	486c      	ldr	r0, [pc, #432]	@ (8001ee0 <menu_display+0x590>)
 8001d30:	f7ff f8f4 	bl	8000f1c <lcd_gotoxy>
                    lcd_puts(&lcd1, "                        ");  // Tampilkan spasi kosong untuk membersihkan angka lama
 8001d34:	4978      	ldr	r1, [pc, #480]	@ (8001f18 <menu_display+0x5c8>)
 8001d36:	486a      	ldr	r0, [pc, #424]	@ (8001ee0 <menu_display+0x590>)
 8001d38:	f7ff f953 	bl	8000fe2 <lcd_puts>
                    format_number(set_value, set_value_buffer);
 8001d3c:	4b73      	ldr	r3, [pc, #460]	@ (8001f0c <menu_display+0x5bc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f90e 	bl	8001f68 <format_number>
                    strcat(set_value_buffer,"Hz");
 8001d4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fa45 	bl	80001e0 <strlen>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a6b      	ldr	r2, [pc, #428]	@ (8001f10 <menu_display+0x5c0>)
 8001d62:	8811      	ldrh	r1, [r2, #0]
 8001d64:	7892      	ldrb	r2, [r2, #2]
 8001d66:	8019      	strh	r1, [r3, #0]
 8001d68:	709a      	strb	r2, [r3, #2]
                    lcd_gotoxy(&lcd1, 3, 1);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	485c      	ldr	r0, [pc, #368]	@ (8001ee0 <menu_display+0x590>)
 8001d70:	f7ff f8d4 	bl	8000f1c <lcd_gotoxy>
                    lcd_puts(&lcd1, set_value_buffer);
 8001d74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4859      	ldr	r0, [pc, #356]	@ (8001ee0 <menu_display+0x590>)
 8001d7c:	f7ff f931 	bl	8000fe2 <lcd_puts>
                    last_set_value_display = set_value;
 8001d80:	4b62      	ldr	r3, [pc, #392]	@ (8001f0c <menu_display+0x5bc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a63      	ldr	r2, [pc, #396]	@ (8001f14 <menu_display+0x5c4>)
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e05e      	b.n	8001e48 <menu_display+0x4f8>
            if (is_first_update)
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f08 <menu_display+0x5b8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d029      	beq.n	8001de6 <menu_display+0x496>
                format_number(last_set_value, set_value_buffer);
 8001d92:	4b62      	ldr	r3, [pc, #392]	@ (8001f1c <menu_display+0x5cc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f107 0214 	add.w	r2, r7, #20
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f8e3 	bl	8001f68 <format_number>
                strcat(set_value_buffer,"Hz");
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fa1a 	bl	80001e0 <strlen>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4413      	add	r3, r2
 8001db6:	4a56      	ldr	r2, [pc, #344]	@ (8001f10 <menu_display+0x5c0>)
 8001db8:	8811      	ldrh	r1, [r2, #0]
 8001dba:	7892      	ldrb	r2, [r2, #2]
 8001dbc:	8019      	strh	r1, [r3, #0]
 8001dbe:	709a      	strb	r2, [r3, #2]
                lcd_gotoxy(&lcd1, 3, 1);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	4846      	ldr	r0, [pc, #280]	@ (8001ee0 <menu_display+0x590>)
 8001dc6:	f7ff f8a9 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, set_value_buffer);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4843      	ldr	r0, [pc, #268]	@ (8001ee0 <menu_display+0x590>)
 8001dd2:	f7ff f906 	bl	8000fe2 <lcd_puts>
                last_set_value_display = last_set_value;  // Simpan nilai yang ditampilkan
 8001dd6:	4b51      	ldr	r3, [pc, #324]	@ (8001f1c <menu_display+0x5cc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a4e      	ldr	r2, [pc, #312]	@ (8001f14 <menu_display+0x5c4>)
 8001ddc:	6013      	str	r3, [r2, #0]
                is_first_update = 0;  // Set flag ke 0 agar tidak mengulang ini lagi
 8001dde:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <menu_display+0x5b8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e030      	b.n	8001e48 <menu_display+0x4f8>
                if (last_set_value != last_set_value_display)
 8001de6:	4b4d      	ldr	r3, [pc, #308]	@ (8001f1c <menu_display+0x5cc>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b4a      	ldr	r3, [pc, #296]	@ (8001f14 <menu_display+0x5c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d02a      	beq.n	8001e48 <menu_display+0x4f8>
                    lcd_gotoxy(&lcd1, 3, 1);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2103      	movs	r1, #3
 8001df6:	483a      	ldr	r0, [pc, #232]	@ (8001ee0 <menu_display+0x590>)
 8001df8:	f7ff f890 	bl	8000f1c <lcd_gotoxy>
                    lcd_puts(&lcd1, "                        ");  // Tampilkan spasi kosong untuk membersihkan angka lama
 8001dfc:	4946      	ldr	r1, [pc, #280]	@ (8001f18 <menu_display+0x5c8>)
 8001dfe:	4838      	ldr	r0, [pc, #224]	@ (8001ee0 <menu_display+0x590>)
 8001e00:	f7ff f8ef 	bl	8000fe2 <lcd_puts>
                    format_number(last_set_value, set_value_buffer);
 8001e04:	4b45      	ldr	r3, [pc, #276]	@ (8001f1c <menu_display+0x5cc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	463a      	mov	r2, r7
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 f8ab 	bl	8001f68 <format_number>
                    strcat(set_value_buffer,"Hz");
 8001e12:	463b      	mov	r3, r7
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe f9e3 	bl	80001e0 <strlen>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4413      	add	r3, r2
 8001e22:	4a3b      	ldr	r2, [pc, #236]	@ (8001f10 <menu_display+0x5c0>)
 8001e24:	8811      	ldrh	r1, [r2, #0]
 8001e26:	7892      	ldrb	r2, [r2, #2]
 8001e28:	8019      	strh	r1, [r3, #0]
 8001e2a:	709a      	strb	r2, [r3, #2]
                    lcd_gotoxy(&lcd1, 3, 1);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2103      	movs	r1, #3
 8001e30:	482b      	ldr	r0, [pc, #172]	@ (8001ee0 <menu_display+0x590>)
 8001e32:	f7ff f873 	bl	8000f1c <lcd_gotoxy>
                    lcd_puts(&lcd1, set_value_buffer);
 8001e36:	463b      	mov	r3, r7
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4829      	ldr	r0, [pc, #164]	@ (8001ee0 <menu_display+0x590>)
 8001e3c:	f7ff f8d1 	bl	8000fe2 <lcd_puts>
                    last_set_value_display = last_set_value;
 8001e40:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <menu_display+0x5cc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a33      	ldr	r2, [pc, #204]	@ (8001f14 <menu_display+0x5c4>)
 8001e46:	6013      	str	r3, [r2, #0]
        if (secondary_menu_pos != last_secondary_menu_pos) {
 8001e48:	4b35      	ldr	r3, [pc, #212]	@ (8001f20 <menu_display+0x5d0>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b35      	ldr	r3, [pc, #212]	@ (8001f24 <menu_display+0x5d4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d07c      	beq.n	8001f4e <menu_display+0x5fe>
            if (last_secondary_menu_pos == 0) {
 8001e54:	4b33      	ldr	r3, [pc, #204]	@ (8001f24 <menu_display+0x5d4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <menu_display+0x520>
                lcd_gotoxy(&lcd1, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	481f      	ldr	r0, [pc, #124]	@ (8001ee0 <menu_display+0x590>)
 8001e62:	f7ff f85b 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001e66:	491f      	ldr	r1, [pc, #124]	@ (8001ee4 <menu_display+0x594>)
 8001e68:	481d      	ldr	r0, [pc, #116]	@ (8001ee0 <menu_display+0x590>)
 8001e6a:	f7ff f8ba 	bl	8000fe2 <lcd_puts>
 8001e6e:	e01a      	b.n	8001ea6 <menu_display+0x556>
            } else if (last_secondary_menu_pos == 1) {
 8001e70:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <menu_display+0x5d4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d109      	bne.n	8001e8c <menu_display+0x53c>
                lcd_gotoxy(&lcd1, 0, 1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4818      	ldr	r0, [pc, #96]	@ (8001ee0 <menu_display+0x590>)
 8001e7e:	f7ff f84d 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001e82:	4918      	ldr	r1, [pc, #96]	@ (8001ee4 <menu_display+0x594>)
 8001e84:	4816      	ldr	r0, [pc, #88]	@ (8001ee0 <menu_display+0x590>)
 8001e86:	f7ff f8ac 	bl	8000fe2 <lcd_puts>
 8001e8a:	e00c      	b.n	8001ea6 <menu_display+0x556>
            } else if (last_secondary_menu_pos == 2) {
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <menu_display+0x5d4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d108      	bne.n	8001ea6 <menu_display+0x556>
                lcd_gotoxy(&lcd1, 13, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	210d      	movs	r1, #13
 8001e98:	4811      	ldr	r0, [pc, #68]	@ (8001ee0 <menu_display+0x590>)
 8001e9a:	f7ff f83f 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, " ");
 8001e9e:	4911      	ldr	r1, [pc, #68]	@ (8001ee4 <menu_display+0x594>)
 8001ea0:	480f      	ldr	r0, [pc, #60]	@ (8001ee0 <menu_display+0x590>)
 8001ea2:	f7ff f89e 	bl	8000fe2 <lcd_puts>
            if (secondary_menu_pos == 0) {  // Arrow di "SCALE"
 8001ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f20 <menu_display+0x5d0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <menu_display+0x572>
                lcd_gotoxy(&lcd1, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480b      	ldr	r0, [pc, #44]	@ (8001ee0 <menu_display+0x590>)
 8001eb4:	f7ff f832 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001eb8:	491b      	ldr	r1, [pc, #108]	@ (8001f28 <menu_display+0x5d8>)
 8001eba:	4809      	ldr	r0, [pc, #36]	@ (8001ee0 <menu_display+0x590>)
 8001ebc:	f7ff f891 	bl	8000fe2 <lcd_puts>
 8001ec0:	e041      	b.n	8001f46 <menu_display+0x5f6>
            } else if (secondary_menu_pos == 1) {  // Arrow di "F"
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <menu_display+0x5d0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d130      	bne.n	8001f2c <menu_display+0x5dc>
                lcd_gotoxy(&lcd1, 0, 1);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4804      	ldr	r0, [pc, #16]	@ (8001ee0 <menu_display+0x590>)
 8001ed0:	f7ff f824 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001ed4:	4914      	ldr	r1, [pc, #80]	@ (8001f28 <menu_display+0x5d8>)
 8001ed6:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <menu_display+0x590>)
 8001ed8:	f7ff f883 	bl	8000fe2 <lcd_puts>
 8001edc:	e033      	b.n	8001f46 <menu_display+0x5f6>
 8001ede:	bf00      	nop
 8001ee0:	20000184 	.word	0x20000184
 8001ee4:	08006008 	.word	0x08006008
 8001ee8:	08006020 	.word	0x08006020
 8001eec:	200001bc 	.word	0x200001bc
 8001ef0:	08006024 	.word	0x08006024
 8001ef4:	200001c0 	.word	0x200001c0
 8001ef8:	08006050 	.word	0x08006050
 8001efc:	0800602c 	.word	0x0800602c
 8001f00:	200001c4 	.word	0x200001c4
 8001f04:	200001c8 	.word	0x200001c8
 8001f08:	2000001c 	.word	0x2000001c
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	08005fdc 	.word	0x08005fdc
 8001f14:	20000018 	.word	0x20000018
 8001f18:	08006030 	.word	0x08006030
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	200001b8 	.word	0x200001b8
 8001f24:	20000010 	.word	0x20000010
 8001f28:	0800600c 	.word	0x0800600c
            } else if (secondary_menu_pos == 2) {  // Arrow di "OK"
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <menu_display+0x608>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d108      	bne.n	8001f46 <menu_display+0x5f6>
                lcd_gotoxy(&lcd1, 13, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	210d      	movs	r1, #13
 8001f38:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <menu_display+0x60c>)
 8001f3a:	f7fe ffef 	bl	8000f1c <lcd_gotoxy>
                lcd_puts(&lcd1, ">");
 8001f3e:	4908      	ldr	r1, [pc, #32]	@ (8001f60 <menu_display+0x610>)
 8001f40:	4806      	ldr	r0, [pc, #24]	@ (8001f5c <menu_display+0x60c>)
 8001f42:	f7ff f84e 	bl	8000fe2 <lcd_puts>
            last_secondary_menu_pos = secondary_menu_pos;
 8001f46:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <menu_display+0x608>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a06      	ldr	r2, [pc, #24]	@ (8001f64 <menu_display+0x614>)
 8001f4c:	6013      	str	r3, [r2, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	37a8      	adds	r7, #168	@ 0xa8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200001b8 	.word	0x200001b8
 8001f5c:	20000184 	.word	0x20000184
 8001f60:	0800600c 	.word	0x0800600c
 8001f64:	20000010 	.word	0x20000010

08001f68 <format_number>:

void format_number(uint32_t value, char *buffer) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	@ 0x30
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
    char temp[16];
    sprintf(temp, "%u", value);  // Konversi angka ke string tanpa koma
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4927      	ldr	r1, [pc, #156]	@ (8002018 <format_number+0xb0>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fb80 	bl	8005680 <siprintf>
    int len = strlen(temp);
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe f92b 	bl	80001e0 <strlen>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	623b      	str	r3, [r7, #32]
    int comma_count = (len - 1) / 3;  // Hitung jumlah koma yang diperlukan
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	4a22      	ldr	r2, [pc, #136]	@ (800201c <format_number+0xb4>)
 8001f94:	fb82 1203 	smull	r1, r2, r2, r3
 8001f98:	17db      	asrs	r3, r3, #31
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	61fb      	str	r3, [r7, #28]
    int new_len = len + comma_count;
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]

    buffer[new_len] = '\0';  // Terminasi string
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
    int j = new_len - 1;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int counter = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Salin karakter dan tambahkan koma
    for (int i = len - 1; i >= 0; i--) {
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc0:	e021      	b.n	8002006 <format_number+0x9e>
        buffer[j--] = temp[i];
 8001fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fc8:	461a      	mov	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f107 0108 	add.w	r1, r7, #8
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd4:	440a      	add	r2, r1
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	701a      	strb	r2, [r3, #0]
        counter++;
 8001fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fdc:	3301      	adds	r3, #1
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (counter == 3 && i > 0) {
 8001fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d10c      	bne.n	8002000 <format_number+0x98>
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	dd09      	ble.n	8002000 <format_number+0x98>
            buffer[j--] = '.';  // Tambahkan koma
 8001fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	222e      	movs	r2, #46	@ 0x2e
 8001ffa:	701a      	strb	r2, [r3, #0]
            counter = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = len - 1; i >= 0; i--) {
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	3b01      	subs	r3, #1
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	dada      	bge.n	8001fc2 <format_number+0x5a>
        }
    }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	@ 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	0800604c 	.word	0x0800604c
 800201c:	55555556 	.word	0x55555556

08002020 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency and desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 8002028:	4a18      	ldr	r2, [pc, #96]	@ (800208c <si5351_Init+0x6c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800202e:	21ff      	movs	r1, #255	@ 0xff
 8002030:	2003      	movs	r0, #3
 8002032:	f000 fa37 	bl	80024a4 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 8002036:	2180      	movs	r1, #128	@ 0x80
 8002038:	2010      	movs	r0, #16
 800203a:	f000 fa33 	bl	80024a4 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800203e:	2180      	movs	r1, #128	@ 0x80
 8002040:	2011      	movs	r0, #17
 8002042:	f000 fa2f 	bl	80024a4 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 8002046:	2180      	movs	r1, #128	@ 0x80
 8002048:	2012      	movs	r0, #18
 800204a:	f000 fa2b 	bl	80024a4 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	2013      	movs	r0, #19
 8002052:	f000 fa27 	bl	80024a4 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 8002056:	2180      	movs	r1, #128	@ 0x80
 8002058:	2014      	movs	r0, #20
 800205a:	f000 fa23 	bl	80024a4 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 800205e:	2180      	movs	r1, #128	@ 0x80
 8002060:	2015      	movs	r0, #21
 8002062:	f000 fa1f 	bl	80024a4 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 8002066:	2180      	movs	r1, #128	@ 0x80
 8002068:	2016      	movs	r0, #22
 800206a:	f000 fa1b 	bl	80024a4 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 800206e:	2180      	movs	r1, #128	@ 0x80
 8002070:	2017      	movs	r0, #23
 8002072:	f000 fa17 	bl	80024a4 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 8002076:	23c0      	movs	r3, #192	@ 0xc0
 8002078:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	4619      	mov	r1, r3
 800207e:	20b7      	movs	r0, #183	@ 0xb7
 8002080:	f000 fa10 	bl	80024a4 <si5351_write>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200001d4 	.word	0x200001d4

08002090 <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	@ 0x30
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t num = conf->num;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	01da      	lsls	r2, r3, #7
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	01d9      	lsls	r1, r3, #7
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fb91 f3f3 	sdiv	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80020c2:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	01db      	lsls	r3, r3, #7
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	fb93 f2f2 	sdiv	r2, r3, r2
 80020ce:	69f9      	ldr	r1, [r7, #28]
 80020d0:	fb01 f202 	mul.w	r2, r1, r2
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
    P3 = denom;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <si5351_SetupPLL+0x56>
 80020e2:	231a      	movs	r3, #26
 80020e4:	e000      	b.n	80020e8 <si5351_SetupPLL+0x58>
 80020e6:	2322      	movs	r3, #34	@ 0x22
 80020e8:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 80020ea:	7bf8      	ldrb	r0, [r7, #15]
 80020ec:	2300      	movs	r3, #0
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	2300      	movs	r3, #0
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	f000 f9fb 	bl	80024f4 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 80020fe:	21a0      	movs	r1, #160	@ 0xa0
 8002100:	20b1      	movs	r0, #177	@ 0xb1
 8002102:	f000 f9cf 	bl	80024a4 <si5351_write>
}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	@ 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 800210e:	b580      	push	{r7, lr}
 8002110:	b08c      	sub	sp, #48	@ 0x30
 8002112:	af02      	add	r7, sp, #8
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	460b      	mov	r3, r1
 800211c:	71bb      	strb	r3, [r7, #6]
 800211e:	4613      	mov	r3, r2
 8002120:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int32_t P1, P2, P3;

    if(output > 2) {
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <si5351_SetupOutput+0x36>
        return 1;
 8002140:	2301      	movs	r3, #1
 8002142:	e08d      	b.n	8002260 <si5351_SetupOutput+0x152>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <si5351_SetupOutput+0x54>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b07      	cmp	r3, #7
 8002150:	dd05      	ble.n	800215e <si5351_SetupOutput+0x50>
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d104      	bne.n	8002162 <si5351_SetupOutput+0x54>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800215e:	2302      	movs	r3, #2
 8002160:	e07e      	b.n	8002260 <si5351_SetupOutput+0x152>
    }

    if(div == 4) {
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b04      	cmp	r3, #4
 8002166:	d109      	bne.n	800217c <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 8002174:	2303      	movs	r3, #3
 8002176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800217a:	e016      	b.n	80021aa <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	01da      	lsls	r2, r3, #7
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	01d9      	lsls	r1, r3, #7
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	fb91 f3f3 	sdiv	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002190:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	01db      	lsls	r3, r3, #7
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	fb93 f2f2 	sdiv	r2, r3, r2
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	fb01 f202 	mul.w	r2, r1, r2
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	757b      	strb	r3, [r7, #21]
    switch (output) {
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d014      	beq.n	80021e6 <si5351_SetupOutput+0xd8>
 80021bc:	2b02      	cmp	r3, #2
 80021be:	dc19      	bgt.n	80021f4 <si5351_SetupOutput+0xe6>
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <si5351_SetupOutput+0xbc>
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d007      	beq.n	80021d8 <si5351_SetupOutput+0xca>
 80021c8:	e014      	b.n	80021f4 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 80021ca:	232a      	movs	r3, #42	@ 0x2a
 80021cc:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 80021ce:	23a5      	movs	r3, #165	@ 0xa5
 80021d0:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 80021d2:	2310      	movs	r3, #16
 80021d4:	757b      	strb	r3, [r7, #21]
        break;
 80021d6:	e00d      	b.n	80021f4 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 80021d8:	2332      	movs	r3, #50	@ 0x32
 80021da:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 80021dc:	23a6      	movs	r3, #166	@ 0xa6
 80021de:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 80021e0:	2311      	movs	r3, #17
 80021e2:	757b      	strb	r3, [r7, #21]
        break;
 80021e4:	e006      	b.n	80021f4 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 80021e6:	233a      	movs	r3, #58	@ 0x3a
 80021e8:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 80021ea:	23a7      	movs	r3, #167	@ 0xa7
 80021ec:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 80021ee:	2312      	movs	r3, #18
 80021f0:	757b      	strb	r3, [r7, #21]
        break;
 80021f2:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 80021f4:	797b      	ldrb	r3, [r7, #5]
 80021f6:	f043 030c 	orr.w	r3, r3, #12
 80021fa:	753b      	strb	r3, [r7, #20]
    if(pllSource == SI5351_PLL_B) {
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d103      	bne.n	800220a <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 8002202:	7d3b      	ldrb	r3, [r7, #20]
 8002204:	f043 0320 	orr.w	r3, r3, #32
 8002208:	753b      	strb	r3, [r7, #20]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <si5351_SetupOutput+0x118>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <si5351_SetupOutput+0x110>
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d103      	bne.n	8002226 <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 800221e:	7d3b      	ldrb	r3, [r7, #20]
 8002220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002224:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 8002226:	7d3a      	ldrb	r2, [r7, #20]
 8002228:	7d7b      	ldrb	r3, [r7, #21]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f939 	bl	80024a4 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	7c1b      	ldrb	r3, [r3, #16]
 8002236:	7df8      	ldrb	r0, [r7, #23]
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	6a39      	ldr	r1, [r7, #32]
 8002246:	f000 f955 	bl	80024f4 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 800224a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800224e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002252:	b2da      	uxtb	r2, r3
 8002254:	7dbb      	ldrb	r3, [r7, #22]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f923 	bl	80024a4 <si5351_write>

    return 0;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3728      	adds	r7, #40	@ 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b08e      	sub	sp, #56	@ 0x38
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800227a:	da03      	bge.n	8002284 <si5351_Calc+0x1c>
 800227c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e005      	b.n	8002290 <si5351_Calc+0x28>
    else if(Fclk > 160000000) Fclk = 160000000;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a56      	ldr	r2, [pc, #344]	@ (80023e0 <si5351_Calc+0x178>)
 8002288:	4293      	cmp	r3, r2
 800228a:	dd01      	ble.n	8002290 <si5351_Calc+0x28>
 800228c:	4b54      	ldr	r3, [pc, #336]	@ (80023e0 <si5351_Calc+0x178>)
 800228e:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a52      	ldr	r2, [pc, #328]	@ (80023e4 <si5351_Calc+0x17c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	dc06      	bgt.n	80022ac <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2206      	movs	r2, #6
 80022a8:	741a      	strb	r2, [r3, #16]
 80022aa:	e002      	b.n	80022b2 <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - (int32_t)((((double)Fclk)/100000000.0)*((double)si5351Correction));
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7fe f93e 	bl	8000534 <__aeabi_i2d>
 80022b8:	a347      	add	r3, pc, #284	@ (adr r3, 80023d8 <si5351_Calc+0x170>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe facd 	bl	800085c <__aeabi_ddiv>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4614      	mov	r4, r2
 80022c8:	461d      	mov	r5, r3
 80022ca:	4b47      	ldr	r3, [pc, #284]	@ (80023e8 <si5351_Calc+0x180>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f930 	bl	8000534 <__aeabi_i2d>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4620      	mov	r0, r4
 80022da:	4629      	mov	r1, r5
 80022dc:	f7fe f994 	bl	8000608 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fba0 	bl	8000a2c <__aeabi_d2iz>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 80022f4:	4b3d      	ldr	r3, [pc, #244]	@ (80023ec <si5351_Calc+0x184>)
 80022f6:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a3d      	ldr	r2, [pc, #244]	@ (80023f0 <si5351_Calc+0x188>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	dc22      	bgt.n	8002346 <si5351_Calc+0xde>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 8002300:	2324      	movs	r3, #36	@ 0x24
 8002302:	637b      	str	r3, [r7, #52]	@ 0x34
        b = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	633b      	str	r3, [r7, #48]	@ 0x30
        c = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int32_t Fpll = 900000000;
 800230c:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <si5351_Calc+0x18c>)
 800230e:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	fb92 f3f3 	sdiv	r3, r2, r3
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
        t = (Fclk >> 20) + 1;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	151b      	asrs	r3, r3, #20
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	fb93 f2f2 	sdiv	r2, r3, r2
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	fb01 f202 	mul.w	r2, r1, r2
 8002330:	1a9a      	subs	r2, r3, r2
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fb92 f3f3 	sdiv	r3, r2, r3
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
        z = Fclk / t;
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	e032      	b.n	80023ac <si5351_Calc+0x144>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a2b      	ldr	r2, [pc, #172]	@ (80023f8 <si5351_Calc+0x190>)
 800234a:	4293      	cmp	r3, r2
 800234c:	dd02      	ble.n	8002354 <si5351_Calc+0xec>
            x = 4;
 800234e:	2304      	movs	r3, #4
 8002350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002352:	e008      	b.n	8002366 <si5351_Calc+0xfe>
        } else if (Fclk >= 100000000) {
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4a29      	ldr	r2, [pc, #164]	@ (80023fc <si5351_Calc+0x194>)
 8002358:	4293      	cmp	r3, r2
 800235a:	dd02      	ble.n	8002362 <si5351_Calc+0xfa>
            x = 6;
 800235c:	2306      	movs	r3, #6
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002360:	e001      	b.n	8002366 <si5351_Calc+0xfe>
        } else {
            x = 8;
 8002362:	2308      	movs	r3, #8
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        y = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	@ 0x24
        z = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	623b      	str	r3, [r7, #32]

        int32_t numerator = x*Fclk;
 800236e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
        t = (Fxtal >> 20) + 1;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	151b      	asrs	r3, r3, #20
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002392:	69f9      	ldr	r1, [r7, #28]
 8002394:	fb01 f202 	mul.w	r2, r1, r2
 8002398:	1a9a      	subs	r2, r3, r2
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	fb92 f3f3 	sdiv	r3, r2, r3
 80023a0:	633b      	str	r3, [r7, #48]	@ 0x30
        c = Fxtal / t;
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    pll_conf->mult = a;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023b0:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023b6:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023bc:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023c2:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c8:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	60da      	str	r2, [r3, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3738      	adds	r7, #56	@ 0x38
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bdb0      	pop	{r4, r5, r7, pc}
 80023d8:	00000000 	.word	0x00000000
 80023dc:	4197d784 	.word	0x4197d784
 80023e0:	09896800 	.word	0x09896800
 80023e4:	000f423f 	.word	0x000f423f
 80023e8:	200001d4 	.word	0x200001d4
 80023ec:	017d7840 	.word	0x017d7840
 80023f0:	04d3f63f 	.word	0x04d3f63f
 80023f4:	35a4e900 	.word	0x35a4e900
 80023f8:	08f0d17f 	.word	0x08f0d17f
 80023fc:	05f5e0ff 	.word	0x05f5e0ff

08002400 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	@ 0x30
 8002404:	af02      	add	r7, sp, #8
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800240c:	f107 0208 	add.w	r2, r7, #8
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ff26 	bl	8002268 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff fe34 	bl	8002090 <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	2100      	movs	r1, #0
 8002430:	9100      	str	r1, [sp, #0]
 8002432:	2100      	movs	r1, #0
 8002434:	2000      	movs	r0, #0
 8002436:	f7ff fe6a 	bl	800210e <si5351_SetupOutput>
}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	@ 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <si5351_SetupCLK2>:

// Setup CLK2 for given frequency and drive strength. Use PLLB.
void si5351_SetupCLK2(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 8002442:	b580      	push	{r7, lr}
 8002444:	b08c      	sub	sp, #48	@ 0x30
 8002446:	af02      	add	r7, sp, #8
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	70fb      	strb	r3, [r7, #3]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 800244e:	f107 0208 	add.w	r2, r7, #8
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff05 	bl	8002268 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_B, &pll_conf);
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	2001      	movs	r0, #1
 8002466:	f7ff fe13 	bl	8002090 <si5351_SetupPLL>
	si5351_SetupOutput(2, SI5351_PLL_B, driveStrength, &out_conf, 0);
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	2100      	movs	r1, #0
 8002472:	9100      	str	r1, [sp, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	2002      	movs	r0, #2
 8002478:	f7ff fe49 	bl	800210e <si5351_SetupOutput>
}
 800247c:	bf00      	nop
 800247e:	3728      	adds	r7, #40	@ 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	43db      	mvns	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4619      	mov	r1, r3
 8002496:	2003      	movs	r0, #3
 8002498:	f000 f804 	bl	80024a4 <si5351_write>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af04      	add	r7, sp, #16
 80024aa:	4603      	mov	r3, r0
 80024ac:	460a      	mov	r2, r1
 80024ae:	71fb      	strb	r3, [r7, #7]
 80024b0:	4613      	mov	r3, r2
 80024b2:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 80024b4:	bf00      	nop
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	2203      	movs	r2, #3
 80024bc:	21c0      	movs	r1, #192	@ 0xc0
 80024be:	480c      	ldr	r0, [pc, #48]	@ (80024f0 <si5351_write+0x4c>)
 80024c0:	f001 fcda 	bl	8003e78 <HAL_I2C_IsDeviceReady>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f5      	bne.n	80024b6 <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	9302      	str	r3, [sp, #8]
 80024d4:	2301      	movs	r3, #1
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	1dbb      	adds	r3, r7, #6
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	21c0      	movs	r1, #192	@ 0xc0
 80024e0:	4803      	ldr	r0, [pc, #12]	@ (80024f0 <si5351_write+0x4c>)
 80024e2:	f001 fbcf 	bl	8003c84 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200000e8 	.word	0x200000e8

080024f4 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	4603      	mov	r3, r0
 8002502:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	121b      	asrs	r3, r3, #8
 8002508:	b2da      	uxtb	r2, r3
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ffc8 	bl	80024a4 <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3301      	adds	r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ffbf 	bl	80024a4 <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3302      	adds	r3, #2
 800252a:	b2d8      	uxtb	r0, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	141b      	asrs	r3, r3, #16
 8002530:	b25b      	sxtb	r3, r3
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	b25a      	sxtb	r2, r3
 8002538:	7e3b      	ldrb	r3, [r7, #24]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	b25b      	sxtb	r3, r3
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	b25b      	sxtb	r3, r3
 8002544:	4313      	orrs	r3, r2
 8002546:	b25a      	sxtb	r2, r3
 8002548:	7f3b      	ldrb	r3, [r7, #28]
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	b25b      	sxtb	r3, r3
 800254e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002552:	b25b      	sxtb	r3, r3
 8002554:	4313      	orrs	r3, r2
 8002556:	b25b      	sxtb	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	4619      	mov	r1, r3
 800255c:	f7ff ffa2 	bl	80024a4 <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	3303      	adds	r3, #3
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	121b      	asrs	r3, r3, #8
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f7ff ff98 	bl	80024a4 <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	3304      	adds	r3, #4
 8002578:	b2db      	uxtb	r3, r3
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff8f 	bl	80024a4 <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	3305      	adds	r3, #5
 800258a:	b2d8      	uxtb	r0, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	131b      	asrs	r3, r3, #12
 8002590:	b25b      	sxtb	r3, r3
 8002592:	f023 030f 	bic.w	r3, r3, #15
 8002596:	b25a      	sxtb	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	141b      	asrs	r3, r3, #16
 800259c:	b25b      	sxtb	r3, r3
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b25b      	sxtb	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7ff ff7a 	bl	80024a4 <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3306      	adds	r3, #6
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	121b      	asrs	r3, r3, #8
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f7ff ff70 	bl	80024a4 <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	3307      	adds	r3, #7
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff67 	bl	80024a4 <si5351_write>
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <HAL_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	4a0f      	ldr	r2, [pc, #60]	@ (800262c <HAL_MspInit+0x4c>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f6:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <HAL_MspInit+0x4c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	4a08      	ldr	r2, [pc, #32]	@ (800262c <HAL_MspInit+0x4c>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	@ 0x40
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_MspInit+0x4c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a17      	ldr	r2, [pc, #92]	@ (80026ac <HAL_ADC_MspInit+0x7c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d127      	bne.n	80026a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <HAL_ADC_MspInit+0x80>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	4a15      	ldr	r2, [pc, #84]	@ (80026b0 <HAL_ADC_MspInit+0x80>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002660:	6453      	str	r3, [r2, #68]	@ 0x44
 8002662:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <HAL_ADC_MspInit+0x80>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <HAL_ADC_MspInit+0x80>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a0e      	ldr	r2, [pc, #56]	@ (80026b0 <HAL_ADC_MspInit+0x80>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_ADC_MspInit+0x80>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800268a:	2302      	movs	r3, #2
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800268e:	2303      	movs	r3, #3
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <HAL_ADC_MspInit+0x84>)
 800269e:	f000 fedf 	bl	8003460 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	@ 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40012000 	.word	0x40012000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020000 	.word	0x40020000

080026b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	@ (800273c <HAL_I2C_MspInit+0x84>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d12b      	bne.n	8002732 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <HAL_I2C_MspInit+0x88>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a17      	ldr	r2, [pc, #92]	@ (8002740 <HAL_I2C_MspInit+0x88>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <HAL_I2C_MspInit+0x88>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f6:	23c0      	movs	r3, #192	@ 0xc0
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026fa:	2312      	movs	r3, #18
 80026fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002706:	2304      	movs	r3, #4
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	480c      	ldr	r0, [pc, #48]	@ (8002744 <HAL_I2C_MspInit+0x8c>)
 8002712:	f000 fea5 	bl	8003460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <HAL_I2C_MspInit+0x88>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	4a08      	ldr	r2, [pc, #32]	@ (8002740 <HAL_I2C_MspInit+0x88>)
 8002720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002724:	6413      	str	r3, [r2, #64]	@ 0x40
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_I2C_MspInit+0x88>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	@ 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40005400 	.word	0x40005400
 8002740:	40023800 	.word	0x40023800
 8002744:	40020400 	.word	0x40020400

08002748 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1d      	ldr	r2, [pc, #116]	@ (80027dc <HAL_TIM_Encoder_MspInit+0x94>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d133      	bne.n	80027d2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4a1b      	ldr	r2, [pc, #108]	@ (80027e0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	6413      	str	r3, [r2, #64]	@ 0x40
 800277a:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <HAL_TIM_Encoder_MspInit+0x98>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_TIM_Encoder_MspInit+0x98>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a14      	ldr	r2, [pc, #80]	@ (80027e0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a2:	23c0      	movs	r3, #192	@ 0xc0
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027b2:	2302      	movs	r3, #2
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4809      	ldr	r0, [pc, #36]	@ (80027e4 <HAL_TIM_Encoder_MspInit+0x9c>)
 80027be:	f000 fe4f 	bl	8003460 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	201d      	movs	r0, #29
 80027c8:	f000 fe13 	bl	80033f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027cc:	201d      	movs	r0, #29
 80027ce:	f000 fe2c 	bl	800342a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	@ 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020000 	.word	0x40020000

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <NMI_Handler+0x4>

080027f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <HardFault_Handler+0x4>

080027f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <MemManage_Handler+0x4>

08002800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <BusFault_Handler+0x4>

08002808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <UsageFault_Handler+0x4>

08002810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283e:	f000 f8d7 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}

08002846 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_SW_Pin);
 800284a:	2001      	movs	r0, #1
 800284c:	f000 ffc0 	bl	80037d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <TIM3_IRQHandler+0x10>)
 800285a:	f002 fcc5 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2000013c 	.word	0x2000013c

08002868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002870:	4a14      	ldr	r2, [pc, #80]	@ (80028c4 <_sbrk+0x5c>)
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <_sbrk+0x60>)
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <_sbrk+0x64>)
 8002886:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <_sbrk+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002898:	f002 ff1a 	bl	80056d0 <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e009      	b.n	80028bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <_sbrk+0x64>)
 80028b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20010000 	.word	0x20010000
 80028c8:	00000400 	.word	0x00000400
 80028cc:	200001d8 	.word	0x200001d8
 80028d0:	20000328 	.word	0x20000328

080028d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <SystemInit+0x20>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	4a05      	ldr	r2, [pc, #20]	@ (80028f4 <SystemInit+0x20>)
 80028e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002930 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028fc:	f7ff ffea 	bl	80028d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002900:	480c      	ldr	r0, [pc, #48]	@ (8002934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002902:	490d      	ldr	r1, [pc, #52]	@ (8002938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002904:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002908:	e002      	b.n	8002910 <LoopCopyDataInit>

0800290a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800290c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290e:	3304      	adds	r3, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002914:	d3f9      	bcc.n	800290a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002918:	4c0a      	ldr	r4, [pc, #40]	@ (8002944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800291c:	e001      	b.n	8002922 <LoopFillZerobss>

0800291e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002920:	3204      	adds	r2, #4

08002922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002924:	d3fb      	bcc.n	800291e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002926:	f002 fed9 	bl	80056dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292a:	f7fe fc59 	bl	80011e0 <main>
  bx  lr    
 800292e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002930:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002938:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800293c:	080060c4 	.word	0x080060c4
  ldr r2, =_sbss
 8002940:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002944:	20000328 	.word	0x20000328

08002948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <ADC_IRQHandler>
	...

0800294c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0d      	ldr	r2, [pc, #52]	@ (800298c <HAL_Init+0x40>)
 8002956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800295a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <HAL_Init+0x40>)
 8002962:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002968:	4b08      	ldr	r3, [pc, #32]	@ (800298c <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a07      	ldr	r2, [pc, #28]	@ (800298c <HAL_Init+0x40>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002974:	2003      	movs	r0, #3
 8002976:	f000 fd31 	bl	80033dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297a:	200f      	movs	r0, #15
 800297c:	f000 f808 	bl	8002990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002980:	f7ff fe2e 	bl	80025e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00

08002990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002998:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <HAL_InitTick+0x54>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	@ (80029e8 <HAL_InitTick+0x58>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fd49 	bl	8003446 <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f000 fd11 	bl	80033f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	@ (80029ec <HAL_InitTick+0x5c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000024 	.word	0x20000024
 80029e8:	2000002c 	.word	0x2000002c
 80029ec:	20000028 	.word	0x20000028

080029f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_IncTick+0x20>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_IncTick+0x24>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	@ (8002a14 <HAL_IncTick+0x24>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000002c 	.word	0x2000002c
 8002a14:	200001dc 	.word	0x200001dc

08002a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <HAL_GetTick+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	200001dc 	.word	0x200001dc

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff ffee 	bl	8002a18 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000002c 	.word	0x2000002c

08002a78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e033      	b.n	8002af6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fdca 	bl	8002630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002abe:	f023 0302 	bic.w	r3, r3, #2
 8002ac2:	f043 0202 	orr.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 faba 	bl	8003044 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ae6:	e001      	b.n	8002aec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Start+0x1a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e097      	b.n	8002c4a <HAL_ADC_Start+0x14a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d018      	beq.n	8002b62 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b40:	4b45      	ldr	r3, [pc, #276]	@ (8002c58 <HAL_ADC_Start+0x158>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a45      	ldr	r2, [pc, #276]	@ (8002c5c <HAL_ADC_Start+0x15c>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0c9a      	lsrs	r2, r3, #18
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b54:	e002      	b.n	8002b5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f9      	bne.n	8002b56 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d15f      	bne.n	8002c30 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bae:	d106      	bne.n	8002bbe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb4:	f023 0206 	bic.w	r2, r3, #6
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bbc:	e002      	b.n	8002bc4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bcc:	4b24      	ldr	r3, [pc, #144]	@ (8002c60 <HAL_ADC_Start+0x160>)
 8002bce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d129      	bne.n	8002c48 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	e020      	b.n	8002c48 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	@ (8002c64 <HAL_ADC_Start+0x164>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d11b      	bne.n	8002c48 <HAL_ADC_Start+0x148>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d114      	bne.n	8002c48 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	e00b      	b.n	8002c48 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000024 	.word	0x20000024
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	40012300 	.word	0x40012300
 8002c64:	40012000 	.word	0x40012000

08002c68 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Stop+0x16>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e021      	b.n	8002cc2 <HAL_ADC_Stop+0x5a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cea:	d113      	bne.n	8002d14 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cfa:	d10b      	bne.n	8002d14 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e063      	b.n	8002ddc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d14:	f7ff fe80 	bl	8002a18 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d1a:	e021      	b.n	8002d60 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d01d      	beq.n	8002d60 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_ADC_PollForConversion+0x6c>
 8002d2a:	f7ff fe75 	bl	8002a18 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d212      	bcs.n	8002d60 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d00b      	beq.n	8002d60 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	f043 0204 	orr.w	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e03d      	b.n	8002ddc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d1d6      	bne.n	8002d1c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f06f 0212 	mvn.w	r2, #18
 8002d76:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d123      	bne.n	8002dda <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11f      	bne.n	8002dda <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d006      	beq.n	8002db6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d111      	bne.n	8002dda <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x1c>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e105      	b.n	8003028 <HAL_ADC_ConfigChannel+0x228>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b09      	cmp	r3, #9
 8002e2a:	d925      	bls.n	8002e78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b1e      	subs	r3, #30
 8002e42:	2207      	movs	r2, #7
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	400a      	ands	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68d9      	ldr	r1, [r3, #12]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	4603      	mov	r3, r0
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4403      	add	r3, r0
 8002e6a:	3b1e      	subs	r3, #30
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	e022      	b.n	8002ebe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6919      	ldr	r1, [r3, #16]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	400a      	ands	r2, r1
 8002e9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6919      	ldr	r1, [r3, #16]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4403      	add	r3, r0
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d824      	bhi.n	8002f10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3b05      	subs	r3, #5
 8002ed8:	221f      	movs	r2, #31
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	3b05      	subs	r3, #5
 8002f02:	fa00 f203 	lsl.w	r2, r0, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f0e:	e04c      	b.n	8002faa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	d824      	bhi.n	8002f62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	3b23      	subs	r3, #35	@ 0x23
 8002f2a:	221f      	movs	r2, #31
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43da      	mvns	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	400a      	ands	r2, r1
 8002f38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	3b23      	subs	r3, #35	@ 0x23
 8002f54:	fa00 f203 	lsl.w	r2, r0, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f60:	e023      	b.n	8002faa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	3b41      	subs	r3, #65	@ 0x41
 8002f74:	221f      	movs	r2, #31
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	400a      	ands	r2, r1
 8002f82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4618      	mov	r0, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b41      	subs	r3, #65	@ 0x41
 8002f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002faa:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <HAL_ADC_ConfigChannel+0x234>)
 8002fac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a21      	ldr	r2, [pc, #132]	@ (8003038 <HAL_ADC_ConfigChannel+0x238>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d109      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1cc>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	d105      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	@ (8003038 <HAL_ADC_ConfigChannel+0x238>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d123      	bne.n	800301e <HAL_ADC_ConfigChannel+0x21e>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b10      	cmp	r3, #16
 8002fdc:	d003      	beq.n	8002fe6 <HAL_ADC_ConfigChannel+0x1e6>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b11      	cmp	r3, #17
 8002fe4:	d11b      	bne.n	800301e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d111      	bne.n	800301e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ffa:	4b10      	ldr	r3, [pc, #64]	@ (800303c <HAL_ADC_ConfigChannel+0x23c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a10      	ldr	r2, [pc, #64]	@ (8003040 <HAL_ADC_ConfigChannel+0x240>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	0c9a      	lsrs	r2, r3, #18
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003010:	e002      	b.n	8003018 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3b01      	subs	r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f9      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40012300 	.word	0x40012300
 8003038:	40012000 	.word	0x40012000
 800303c:	20000024 	.word	0x20000024
 8003040:	431bde83 	.word	0x431bde83

08003044 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800304c:	4b79      	ldr	r3, [pc, #484]	@ (8003234 <ADC_Init+0x1f0>)
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800309c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6899      	ldr	r1, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	4a58      	ldr	r2, [pc, #352]	@ (8003238 <ADC_Init+0x1f4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d022      	beq.n	8003122 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800310c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	e00f      	b.n	8003142 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003140:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0202 	bic.w	r2, r2, #2
 8003150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7e1b      	ldrb	r3, [r3, #24]
 800315c:	005a      	lsls	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01b      	beq.n	80031a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800317e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800318e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	3b01      	subs	r3, #1
 800319c:	035a      	lsls	r2, r3, #13
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	e007      	b.n	80031b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	051a      	lsls	r2, r3, #20
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031fa:	025a      	lsls	r2, r3, #9
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	029a      	lsls	r2, r3, #10
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40012300 	.word	0x40012300
 8003238:	0f000001 	.word	0x0f000001

0800323c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800324c:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326e:	4a04      	ldr	r2, [pc, #16]	@ (8003280 <__NVIC_SetPriorityGrouping+0x44>)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	60d3      	str	r3, [r2, #12]
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <__NVIC_GetPriorityGrouping+0x18>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 0307 	and.w	r3, r3, #7
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	db0b      	blt.n	80032ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	f003 021f 	and.w	r2, r3, #31
 80032b8:	4907      	ldr	r1, [pc, #28]	@ (80032d8 <__NVIC_EnableIRQ+0x38>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2001      	movs	r0, #1
 80032c2:	fa00 f202 	lsl.w	r2, r0, r2
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e000e100 	.word	0xe000e100

080032dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	db0a      	blt.n	8003306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	490c      	ldr	r1, [pc, #48]	@ (8003328 <__NVIC_SetPriority+0x4c>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	0112      	lsls	r2, r2, #4
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	440b      	add	r3, r1
 8003300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003304:	e00a      	b.n	800331c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4908      	ldr	r1, [pc, #32]	@ (800332c <__NVIC_SetPriority+0x50>)
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	3b04      	subs	r3, #4
 8003314:	0112      	lsls	r2, r2, #4
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	440b      	add	r3, r1
 800331a:	761a      	strb	r2, [r3, #24]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000e100 	.word	0xe000e100
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	@ 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f1c3 0307 	rsb	r3, r3, #7
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf28      	it	cs
 800334e:	2304      	movcs	r3, #4
 8003350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3304      	adds	r3, #4
 8003356:	2b06      	cmp	r3, #6
 8003358:	d902      	bls.n	8003360 <NVIC_EncodePriority+0x30>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3b03      	subs	r3, #3
 800335e:	e000      	b.n	8003362 <NVIC_EncodePriority+0x32>
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43da      	mvns	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003378:	f04f 31ff 	mov.w	r1, #4294967295
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43d9      	mvns	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	4313      	orrs	r3, r2
         );
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	@ 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a8:	d301      	bcc.n	80033ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033aa:	2301      	movs	r3, #1
 80033ac:	e00f      	b.n	80033ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ae:	4a0a      	ldr	r2, [pc, #40]	@ (80033d8 <SysTick_Config+0x40>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033b6:	210f      	movs	r1, #15
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	f7ff ff8e 	bl	80032dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <SysTick_Config+0x40>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033c6:	4b04      	ldr	r3, [pc, #16]	@ (80033d8 <SysTick_Config+0x40>)
 80033c8:	2207      	movs	r2, #7
 80033ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	e000e010 	.word	0xe000e010

080033dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff29 	bl	800323c <__NVIC_SetPriorityGrouping>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003404:	f7ff ff3e 	bl	8003284 <__NVIC_GetPriorityGrouping>
 8003408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	6978      	ldr	r0, [r7, #20]
 8003410:	f7ff ff8e 	bl	8003330 <NVIC_EncodePriority>
 8003414:	4602      	mov	r2, r0
 8003416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff5d 	bl	80032dc <__NVIC_SetPriority>
}
 8003422:	bf00      	nop
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff31 	bl	80032a0 <__NVIC_EnableIRQ>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff ffa2 	bl	8003398 <SysTick_Config>
 8003454:	4603      	mov	r3, r0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	@ 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e159      	b.n	8003730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	f040 8148 	bne.w	800372a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d005      	beq.n	80034b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d130      	bne.n	8003514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e8:	2201      	movs	r2, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 0201 	and.w	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b03      	cmp	r3, #3
 800351e:	d017      	beq.n	8003550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d123      	bne.n	80035a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	08da      	lsrs	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3208      	adds	r2, #8
 8003564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3208      	adds	r2, #8
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a2 	beq.w	800372a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b57      	ldr	r3, [pc, #348]	@ (8003748 <HAL_GPIO_Init+0x2e8>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	4a56      	ldr	r2, [pc, #344]	@ (8003748 <HAL_GPIO_Init+0x2e8>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035f6:	4b54      	ldr	r3, [pc, #336]	@ (8003748 <HAL_GPIO_Init+0x2e8>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003602:	4a52      	ldr	r2, [pc, #328]	@ (800374c <HAL_GPIO_Init+0x2ec>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a49      	ldr	r2, [pc, #292]	@ (8003750 <HAL_GPIO_Init+0x2f0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d019      	beq.n	8003662 <HAL_GPIO_Init+0x202>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a48      	ldr	r2, [pc, #288]	@ (8003754 <HAL_GPIO_Init+0x2f4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_GPIO_Init+0x1fe>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a47      	ldr	r2, [pc, #284]	@ (8003758 <HAL_GPIO_Init+0x2f8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00d      	beq.n	800365a <HAL_GPIO_Init+0x1fa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a46      	ldr	r2, [pc, #280]	@ (800375c <HAL_GPIO_Init+0x2fc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <HAL_GPIO_Init+0x1f6>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a45      	ldr	r2, [pc, #276]	@ (8003760 <HAL_GPIO_Init+0x300>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_GPIO_Init+0x1f2>
 800364e:	2304      	movs	r3, #4
 8003650:	e008      	b.n	8003664 <HAL_GPIO_Init+0x204>
 8003652:	2307      	movs	r3, #7
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x204>
 8003656:	2303      	movs	r3, #3
 8003658:	e004      	b.n	8003664 <HAL_GPIO_Init+0x204>
 800365a:	2302      	movs	r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_Init+0x204>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_GPIO_Init+0x204>
 8003662:	2300      	movs	r3, #0
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4093      	lsls	r3, r2
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003674:	4935      	ldr	r1, [pc, #212]	@ (800374c <HAL_GPIO_Init+0x2ec>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003682:	4b38      	ldr	r3, [pc, #224]	@ (8003764 <HAL_GPIO_Init+0x304>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003764 <HAL_GPIO_Init+0x304>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003764 <HAL_GPIO_Init+0x304>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d0:	4a24      	ldr	r2, [pc, #144]	@ (8003764 <HAL_GPIO_Init+0x304>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036d6:	4b23      	ldr	r3, [pc, #140]	@ (8003764 <HAL_GPIO_Init+0x304>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003764 <HAL_GPIO_Init+0x304>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003700:	4b18      	ldr	r3, [pc, #96]	@ (8003764 <HAL_GPIO_Init+0x304>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003724:	4a0f      	ldr	r2, [pc, #60]	@ (8003764 <HAL_GPIO_Init+0x304>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3301      	adds	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	f67f aea2 	bls.w	800347c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3724      	adds	r7, #36	@ 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	40013800 	.word	0x40013800
 8003750:	40020000 	.word	0x40020000
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40013c00 	.word	0x40013c00

08003768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
 8003774:	4613      	mov	r3, r2
 8003776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003778:	787b      	ldrb	r3, [r7, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003784:	e003      	b.n	800378e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	619a      	str	r2, [r3, #24]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	041a      	lsls	r2, r3, #16
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43d9      	mvns	r1, r3
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	400b      	ands	r3, r1
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	619a      	str	r2, [r3, #24]
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037da:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037e6:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fc28 	bl	8001044 <HAL_GPIO_EXTI_Callback>
  }
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40013c00 	.word	0x40013c00

08003800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e12b      	b.n	8003a6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe ff46 	bl	80026b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	@ 0x24
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003852:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003864:	f001 fb58 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 8003868:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4a81      	ldr	r2, [pc, #516]	@ (8003a74 <HAL_I2C_Init+0x274>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d807      	bhi.n	8003884 <HAL_I2C_Init+0x84>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a80      	ldr	r2, [pc, #512]	@ (8003a78 <HAL_I2C_Init+0x278>)
 8003878:	4293      	cmp	r3, r2
 800387a:	bf94      	ite	ls
 800387c:	2301      	movls	r3, #1
 800387e:	2300      	movhi	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e006      	b.n	8003892 <HAL_I2C_Init+0x92>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a7d      	ldr	r2, [pc, #500]	@ (8003a7c <HAL_I2C_Init+0x27c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	bf94      	ite	ls
 800388c:	2301      	movls	r3, #1
 800388e:	2300      	movhi	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0e7      	b.n	8003a6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a78      	ldr	r2, [pc, #480]	@ (8003a80 <HAL_I2C_Init+0x280>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0c9b      	lsrs	r3, r3, #18
 80038a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003a74 <HAL_I2C_Init+0x274>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d802      	bhi.n	80038d4 <HAL_I2C_Init+0xd4>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	e009      	b.n	80038e8 <HAL_I2C_Init+0xe8>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	4a69      	ldr	r2, [pc, #420]	@ (8003a84 <HAL_I2C_Init+0x284>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	3301      	adds	r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	495c      	ldr	r1, [pc, #368]	@ (8003a74 <HAL_I2C_Init+0x274>)
 8003904:	428b      	cmp	r3, r1
 8003906:	d819      	bhi.n	800393c <HAL_I2C_Init+0x13c>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1e59      	subs	r1, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fbb1 f3f3 	udiv	r3, r1, r3
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800391c:	400b      	ands	r3, r1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_I2C_Init+0x138>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1e59      	subs	r1, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003930:	3301      	adds	r3, #1
 8003932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003936:	e051      	b.n	80039dc <HAL_I2C_Init+0x1dc>
 8003938:	2304      	movs	r3, #4
 800393a:	e04f      	b.n	80039dc <HAL_I2C_Init+0x1dc>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <HAL_I2C_Init+0x168>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e58      	subs	r0, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	440b      	add	r3, r1
 8003952:	fbb0 f3f3 	udiv	r3, r0, r3
 8003956:	3301      	adds	r3, #1
 8003958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e012      	b.n	800398e <HAL_I2C_Init+0x18e>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e58      	subs	r0, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	0099      	lsls	r1, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	fbb0 f3f3 	udiv	r3, r0, r3
 800397e:	3301      	adds	r3, #1
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_I2C_Init+0x196>
 8003992:	2301      	movs	r3, #1
 8003994:	e022      	b.n	80039dc <HAL_I2C_Init+0x1dc>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10e      	bne.n	80039bc <HAL_I2C_Init+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e58      	subs	r0, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6859      	ldr	r1, [r3, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	440b      	add	r3, r1
 80039ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039ba:	e00f      	b.n	80039dc <HAL_I2C_Init+0x1dc>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e58      	subs	r0, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	0099      	lsls	r1, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	6809      	ldr	r1, [r1, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69da      	ldr	r2, [r3, #28]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6911      	ldr	r1, [r2, #16]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68d2      	ldr	r2, [r2, #12]
 8003a16:	4311      	orrs	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	000186a0 	.word	0x000186a0
 8003a78:	001e847f 	.word	0x001e847f
 8003a7c:	003d08ff 	.word	0x003d08ff
 8003a80:	431bde83 	.word	0x431bde83
 8003a84:	10624dd3 	.word	0x10624dd3

08003a88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	461a      	mov	r2, r3
 8003a94:	460b      	mov	r3, r1
 8003a96:	817b      	strh	r3, [r7, #10]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7fe ffbc 	bl	8002a18 <HAL_GetTick>
 8003aa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	f040 80e0 	bne.w	8003c70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2319      	movs	r3, #25
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4970      	ldr	r1, [pc, #448]	@ (8003c7c <HAL_I2C_Master_Transmit+0x1f4>)
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fc22 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0d3      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2C_Master_Transmit+0x50>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e0cc      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x1ea>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d007      	beq.n	8003afe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2221      	movs	r2, #33	@ 0x21
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	893a      	ldrh	r2, [r7, #8]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a50      	ldr	r2, [pc, #320]	@ (8003c80 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b40:	8979      	ldrh	r1, [r7, #10]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	6a3a      	ldr	r2, [r7, #32]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fac4 	bl	80040d4 <I2C_MasterRequestWrite>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e08d      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b6c:	e066      	b.n	8003c3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	6a39      	ldr	r1, [r7, #32]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fce0 	bl	8004538 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d107      	bne.n	8003b96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e06b      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d11b      	bne.n	8003c10 <HAL_I2C_Master_Transmit+0x188>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d017      	beq.n	8003c10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	6a39      	ldr	r1, [r7, #32]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fcd7 	bl	80045c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d107      	bne.n	8003c38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e01a      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d194      	bne.n	8003b6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e000      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	00100002 	.word	0x00100002
 8003c80:	ffff0000 	.word	0xffff0000

08003c84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	4611      	mov	r1, r2
 8003c90:	461a      	mov	r2, r3
 8003c92:	4603      	mov	r3, r0
 8003c94:	817b      	strh	r3, [r7, #10]
 8003c96:	460b      	mov	r3, r1
 8003c98:	813b      	strh	r3, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c9e:	f7fe febb 	bl	8002a18 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	f040 80d9 	bne.w	8003e64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2319      	movs	r3, #25
 8003cb8:	2201      	movs	r2, #1
 8003cba:	496d      	ldr	r1, [pc, #436]	@ (8003e70 <HAL_I2C_Mem_Write+0x1ec>)
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fb21 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e0cc      	b.n	8003e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_I2C_Mem_Write+0x56>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e0c5      	b.n	8003e66 <HAL_I2C_Mem_Write+0x1e2>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d007      	beq.n	8003d00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2221      	movs	r2, #33	@ 0x21
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2240      	movs	r2, #64	@ 0x40
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e74 <HAL_I2C_Mem_Write+0x1f0>)
 8003d40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d42:	88f8      	ldrh	r0, [r7, #6]
 8003d44:	893a      	ldrh	r2, [r7, #8]
 8003d46:	8979      	ldrh	r1, [r7, #10]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	4603      	mov	r3, r0
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fa40 	bl	80041d8 <I2C_RequestMemoryWrite>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d052      	beq.n	8003e04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e081      	b.n	8003e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fbe6 	bl	8004538 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00d      	beq.n	8003d8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d107      	bne.n	8003d8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e06b      	b.n	8003e66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	781a      	ldrb	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d11b      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x180>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d017      	beq.n	8003e04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1aa      	bne.n	8003d62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fbd9 	bl	80045c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00d      	beq.n	8003e38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d107      	bne.n	8003e34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e016      	b.n	8003e66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	00100002 	.word	0x00100002
 8003e74:	ffff0000 	.word	0xffff0000

08003e78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	@ 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	460b      	mov	r3, r1
 8003e86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e88:	f7fe fdc6 	bl	8002a18 <HAL_GetTick>
 8003e8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	f040 8111 	bne.w	80040c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2319      	movs	r3, #25
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4988      	ldr	r1, [pc, #544]	@ (80040cc <HAL_I2C_IsDeviceReady+0x254>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fa2a 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e104      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2C_IsDeviceReady+0x50>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0fd      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d007      	beq.n	8003eee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003efc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2224      	movs	r2, #36	@ 0x24
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a70      	ldr	r2, [pc, #448]	@ (80040d0 <HAL_I2C_IsDeviceReady+0x258>)
 8003f10:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f9e8 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f48:	d103      	bne.n	8003f52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f50:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0b6      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fe fd57 	bl	8002a18 <HAL_GetTick>
 8003f6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f9a:	e025      	b.n	8003fe8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f9c:	f7fe fd3c 	bl	8002a18 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <HAL_I2C_IsDeviceReady+0x13a>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22a0      	movs	r2, #160	@ 0xa0
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ff2:	d005      	beq.n	8004000 <HAL_I2C_IsDeviceReady+0x188>
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <HAL_I2C_IsDeviceReady+0x188>
 8003ffa:	7dbb      	ldrb	r3, [r7, #22]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0cd      	beq.n	8003f9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d129      	bne.n	800406a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004024:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2319      	movs	r3, #25
 8004042:	2201      	movs	r2, #1
 8004044:	4921      	ldr	r1, [pc, #132]	@ (80040cc <HAL_I2C_IsDeviceReady+0x254>)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f95c 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e036      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e02c      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004078:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004082:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2319      	movs	r3, #25
 800408a:	2201      	movs	r2, #1
 800408c:	490f      	ldr	r1, [pc, #60]	@ (80040cc <HAL_I2C_IsDeviceReady+0x254>)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f938 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e012      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	3301      	adds	r3, #1
 80040a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	f4ff af32 	bcc.w	8003f12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
  }
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00100002 	.word	0x00100002
 80040d0:	ffff0000 	.word	0xffff0000

080040d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	460b      	mov	r3, r1
 80040e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d006      	beq.n	80040fe <I2C_MasterRequestWrite+0x2a>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d003      	beq.n	80040fe <I2C_MasterRequestWrite+0x2a>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040fc:	d108      	bne.n	8004110 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e00b      	b.n	8004128 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	2b12      	cmp	r3, #18
 8004116:	d107      	bne.n	8004128 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004126:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f8e5 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800414e:	d103      	bne.n	8004158 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004156:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e035      	b.n	80041c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004164:	d108      	bne.n	8004178 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004174:	611a      	str	r2, [r3, #16]
 8004176:	e01b      	b.n	80041b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004178:	897b      	ldrh	r3, [r7, #10]
 800417a:	11db      	asrs	r3, r3, #7
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0306 	and.w	r3, r3, #6
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f063 030f 	orn	r3, r3, #15
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	490e      	ldr	r1, [pc, #56]	@ (80041d0 <I2C_MasterRequestWrite+0xfc>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f92e 	bl	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e010      	b.n	80041c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041a6:	897b      	ldrh	r3, [r7, #10]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4907      	ldr	r1, [pc, #28]	@ (80041d4 <I2C_MasterRequestWrite+0x100>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f91e 	bl	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	00010008 	.word	0x00010008
 80041d4:	00010002 	.word	0x00010002

080041d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	817b      	strh	r3, [r7, #10]
 80041ea:	460b      	mov	r3, r1
 80041ec:	813b      	strh	r3, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004200:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	2200      	movs	r2, #0
 800420a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f878 	bl	8004304 <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004228:	d103      	bne.n	8004232 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004230:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e05f      	b.n	80042f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004236:	897b      	ldrh	r3, [r7, #10]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004244:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	492d      	ldr	r1, [pc, #180]	@ (8004300 <I2C_RequestMemoryWrite+0x128>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f8d3 	bl	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e04c      	b.n	80042f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004274:	6a39      	ldr	r1, [r7, #32]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f95e 	bl	8004538 <I2C_WaitOnTXEFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	2b04      	cmp	r3, #4
 8004288:	d107      	bne.n	800429a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004298:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e02b      	b.n	80042f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	611a      	str	r2, [r3, #16]
 80042ae:	e021      	b.n	80042f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042b0:	893b      	ldrh	r3, [r7, #8]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c0:	6a39      	ldr	r1, [r7, #32]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f938 	bl	8004538 <I2C_WaitOnTXEFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d107      	bne.n	80042e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e005      	b.n	80042f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ea:	893b      	ldrh	r3, [r7, #8]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	00010002 	.word	0x00010002

08004304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004314:	e048      	b.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d044      	beq.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fe fb7b 	bl	8002a18 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d139      	bne.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	0c1b      	lsrs	r3, r3, #16
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10d      	bne.n	800435a <I2C_WaitOnFlagUntilTimeout+0x56>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	43da      	mvns	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	e00c      	b.n	8004374 <I2C_WaitOnFlagUntilTimeout+0x70>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	43da      	mvns	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	429a      	cmp	r2, r3
 8004378:	d116      	bne.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e023      	b.n	80043f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d10d      	bne.n	80043ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	43da      	mvns	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4013      	ands	r3, r2
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	e00c      	b.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	43da      	mvns	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d093      	beq.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004406:	e071      	b.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004416:	d123      	bne.n	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004426:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e067      	b.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d041      	beq.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fe fad6 	bl	8002a18 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d136      	bne.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10c      	bne.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e00b      	b.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	43da      	mvns	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e021      	b.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d10c      	bne.n	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	43da      	mvns	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4013      	ands	r3, r2
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e00b      	b.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	f47f af6d 	bne.w	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004544:	e034      	b.n	80045b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f886 	bl	8004658 <I2C_IsAcknowledgeFailed>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e034      	b.n	80045c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d028      	beq.n	80045b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455e:	f7fe fa5b 	bl	8002a18 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	d302      	bcc.n	8004574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11d      	bne.n	80045b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457e:	2b80      	cmp	r3, #128	@ 0x80
 8004580:	d016      	beq.n	80045b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e007      	b.n	80045c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ba:	2b80      	cmp	r3, #128	@ 0x80
 80045bc:	d1c3      	bne.n	8004546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d4:	e034      	b.n	8004640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f83e 	bl	8004658 <I2C_IsAcknowledgeFailed>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e034      	b.n	8004650 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d028      	beq.n	8004640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fe fa13 	bl	8002a18 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d11d      	bne.n	8004640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b04      	cmp	r3, #4
 8004610:	d016      	beq.n	8004640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e007      	b.n	8004650 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b04      	cmp	r3, #4
 800464c:	d1c3      	bne.n	80045d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466e:	d11b      	bne.n	80046a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004678:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	f043 0204 	orr.w	r2, r3, #4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e267      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d075      	beq.n	80047c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046d6:	4b88      	ldr	r3, [pc, #544]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00c      	beq.n	80046fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e2:	4b85      	ldr	r3, [pc, #532]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d112      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ee:	4b82      	ldr	r3, [pc, #520]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046fa:	d10b      	bne.n	8004714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046fc:	4b7e      	ldr	r3, [pc, #504]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05b      	beq.n	80047c0 <HAL_RCC_OscConfig+0x108>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d157      	bne.n	80047c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e242      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471c:	d106      	bne.n	800472c <HAL_RCC_OscConfig+0x74>
 800471e:	4b76      	ldr	r3, [pc, #472]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a75      	ldr	r2, [pc, #468]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e01d      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x98>
 8004736:	4b70      	ldr	r3, [pc, #448]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6f      	ldr	r2, [pc, #444]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4b6d      	ldr	r3, [pc, #436]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a6c      	ldr	r2, [pc, #432]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0xb0>
 8004750:	4b69      	ldr	r3, [pc, #420]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a68      	ldr	r2, [pc, #416]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b66      	ldr	r3, [pc, #408]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a65      	ldr	r2, [pc, #404]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fe f952 	bl	8002a18 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004778:	f7fe f94e 	bl	8002a18 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	@ 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e207      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b5b      	ldr	r3, [pc, #364]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0xc0>
 8004796:	e014      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fe f93e 	bl	8002a18 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fe f93a 	bl	8002a18 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	@ 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1f3      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	4b51      	ldr	r3, [pc, #324]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0xe8>
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d063      	beq.n	8004896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ce:	4b4a      	ldr	r3, [pc, #296]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047da:	4b47      	ldr	r3, [pc, #284]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d11c      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e6:	4b44      	ldr	r3, [pc, #272]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d116      	bne.n	8004820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f2:	4b41      	ldr	r3, [pc, #260]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d001      	beq.n	800480a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e1c7      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	4b3b      	ldr	r3, [pc, #236]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4937      	ldr	r1, [pc, #220]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481e:	e03a      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d020      	beq.n	800486a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004828:	4b34      	ldr	r3, [pc, #208]	@ (80048fc <HAL_RCC_OscConfig+0x244>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fe f8f3 	bl	8002a18 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004836:	f7fe f8ef 	bl	8002a18 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1a8      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004854:	4b28      	ldr	r3, [pc, #160]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4925      	ldr	r1, [pc, #148]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
 8004868:	e015      	b.n	8004896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486a:	4b24      	ldr	r3, [pc, #144]	@ (80048fc <HAL_RCC_OscConfig+0x244>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fe f8d2 	bl	8002a18 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004878:	f7fe f8ce 	bl	8002a18 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e187      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d036      	beq.n	8004910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048aa:	4b15      	ldr	r3, [pc, #84]	@ (8004900 <HAL_RCC_OscConfig+0x248>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fe f8b2 	bl	8002a18 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b8:	f7fe f8ae 	bl	8002a18 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e167      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x200>
 80048d6:	e01b      	b.n	8004910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d8:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <HAL_RCC_OscConfig+0x248>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048de:	f7fe f89b 	bl	8002a18 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e4:	e00e      	b.n	8004904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e6:	f7fe f897 	bl	8002a18 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d907      	bls.n	8004904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e150      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	4b88      	ldr	r3, [pc, #544]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1ea      	bne.n	80048e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8097 	beq.w	8004a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004922:	4b81      	ldr	r3, [pc, #516]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	4b7d      	ldr	r3, [pc, #500]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	4a7c      	ldr	r2, [pc, #496]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800493c:	6413      	str	r3, [r2, #64]	@ 0x40
 800493e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b77      	ldr	r3, [pc, #476]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b74      	ldr	r3, [pc, #464]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a73      	ldr	r2, [pc, #460]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fe f857 	bl	8002a18 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fe f853 	bl	8002a18 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e10c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004980:	4b6a      	ldr	r3, [pc, #424]	@ (8004b2c <HAL_RCC_OscConfig+0x474>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2ea>
 8004994:	4b64      	ldr	r3, [pc, #400]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004998:	4a63      	ldr	r2, [pc, #396]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a0:	e01c      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x30c>
 80049aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0x324>
 80049c4:	4b58      	ldr	r3, [pc, #352]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	4a57      	ldr	r2, [pc, #348]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d0:	4b55      	ldr	r3, [pc, #340]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d4:	4a54      	ldr	r2, [pc, #336]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fe f818 	bl	8002a18 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fe f814 	bl	8002a18 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0cb      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a02:	4b49      	ldr	r3, [pc, #292]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0ee      	beq.n	80049ec <HAL_RCC_OscConfig+0x334>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fe f802 	bl	8002a18 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a18:	f7fd fffe 	bl	8002a18 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e0b5      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ee      	bne.n	8004a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d105      	bne.n	8004a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a40:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a44:	4a38      	ldr	r2, [pc, #224]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a1 	beq.w	8004b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a56:	4b34      	ldr	r3, [pc, #208]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d05c      	beq.n	8004b1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d141      	bne.n	8004aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	4b31      	ldr	r3, [pc, #196]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fd ffd2 	bl	8002a18 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd ffce 	bl	8002a18 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e087      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	491b      	ldr	r1, [pc, #108]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fd ffa7 	bl	8002a18 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ace:	f7fd ffa3 	bl	8002a18 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e05c      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae0:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x416>
 8004aec:	e054      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	4b10      	ldr	r3, [pc, #64]	@ (8004b30 <HAL_RCC_OscConfig+0x478>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fd ff90 	bl	8002a18 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fd ff8c 	bl	8002a18 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e045      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <HAL_RCC_OscConfig+0x470>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x444>
 8004b1a:	e03d      	b.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e038      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <HAL_RCC_OscConfig+0x4ec>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d028      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d121      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d11a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d111      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0cc      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b68      	ldr	r3, [pc, #416]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90c      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b65      	ldr	r3, [pc, #404]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b63      	ldr	r3, [pc, #396]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0b8      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bfc:	4b59      	ldr	r3, [pc, #356]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a58      	ldr	r2, [pc, #352]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c14:	4b53      	ldr	r3, [pc, #332]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4a52      	ldr	r2, [pc, #328]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b50      	ldr	r3, [pc, #320]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	494d      	ldr	r1, [pc, #308]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d044      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	4b47      	ldr	r3, [pc, #284]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d119      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c66:	4b3f      	ldr	r3, [pc, #252]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e06f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b3b      	ldr	r3, [pc, #236]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e067      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c86:	4b37      	ldr	r3, [pc, #220]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0203 	bic.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4934      	ldr	r1, [pc, #208]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c98:	f7fd febe 	bl	8002a18 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fd feba 	bl	8002a18 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e04f      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 020c 	and.w	r2, r3, #12
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1eb      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d20c      	bcs.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e032      	b.n	8004d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4916      	ldr	r1, [pc, #88]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1a:	4b12      	ldr	r3, [pc, #72]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	490e      	ldr	r1, [pc, #56]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d2e:	f000 f821 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d32:	4602      	mov	r2, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	@ (8004d64 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	490a      	ldr	r1, [pc, #40]	@ (8004d68 <HAL_RCC_ClockConfig+0x1c0>)
 8004d40:	5ccb      	ldrb	r3, [r1, r3]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d4a:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd fe1e 	bl	8002990 <HAL_InitTick>

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023c00 	.word	0x40023c00
 8004d64:	40023800 	.word	0x40023800
 8004d68:	08006068 	.word	0x08006068
 8004d6c:	20000024 	.word	0x20000024
 8004d70:	20000028 	.word	0x20000028

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d78:	b090      	sub	sp, #64	@ 0x40
 8004d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8c:	4b59      	ldr	r3, [pc, #356]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d00d      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x40>
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	f200 80a1 	bhi.w	8004ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x34>
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d003      	beq.n	8004dae <HAL_RCC_GetSysClockFreq+0x3a>
 8004da6:	e09b      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da8:	4b53      	ldr	r3, [pc, #332]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004daa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dac:	e09b      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dae:	4b53      	ldr	r3, [pc, #332]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004db2:	e098      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db4:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d028      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dca:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	099b      	lsrs	r3, r3, #6
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	623b      	str	r3, [r7, #32]
 8004dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4b47      	ldr	r3, [pc, #284]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004de0:	fb03 f201 	mul.w	r2, r3, r1
 8004de4:	2300      	movs	r3, #0
 8004de6:	fb00 f303 	mul.w	r3, r0, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	4a43      	ldr	r2, [pc, #268]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x188>)
 8004dee:	fba0 1202 	umull	r1, r2, r0, r2
 8004df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004df4:	460a      	mov	r2, r1
 8004df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dfa:	4413      	add	r3, r2
 8004dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e00:	2200      	movs	r2, #0
 8004e02:	61bb      	str	r3, [r7, #24]
 8004e04:	61fa      	str	r2, [r7, #28]
 8004e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e0e:	f7fb fe85 	bl	8000b1c <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4613      	mov	r3, r2
 8004e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e1a:	e053      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1c:	4b35      	ldr	r3, [pc, #212]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	099b      	lsrs	r3, r3, #6
 8004e22:	2200      	movs	r2, #0
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	617a      	str	r2, [r7, #20]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e2e:	f04f 0b00 	mov.w	fp, #0
 8004e32:	4652      	mov	r2, sl
 8004e34:	465b      	mov	r3, fp
 8004e36:	f04f 0000 	mov.w	r0, #0
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	0159      	lsls	r1, r3, #5
 8004e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e44:	0150      	lsls	r0, r2, #5
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8004e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e66:	ebb2 0408 	subs.w	r4, r2, r8
 8004e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	00eb      	lsls	r3, r5, #3
 8004e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7c:	00e2      	lsls	r2, r4, #3
 8004e7e:	4614      	mov	r4, r2
 8004e80:	461d      	mov	r5, r3
 8004e82:	eb14 030a 	adds.w	r3, r4, sl
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	eb45 030b 	adc.w	r3, r5, fp
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	028b      	lsls	r3, r1, #10
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	028a      	lsls	r2, r1, #10
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eae:	2200      	movs	r2, #0
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	60fa      	str	r2, [r7, #12]
 8004eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb8:	f7fb fe30 	bl	8000b1c <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ed4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3740      	adds	r7, #64	@ 0x40
 8004eec:	46bd      	mov	sp, r7
 8004eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	00f42400 	.word	0x00f42400
 8004efc:	017d7840 	.word	0x017d7840

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b03      	ldr	r3, [pc, #12]	@ (8004f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000024 	.word	0x20000024

08004f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f1c:	f7ff fff0 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4903      	ldr	r1, [pc, #12]	@ (8004f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	08006078 	.word	0x08006078

08004f40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e097      	b.n	8005084 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7fd fbed 	bl	8002748 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f84:	f023 0307 	bic.w	r3, r3, #7
 8004f88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f000 fa3f 	bl	8005418 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004fe0:	f023 030c 	bic.w	r3, r3, #12
 8004fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	011a      	lsls	r2, r3, #4
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	031b      	lsls	r3, r3, #12
 8005010:	4313      	orrs	r3, r2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4313      	orrs	r3, r2
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800509c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80050b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d110      	bne.n	80050de <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d102      	bne.n	80050c8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050c2:	7b7b      	ldrb	r3, [r7, #13]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e089      	b.n	80051e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050dc:	e031      	b.n	8005142 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d110      	bne.n	8005106 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d102      	bne.n	80050f0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050ea:	7b3b      	ldrb	r3, [r7, #12]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d001      	beq.n	80050f4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e075      	b.n	80051e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005104:	e01d      	b.n	8005142 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d108      	bne.n	800511e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800510c:	7bbb      	ldrb	r3, [r7, #14]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d105      	bne.n	800511e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005112:	7b7b      	ldrb	r3, [r7, #13]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d102      	bne.n	800511e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005118:	7b3b      	ldrb	r3, [r7, #12]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d001      	beq.n	8005122 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e05e      	b.n	80051e0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2202      	movs	r2, #2
 8005136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d010      	beq.n	8005170 <HAL_TIM_Encoder_Start_IT+0xe4>
 800514e:	e01f      	b.n	8005190 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2201      	movs	r2, #1
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f9e9 	bl	8005530 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0202 	orr.w	r2, r2, #2
 800516c:	60da      	str	r2, [r3, #12]
      break;
 800516e:	e02e      	b.n	80051ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2201      	movs	r2, #1
 8005176:	2104      	movs	r1, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f9d9 	bl	8005530 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0204 	orr.w	r2, r2, #4
 800518c:	60da      	str	r2, [r3, #12]
      break;
 800518e:	e01e      	b.n	80051ce <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f9c9 	bl	8005530 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2201      	movs	r2, #1
 80051a4:	2104      	movs	r1, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f9c2 	bl	8005530 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0202 	orr.w	r2, r2, #2
 80051ba:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0204 	orr.w	r2, r2, #4
 80051ca:	60da      	str	r2, [r3, #12]
      break;
 80051cc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d020      	beq.n	800524c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0202 	mvn.w	r2, #2
 800521c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb ff7e 	bl	8001134 <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8ce 	bl	80053dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8d5 	bl	80053f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d020      	beq.n	8005298 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0204 	mvn.w	r2, #4
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb ff58 	bl	8001134 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8a8 	bl	80053dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8af 	bl	80053f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d020      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0208 	mvn.w	r2, #8
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2204      	movs	r2, #4
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fb ff32 	bl	8001134 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f882 	bl	80053dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f889 	bl	80053f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d020      	beq.n	8005330 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fb ff0c 	bl	8001134 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f85c 	bl	80053dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f863 	bl	80053f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0201 	mvn.w	r2, #1
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f83a 	bl	80053c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f97a 	bl	800566c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f834 	bl	8005404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0220 	mvn.w	r2, #32
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f94c 	bl	8005658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a3a      	ldr	r2, [pc, #232]	@ (8005514 <TIM_Base_SetConfig+0xfc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00f      	beq.n	8005450 <TIM_Base_SetConfig+0x38>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005436:	d00b      	beq.n	8005450 <TIM_Base_SetConfig+0x38>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a37      	ldr	r2, [pc, #220]	@ (8005518 <TIM_Base_SetConfig+0x100>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_Base_SetConfig+0x38>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a36      	ldr	r2, [pc, #216]	@ (800551c <TIM_Base_SetConfig+0x104>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_Base_SetConfig+0x38>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a35      	ldr	r2, [pc, #212]	@ (8005520 <TIM_Base_SetConfig+0x108>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d108      	bne.n	8005462 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2b      	ldr	r2, [pc, #172]	@ (8005514 <TIM_Base_SetConfig+0xfc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01b      	beq.n	80054a2 <TIM_Base_SetConfig+0x8a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005470:	d017      	beq.n	80054a2 <TIM_Base_SetConfig+0x8a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a28      	ldr	r2, [pc, #160]	@ (8005518 <TIM_Base_SetConfig+0x100>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <TIM_Base_SetConfig+0x8a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a27      	ldr	r2, [pc, #156]	@ (800551c <TIM_Base_SetConfig+0x104>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00f      	beq.n	80054a2 <TIM_Base_SetConfig+0x8a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a26      	ldr	r2, [pc, #152]	@ (8005520 <TIM_Base_SetConfig+0x108>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00b      	beq.n	80054a2 <TIM_Base_SetConfig+0x8a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a25      	ldr	r2, [pc, #148]	@ (8005524 <TIM_Base_SetConfig+0x10c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d007      	beq.n	80054a2 <TIM_Base_SetConfig+0x8a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a24      	ldr	r2, [pc, #144]	@ (8005528 <TIM_Base_SetConfig+0x110>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d003      	beq.n	80054a2 <TIM_Base_SetConfig+0x8a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a23      	ldr	r2, [pc, #140]	@ (800552c <TIM_Base_SetConfig+0x114>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d108      	bne.n	80054b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a0e      	ldr	r2, [pc, #56]	@ (8005514 <TIM_Base_SetConfig+0xfc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d103      	bne.n	80054e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d105      	bne.n	8005506 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	611a      	str	r2, [r3, #16]
  }
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	2201      	movs	r2, #1
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	43db      	mvns	r3, r3
 8005552:	401a      	ands	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1a      	ldr	r2, [r3, #32]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	431a      	orrs	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005590:	2302      	movs	r3, #2
 8005592:	e050      	b.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e0:	d013      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a18      	ldr	r2, [pc, #96]	@ (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a16      	ldr	r2, [pc, #88]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a15      	ldr	r2, [pc, #84]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a13      	ldr	r2, [pc, #76]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d10c      	bne.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4313      	orrs	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40014000 	.word	0x40014000

08005658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <siprintf>:
 8005680:	b40e      	push	{r1, r2, r3}
 8005682:	b500      	push	{lr}
 8005684:	b09c      	sub	sp, #112	@ 0x70
 8005686:	ab1d      	add	r3, sp, #116	@ 0x74
 8005688:	9002      	str	r0, [sp, #8]
 800568a:	9006      	str	r0, [sp, #24]
 800568c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005690:	4809      	ldr	r0, [pc, #36]	@ (80056b8 <siprintf+0x38>)
 8005692:	9107      	str	r1, [sp, #28]
 8005694:	9104      	str	r1, [sp, #16]
 8005696:	4909      	ldr	r1, [pc, #36]	@ (80056bc <siprintf+0x3c>)
 8005698:	f853 2b04 	ldr.w	r2, [r3], #4
 800569c:	9105      	str	r1, [sp, #20]
 800569e:	6800      	ldr	r0, [r0, #0]
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	a902      	add	r1, sp, #8
 80056a4:	f000 f994 	bl	80059d0 <_svfiprintf_r>
 80056a8:	9b02      	ldr	r3, [sp, #8]
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	b01c      	add	sp, #112	@ 0x70
 80056b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b4:	b003      	add	sp, #12
 80056b6:	4770      	bx	lr
 80056b8:	20000030 	.word	0x20000030
 80056bc:	ffff0208 	.word	0xffff0208

080056c0 <memset>:
 80056c0:	4402      	add	r2, r0
 80056c2:	4603      	mov	r3, r0
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d100      	bne.n	80056ca <memset+0xa>
 80056c8:	4770      	bx	lr
 80056ca:	f803 1b01 	strb.w	r1, [r3], #1
 80056ce:	e7f9      	b.n	80056c4 <memset+0x4>

080056d0 <__errno>:
 80056d0:	4b01      	ldr	r3, [pc, #4]	@ (80056d8 <__errno+0x8>)
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000030 	.word	0x20000030

080056dc <__libc_init_array>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4d0d      	ldr	r5, [pc, #52]	@ (8005714 <__libc_init_array+0x38>)
 80056e0:	4c0d      	ldr	r4, [pc, #52]	@ (8005718 <__libc_init_array+0x3c>)
 80056e2:	1b64      	subs	r4, r4, r5
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	2600      	movs	r6, #0
 80056e8:	42a6      	cmp	r6, r4
 80056ea:	d109      	bne.n	8005700 <__libc_init_array+0x24>
 80056ec:	4d0b      	ldr	r5, [pc, #44]	@ (800571c <__libc_init_array+0x40>)
 80056ee:	4c0c      	ldr	r4, [pc, #48]	@ (8005720 <__libc_init_array+0x44>)
 80056f0:	f000 fc66 	bl	8005fc0 <_init>
 80056f4:	1b64      	subs	r4, r4, r5
 80056f6:	10a4      	asrs	r4, r4, #2
 80056f8:	2600      	movs	r6, #0
 80056fa:	42a6      	cmp	r6, r4
 80056fc:	d105      	bne.n	800570a <__libc_init_array+0x2e>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	f855 3b04 	ldr.w	r3, [r5], #4
 8005704:	4798      	blx	r3
 8005706:	3601      	adds	r6, #1
 8005708:	e7ee      	b.n	80056e8 <__libc_init_array+0xc>
 800570a:	f855 3b04 	ldr.w	r3, [r5], #4
 800570e:	4798      	blx	r3
 8005710:	3601      	adds	r6, #1
 8005712:	e7f2      	b.n	80056fa <__libc_init_array+0x1e>
 8005714:	080060bc 	.word	0x080060bc
 8005718:	080060bc 	.word	0x080060bc
 800571c:	080060bc 	.word	0x080060bc
 8005720:	080060c0 	.word	0x080060c0

08005724 <__retarget_lock_acquire_recursive>:
 8005724:	4770      	bx	lr

08005726 <__retarget_lock_release_recursive>:
 8005726:	4770      	bx	lr

08005728 <_free_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4605      	mov	r5, r0
 800572c:	2900      	cmp	r1, #0
 800572e:	d041      	beq.n	80057b4 <_free_r+0x8c>
 8005730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005734:	1f0c      	subs	r4, r1, #4
 8005736:	2b00      	cmp	r3, #0
 8005738:	bfb8      	it	lt
 800573a:	18e4      	addlt	r4, r4, r3
 800573c:	f000 f8e0 	bl	8005900 <__malloc_lock>
 8005740:	4a1d      	ldr	r2, [pc, #116]	@ (80057b8 <_free_r+0x90>)
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	b933      	cbnz	r3, 8005754 <_free_r+0x2c>
 8005746:	6063      	str	r3, [r4, #4]
 8005748:	6014      	str	r4, [r2, #0]
 800574a:	4628      	mov	r0, r5
 800574c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005750:	f000 b8dc 	b.w	800590c <__malloc_unlock>
 8005754:	42a3      	cmp	r3, r4
 8005756:	d908      	bls.n	800576a <_free_r+0x42>
 8005758:	6820      	ldr	r0, [r4, #0]
 800575a:	1821      	adds	r1, r4, r0
 800575c:	428b      	cmp	r3, r1
 800575e:	bf01      	itttt	eq
 8005760:	6819      	ldreq	r1, [r3, #0]
 8005762:	685b      	ldreq	r3, [r3, #4]
 8005764:	1809      	addeq	r1, r1, r0
 8005766:	6021      	streq	r1, [r4, #0]
 8005768:	e7ed      	b.n	8005746 <_free_r+0x1e>
 800576a:	461a      	mov	r2, r3
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	b10b      	cbz	r3, 8005774 <_free_r+0x4c>
 8005770:	42a3      	cmp	r3, r4
 8005772:	d9fa      	bls.n	800576a <_free_r+0x42>
 8005774:	6811      	ldr	r1, [r2, #0]
 8005776:	1850      	adds	r0, r2, r1
 8005778:	42a0      	cmp	r0, r4
 800577a:	d10b      	bne.n	8005794 <_free_r+0x6c>
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	4401      	add	r1, r0
 8005780:	1850      	adds	r0, r2, r1
 8005782:	4283      	cmp	r3, r0
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	d1e0      	bne.n	800574a <_free_r+0x22>
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	6053      	str	r3, [r2, #4]
 800578e:	4408      	add	r0, r1
 8005790:	6010      	str	r0, [r2, #0]
 8005792:	e7da      	b.n	800574a <_free_r+0x22>
 8005794:	d902      	bls.n	800579c <_free_r+0x74>
 8005796:	230c      	movs	r3, #12
 8005798:	602b      	str	r3, [r5, #0]
 800579a:	e7d6      	b.n	800574a <_free_r+0x22>
 800579c:	6820      	ldr	r0, [r4, #0]
 800579e:	1821      	adds	r1, r4, r0
 80057a0:	428b      	cmp	r3, r1
 80057a2:	bf04      	itt	eq
 80057a4:	6819      	ldreq	r1, [r3, #0]
 80057a6:	685b      	ldreq	r3, [r3, #4]
 80057a8:	6063      	str	r3, [r4, #4]
 80057aa:	bf04      	itt	eq
 80057ac:	1809      	addeq	r1, r1, r0
 80057ae:	6021      	streq	r1, [r4, #0]
 80057b0:	6054      	str	r4, [r2, #4]
 80057b2:	e7ca      	b.n	800574a <_free_r+0x22>
 80057b4:	bd38      	pop	{r3, r4, r5, pc}
 80057b6:	bf00      	nop
 80057b8:	20000324 	.word	0x20000324

080057bc <sbrk_aligned>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4e0f      	ldr	r6, [pc, #60]	@ (80057fc <sbrk_aligned+0x40>)
 80057c0:	460c      	mov	r4, r1
 80057c2:	6831      	ldr	r1, [r6, #0]
 80057c4:	4605      	mov	r5, r0
 80057c6:	b911      	cbnz	r1, 80057ce <sbrk_aligned+0x12>
 80057c8:	f000 fba6 	bl	8005f18 <_sbrk_r>
 80057cc:	6030      	str	r0, [r6, #0]
 80057ce:	4621      	mov	r1, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 fba1 	bl	8005f18 <_sbrk_r>
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	d103      	bne.n	80057e2 <sbrk_aligned+0x26>
 80057da:	f04f 34ff 	mov.w	r4, #4294967295
 80057de:	4620      	mov	r0, r4
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
 80057e2:	1cc4      	adds	r4, r0, #3
 80057e4:	f024 0403 	bic.w	r4, r4, #3
 80057e8:	42a0      	cmp	r0, r4
 80057ea:	d0f8      	beq.n	80057de <sbrk_aligned+0x22>
 80057ec:	1a21      	subs	r1, r4, r0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fb92 	bl	8005f18 <_sbrk_r>
 80057f4:	3001      	adds	r0, #1
 80057f6:	d1f2      	bne.n	80057de <sbrk_aligned+0x22>
 80057f8:	e7ef      	b.n	80057da <sbrk_aligned+0x1e>
 80057fa:	bf00      	nop
 80057fc:	20000320 	.word	0x20000320

08005800 <_malloc_r>:
 8005800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005804:	1ccd      	adds	r5, r1, #3
 8005806:	f025 0503 	bic.w	r5, r5, #3
 800580a:	3508      	adds	r5, #8
 800580c:	2d0c      	cmp	r5, #12
 800580e:	bf38      	it	cc
 8005810:	250c      	movcc	r5, #12
 8005812:	2d00      	cmp	r5, #0
 8005814:	4606      	mov	r6, r0
 8005816:	db01      	blt.n	800581c <_malloc_r+0x1c>
 8005818:	42a9      	cmp	r1, r5
 800581a:	d904      	bls.n	8005826 <_malloc_r+0x26>
 800581c:	230c      	movs	r3, #12
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	2000      	movs	r0, #0
 8005822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058fc <_malloc_r+0xfc>
 800582a:	f000 f869 	bl	8005900 <__malloc_lock>
 800582e:	f8d8 3000 	ldr.w	r3, [r8]
 8005832:	461c      	mov	r4, r3
 8005834:	bb44      	cbnz	r4, 8005888 <_malloc_r+0x88>
 8005836:	4629      	mov	r1, r5
 8005838:	4630      	mov	r0, r6
 800583a:	f7ff ffbf 	bl	80057bc <sbrk_aligned>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	4604      	mov	r4, r0
 8005842:	d158      	bne.n	80058f6 <_malloc_r+0xf6>
 8005844:	f8d8 4000 	ldr.w	r4, [r8]
 8005848:	4627      	mov	r7, r4
 800584a:	2f00      	cmp	r7, #0
 800584c:	d143      	bne.n	80058d6 <_malloc_r+0xd6>
 800584e:	2c00      	cmp	r4, #0
 8005850:	d04b      	beq.n	80058ea <_malloc_r+0xea>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	4639      	mov	r1, r7
 8005856:	4630      	mov	r0, r6
 8005858:	eb04 0903 	add.w	r9, r4, r3
 800585c:	f000 fb5c 	bl	8005f18 <_sbrk_r>
 8005860:	4581      	cmp	r9, r0
 8005862:	d142      	bne.n	80058ea <_malloc_r+0xea>
 8005864:	6821      	ldr	r1, [r4, #0]
 8005866:	1a6d      	subs	r5, r5, r1
 8005868:	4629      	mov	r1, r5
 800586a:	4630      	mov	r0, r6
 800586c:	f7ff ffa6 	bl	80057bc <sbrk_aligned>
 8005870:	3001      	adds	r0, #1
 8005872:	d03a      	beq.n	80058ea <_malloc_r+0xea>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	442b      	add	r3, r5
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	f8d8 3000 	ldr.w	r3, [r8]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	bb62      	cbnz	r2, 80058dc <_malloc_r+0xdc>
 8005882:	f8c8 7000 	str.w	r7, [r8]
 8005886:	e00f      	b.n	80058a8 <_malloc_r+0xa8>
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	1b52      	subs	r2, r2, r5
 800588c:	d420      	bmi.n	80058d0 <_malloc_r+0xd0>
 800588e:	2a0b      	cmp	r2, #11
 8005890:	d917      	bls.n	80058c2 <_malloc_r+0xc2>
 8005892:	1961      	adds	r1, r4, r5
 8005894:	42a3      	cmp	r3, r4
 8005896:	6025      	str	r5, [r4, #0]
 8005898:	bf18      	it	ne
 800589a:	6059      	strne	r1, [r3, #4]
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	bf08      	it	eq
 80058a0:	f8c8 1000 	streq.w	r1, [r8]
 80058a4:	5162      	str	r2, [r4, r5]
 80058a6:	604b      	str	r3, [r1, #4]
 80058a8:	4630      	mov	r0, r6
 80058aa:	f000 f82f 	bl	800590c <__malloc_unlock>
 80058ae:	f104 000b 	add.w	r0, r4, #11
 80058b2:	1d23      	adds	r3, r4, #4
 80058b4:	f020 0007 	bic.w	r0, r0, #7
 80058b8:	1ac2      	subs	r2, r0, r3
 80058ba:	bf1c      	itt	ne
 80058bc:	1a1b      	subne	r3, r3, r0
 80058be:	50a3      	strne	r3, [r4, r2]
 80058c0:	e7af      	b.n	8005822 <_malloc_r+0x22>
 80058c2:	6862      	ldr	r2, [r4, #4]
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	bf0c      	ite	eq
 80058c8:	f8c8 2000 	streq.w	r2, [r8]
 80058cc:	605a      	strne	r2, [r3, #4]
 80058ce:	e7eb      	b.n	80058a8 <_malloc_r+0xa8>
 80058d0:	4623      	mov	r3, r4
 80058d2:	6864      	ldr	r4, [r4, #4]
 80058d4:	e7ae      	b.n	8005834 <_malloc_r+0x34>
 80058d6:	463c      	mov	r4, r7
 80058d8:	687f      	ldr	r7, [r7, #4]
 80058da:	e7b6      	b.n	800584a <_malloc_r+0x4a>
 80058dc:	461a      	mov	r2, r3
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d1fb      	bne.n	80058dc <_malloc_r+0xdc>
 80058e4:	2300      	movs	r3, #0
 80058e6:	6053      	str	r3, [r2, #4]
 80058e8:	e7de      	b.n	80058a8 <_malloc_r+0xa8>
 80058ea:	230c      	movs	r3, #12
 80058ec:	6033      	str	r3, [r6, #0]
 80058ee:	4630      	mov	r0, r6
 80058f0:	f000 f80c 	bl	800590c <__malloc_unlock>
 80058f4:	e794      	b.n	8005820 <_malloc_r+0x20>
 80058f6:	6005      	str	r5, [r0, #0]
 80058f8:	e7d6      	b.n	80058a8 <_malloc_r+0xa8>
 80058fa:	bf00      	nop
 80058fc:	20000324 	.word	0x20000324

08005900 <__malloc_lock>:
 8005900:	4801      	ldr	r0, [pc, #4]	@ (8005908 <__malloc_lock+0x8>)
 8005902:	f7ff bf0f 	b.w	8005724 <__retarget_lock_acquire_recursive>
 8005906:	bf00      	nop
 8005908:	2000031c 	.word	0x2000031c

0800590c <__malloc_unlock>:
 800590c:	4801      	ldr	r0, [pc, #4]	@ (8005914 <__malloc_unlock+0x8>)
 800590e:	f7ff bf0a 	b.w	8005726 <__retarget_lock_release_recursive>
 8005912:	bf00      	nop
 8005914:	2000031c 	.word	0x2000031c

08005918 <__ssputs_r>:
 8005918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	688e      	ldr	r6, [r1, #8]
 800591e:	461f      	mov	r7, r3
 8005920:	42be      	cmp	r6, r7
 8005922:	680b      	ldr	r3, [r1, #0]
 8005924:	4682      	mov	sl, r0
 8005926:	460c      	mov	r4, r1
 8005928:	4690      	mov	r8, r2
 800592a:	d82d      	bhi.n	8005988 <__ssputs_r+0x70>
 800592c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005934:	d026      	beq.n	8005984 <__ssputs_r+0x6c>
 8005936:	6965      	ldr	r5, [r4, #20]
 8005938:	6909      	ldr	r1, [r1, #16]
 800593a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800593e:	eba3 0901 	sub.w	r9, r3, r1
 8005942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005946:	1c7b      	adds	r3, r7, #1
 8005948:	444b      	add	r3, r9
 800594a:	106d      	asrs	r5, r5, #1
 800594c:	429d      	cmp	r5, r3
 800594e:	bf38      	it	cc
 8005950:	461d      	movcc	r5, r3
 8005952:	0553      	lsls	r3, r2, #21
 8005954:	d527      	bpl.n	80059a6 <__ssputs_r+0x8e>
 8005956:	4629      	mov	r1, r5
 8005958:	f7ff ff52 	bl	8005800 <_malloc_r>
 800595c:	4606      	mov	r6, r0
 800595e:	b360      	cbz	r0, 80059ba <__ssputs_r+0xa2>
 8005960:	6921      	ldr	r1, [r4, #16]
 8005962:	464a      	mov	r2, r9
 8005964:	f000 fae8 	bl	8005f38 <memcpy>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800596e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	6126      	str	r6, [r4, #16]
 8005976:	6165      	str	r5, [r4, #20]
 8005978:	444e      	add	r6, r9
 800597a:	eba5 0509 	sub.w	r5, r5, r9
 800597e:	6026      	str	r6, [r4, #0]
 8005980:	60a5      	str	r5, [r4, #8]
 8005982:	463e      	mov	r6, r7
 8005984:	42be      	cmp	r6, r7
 8005986:	d900      	bls.n	800598a <__ssputs_r+0x72>
 8005988:	463e      	mov	r6, r7
 800598a:	6820      	ldr	r0, [r4, #0]
 800598c:	4632      	mov	r2, r6
 800598e:	4641      	mov	r1, r8
 8005990:	f000 faa8 	bl	8005ee4 <memmove>
 8005994:	68a3      	ldr	r3, [r4, #8]
 8005996:	1b9b      	subs	r3, r3, r6
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	4433      	add	r3, r6
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	2000      	movs	r0, #0
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	462a      	mov	r2, r5
 80059a8:	f000 fad4 	bl	8005f54 <_realloc_r>
 80059ac:	4606      	mov	r6, r0
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d1e0      	bne.n	8005974 <__ssputs_r+0x5c>
 80059b2:	6921      	ldr	r1, [r4, #16]
 80059b4:	4650      	mov	r0, sl
 80059b6:	f7ff feb7 	bl	8005728 <_free_r>
 80059ba:	230c      	movs	r3, #12
 80059bc:	f8ca 3000 	str.w	r3, [sl]
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	e7e9      	b.n	80059a2 <__ssputs_r+0x8a>
	...

080059d0 <_svfiprintf_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	4698      	mov	r8, r3
 80059d6:	898b      	ldrh	r3, [r1, #12]
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	b09d      	sub	sp, #116	@ 0x74
 80059dc:	4607      	mov	r7, r0
 80059de:	460d      	mov	r5, r1
 80059e0:	4614      	mov	r4, r2
 80059e2:	d510      	bpl.n	8005a06 <_svfiprintf_r+0x36>
 80059e4:	690b      	ldr	r3, [r1, #16]
 80059e6:	b973      	cbnz	r3, 8005a06 <_svfiprintf_r+0x36>
 80059e8:	2140      	movs	r1, #64	@ 0x40
 80059ea:	f7ff ff09 	bl	8005800 <_malloc_r>
 80059ee:	6028      	str	r0, [r5, #0]
 80059f0:	6128      	str	r0, [r5, #16]
 80059f2:	b930      	cbnz	r0, 8005a02 <_svfiprintf_r+0x32>
 80059f4:	230c      	movs	r3, #12
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	b01d      	add	sp, #116	@ 0x74
 80059fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a02:	2340      	movs	r3, #64	@ 0x40
 8005a04:	616b      	str	r3, [r5, #20]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a0a:	2320      	movs	r3, #32
 8005a0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a14:	2330      	movs	r3, #48	@ 0x30
 8005a16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005bb4 <_svfiprintf_r+0x1e4>
 8005a1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a1e:	f04f 0901 	mov.w	r9, #1
 8005a22:	4623      	mov	r3, r4
 8005a24:	469a      	mov	sl, r3
 8005a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a2a:	b10a      	cbz	r2, 8005a30 <_svfiprintf_r+0x60>
 8005a2c:	2a25      	cmp	r2, #37	@ 0x25
 8005a2e:	d1f9      	bne.n	8005a24 <_svfiprintf_r+0x54>
 8005a30:	ebba 0b04 	subs.w	fp, sl, r4
 8005a34:	d00b      	beq.n	8005a4e <_svfiprintf_r+0x7e>
 8005a36:	465b      	mov	r3, fp
 8005a38:	4622      	mov	r2, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	f7ff ff6b 	bl	8005918 <__ssputs_r>
 8005a42:	3001      	adds	r0, #1
 8005a44:	f000 80a7 	beq.w	8005b96 <_svfiprintf_r+0x1c6>
 8005a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a4a:	445a      	add	r2, fp
 8005a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 809f 	beq.w	8005b96 <_svfiprintf_r+0x1c6>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a62:	f10a 0a01 	add.w	sl, sl, #1
 8005a66:	9304      	str	r3, [sp, #16]
 8005a68:	9307      	str	r3, [sp, #28]
 8005a6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a70:	4654      	mov	r4, sl
 8005a72:	2205      	movs	r2, #5
 8005a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a78:	484e      	ldr	r0, [pc, #312]	@ (8005bb4 <_svfiprintf_r+0x1e4>)
 8005a7a:	f7fa fbb9 	bl	80001f0 <memchr>
 8005a7e:	9a04      	ldr	r2, [sp, #16]
 8005a80:	b9d8      	cbnz	r0, 8005aba <_svfiprintf_r+0xea>
 8005a82:	06d0      	lsls	r0, r2, #27
 8005a84:	bf44      	itt	mi
 8005a86:	2320      	movmi	r3, #32
 8005a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a8c:	0711      	lsls	r1, r2, #28
 8005a8e:	bf44      	itt	mi
 8005a90:	232b      	movmi	r3, #43	@ 0x2b
 8005a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a96:	f89a 3000 	ldrb.w	r3, [sl]
 8005a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a9c:	d015      	beq.n	8005aca <_svfiprintf_r+0xfa>
 8005a9e:	9a07      	ldr	r2, [sp, #28]
 8005aa0:	4654      	mov	r4, sl
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f04f 0c0a 	mov.w	ip, #10
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aae:	3b30      	subs	r3, #48	@ 0x30
 8005ab0:	2b09      	cmp	r3, #9
 8005ab2:	d94b      	bls.n	8005b4c <_svfiprintf_r+0x17c>
 8005ab4:	b1b0      	cbz	r0, 8005ae4 <_svfiprintf_r+0x114>
 8005ab6:	9207      	str	r2, [sp, #28]
 8005ab8:	e014      	b.n	8005ae4 <_svfiprintf_r+0x114>
 8005aba:	eba0 0308 	sub.w	r3, r0, r8
 8005abe:	fa09 f303 	lsl.w	r3, r9, r3
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	9304      	str	r3, [sp, #16]
 8005ac6:	46a2      	mov	sl, r4
 8005ac8:	e7d2      	b.n	8005a70 <_svfiprintf_r+0xa0>
 8005aca:	9b03      	ldr	r3, [sp, #12]
 8005acc:	1d19      	adds	r1, r3, #4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	9103      	str	r1, [sp, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bfbb      	ittet	lt
 8005ad6:	425b      	neglt	r3, r3
 8005ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8005adc:	9307      	strge	r3, [sp, #28]
 8005ade:	9307      	strlt	r3, [sp, #28]
 8005ae0:	bfb8      	it	lt
 8005ae2:	9204      	strlt	r2, [sp, #16]
 8005ae4:	7823      	ldrb	r3, [r4, #0]
 8005ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ae8:	d10a      	bne.n	8005b00 <_svfiprintf_r+0x130>
 8005aea:	7863      	ldrb	r3, [r4, #1]
 8005aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aee:	d132      	bne.n	8005b56 <_svfiprintf_r+0x186>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	1d1a      	adds	r2, r3, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	9203      	str	r2, [sp, #12]
 8005af8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005afc:	3402      	adds	r4, #2
 8005afe:	9305      	str	r3, [sp, #20]
 8005b00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bc4 <_svfiprintf_r+0x1f4>
 8005b04:	7821      	ldrb	r1, [r4, #0]
 8005b06:	2203      	movs	r2, #3
 8005b08:	4650      	mov	r0, sl
 8005b0a:	f7fa fb71 	bl	80001f0 <memchr>
 8005b0e:	b138      	cbz	r0, 8005b20 <_svfiprintf_r+0x150>
 8005b10:	9b04      	ldr	r3, [sp, #16]
 8005b12:	eba0 000a 	sub.w	r0, r0, sl
 8005b16:	2240      	movs	r2, #64	@ 0x40
 8005b18:	4082      	lsls	r2, r0
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	3401      	adds	r4, #1
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b24:	4824      	ldr	r0, [pc, #144]	@ (8005bb8 <_svfiprintf_r+0x1e8>)
 8005b26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b2a:	2206      	movs	r2, #6
 8005b2c:	f7fa fb60 	bl	80001f0 <memchr>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d036      	beq.n	8005ba2 <_svfiprintf_r+0x1d2>
 8005b34:	4b21      	ldr	r3, [pc, #132]	@ (8005bbc <_svfiprintf_r+0x1ec>)
 8005b36:	bb1b      	cbnz	r3, 8005b80 <_svfiprintf_r+0x1b0>
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	3307      	adds	r3, #7
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	3308      	adds	r3, #8
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b46:	4433      	add	r3, r6
 8005b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b4a:	e76a      	b.n	8005a22 <_svfiprintf_r+0x52>
 8005b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b50:	460c      	mov	r4, r1
 8005b52:	2001      	movs	r0, #1
 8005b54:	e7a8      	b.n	8005aa8 <_svfiprintf_r+0xd8>
 8005b56:	2300      	movs	r3, #0
 8005b58:	3401      	adds	r4, #1
 8005b5a:	9305      	str	r3, [sp, #20]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f04f 0c0a 	mov.w	ip, #10
 8005b62:	4620      	mov	r0, r4
 8005b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b68:	3a30      	subs	r2, #48	@ 0x30
 8005b6a:	2a09      	cmp	r2, #9
 8005b6c:	d903      	bls.n	8005b76 <_svfiprintf_r+0x1a6>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0c6      	beq.n	8005b00 <_svfiprintf_r+0x130>
 8005b72:	9105      	str	r1, [sp, #20]
 8005b74:	e7c4      	b.n	8005b00 <_svfiprintf_r+0x130>
 8005b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e7f0      	b.n	8005b62 <_svfiprintf_r+0x192>
 8005b80:	ab03      	add	r3, sp, #12
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	462a      	mov	r2, r5
 8005b86:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc0 <_svfiprintf_r+0x1f0>)
 8005b88:	a904      	add	r1, sp, #16
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	f3af 8000 	nop.w
 8005b90:	1c42      	adds	r2, r0, #1
 8005b92:	4606      	mov	r6, r0
 8005b94:	d1d6      	bne.n	8005b44 <_svfiprintf_r+0x174>
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	065b      	lsls	r3, r3, #25
 8005b9a:	f53f af2d 	bmi.w	80059f8 <_svfiprintf_r+0x28>
 8005b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ba0:	e72c      	b.n	80059fc <_svfiprintf_r+0x2c>
 8005ba2:	ab03      	add	r3, sp, #12
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <_svfiprintf_r+0x1f0>)
 8005baa:	a904      	add	r1, sp, #16
 8005bac:	4638      	mov	r0, r7
 8005bae:	f000 f879 	bl	8005ca4 <_printf_i>
 8005bb2:	e7ed      	b.n	8005b90 <_svfiprintf_r+0x1c0>
 8005bb4:	08006080 	.word	0x08006080
 8005bb8:	0800608a 	.word	0x0800608a
 8005bbc:	00000000 	.word	0x00000000
 8005bc0:	08005919 	.word	0x08005919
 8005bc4:	08006086 	.word	0x08006086

08005bc8 <_printf_common>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	4616      	mov	r6, r2
 8005bce:	4698      	mov	r8, r3
 8005bd0:	688a      	ldr	r2, [r1, #8]
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bfb8      	it	lt
 8005bdc:	4613      	movlt	r3, r2
 8005bde:	6033      	str	r3, [r6, #0]
 8005be0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005be4:	4607      	mov	r7, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	b10a      	cbz	r2, 8005bee <_printf_common+0x26>
 8005bea:	3301      	adds	r3, #1
 8005bec:	6033      	str	r3, [r6, #0]
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	0699      	lsls	r1, r3, #26
 8005bf2:	bf42      	ittt	mi
 8005bf4:	6833      	ldrmi	r3, [r6, #0]
 8005bf6:	3302      	addmi	r3, #2
 8005bf8:	6033      	strmi	r3, [r6, #0]
 8005bfa:	6825      	ldr	r5, [r4, #0]
 8005bfc:	f015 0506 	ands.w	r5, r5, #6
 8005c00:	d106      	bne.n	8005c10 <_printf_common+0x48>
 8005c02:	f104 0a19 	add.w	sl, r4, #25
 8005c06:	68e3      	ldr	r3, [r4, #12]
 8005c08:	6832      	ldr	r2, [r6, #0]
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	42ab      	cmp	r3, r5
 8005c0e:	dc26      	bgt.n	8005c5e <_printf_common+0x96>
 8005c10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	3b00      	subs	r3, #0
 8005c18:	bf18      	it	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	0692      	lsls	r2, r2, #26
 8005c1e:	d42b      	bmi.n	8005c78 <_printf_common+0xb0>
 8005c20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c24:	4641      	mov	r1, r8
 8005c26:	4638      	mov	r0, r7
 8005c28:	47c8      	blx	r9
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d01e      	beq.n	8005c6c <_printf_common+0xa4>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	6922      	ldr	r2, [r4, #16]
 8005c32:	f003 0306 	and.w	r3, r3, #6
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	bf02      	ittt	eq
 8005c3a:	68e5      	ldreq	r5, [r4, #12]
 8005c3c:	6833      	ldreq	r3, [r6, #0]
 8005c3e:	1aed      	subeq	r5, r5, r3
 8005c40:	68a3      	ldr	r3, [r4, #8]
 8005c42:	bf0c      	ite	eq
 8005c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c48:	2500      	movne	r5, #0
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	bfc4      	itt	gt
 8005c4e:	1a9b      	subgt	r3, r3, r2
 8005c50:	18ed      	addgt	r5, r5, r3
 8005c52:	2600      	movs	r6, #0
 8005c54:	341a      	adds	r4, #26
 8005c56:	42b5      	cmp	r5, r6
 8005c58:	d11a      	bne.n	8005c90 <_printf_common+0xc8>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	e008      	b.n	8005c70 <_printf_common+0xa8>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4652      	mov	r2, sl
 8005c62:	4641      	mov	r1, r8
 8005c64:	4638      	mov	r0, r7
 8005c66:	47c8      	blx	r9
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d103      	bne.n	8005c74 <_printf_common+0xac>
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c74:	3501      	adds	r5, #1
 8005c76:	e7c6      	b.n	8005c06 <_printf_common+0x3e>
 8005c78:	18e1      	adds	r1, r4, r3
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	2030      	movs	r0, #48	@ 0x30
 8005c7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c82:	4422      	add	r2, r4
 8005c84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	e7c7      	b.n	8005c20 <_printf_common+0x58>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4622      	mov	r2, r4
 8005c94:	4641      	mov	r1, r8
 8005c96:	4638      	mov	r0, r7
 8005c98:	47c8      	blx	r9
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d0e6      	beq.n	8005c6c <_printf_common+0xa4>
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	e7d9      	b.n	8005c56 <_printf_common+0x8e>
	...

08005ca4 <_printf_i>:
 8005ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca8:	7e0f      	ldrb	r7, [r1, #24]
 8005caa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005cac:	2f78      	cmp	r7, #120	@ 0x78
 8005cae:	4691      	mov	r9, r2
 8005cb0:	4680      	mov	r8, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	469a      	mov	sl, r3
 8005cb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005cba:	d807      	bhi.n	8005ccc <_printf_i+0x28>
 8005cbc:	2f62      	cmp	r7, #98	@ 0x62
 8005cbe:	d80a      	bhi.n	8005cd6 <_printf_i+0x32>
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	f000 80d2 	beq.w	8005e6a <_printf_i+0x1c6>
 8005cc6:	2f58      	cmp	r7, #88	@ 0x58
 8005cc8:	f000 80b9 	beq.w	8005e3e <_printf_i+0x19a>
 8005ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cd4:	e03a      	b.n	8005d4c <_printf_i+0xa8>
 8005cd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cda:	2b15      	cmp	r3, #21
 8005cdc:	d8f6      	bhi.n	8005ccc <_printf_i+0x28>
 8005cde:	a101      	add	r1, pc, #4	@ (adr r1, 8005ce4 <_printf_i+0x40>)
 8005ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005ccd 	.word	0x08005ccd
 8005cf0:	08005ccd 	.word	0x08005ccd
 8005cf4:	08005ccd 	.word	0x08005ccd
 8005cf8:	08005ccd 	.word	0x08005ccd
 8005cfc:	08005d51 	.word	0x08005d51
 8005d00:	08005ccd 	.word	0x08005ccd
 8005d04:	08005ccd 	.word	0x08005ccd
 8005d08:	08005ccd 	.word	0x08005ccd
 8005d0c:	08005ccd 	.word	0x08005ccd
 8005d10:	08005e51 	.word	0x08005e51
 8005d14:	08005d7b 	.word	0x08005d7b
 8005d18:	08005e0b 	.word	0x08005e0b
 8005d1c:	08005ccd 	.word	0x08005ccd
 8005d20:	08005ccd 	.word	0x08005ccd
 8005d24:	08005e73 	.word	0x08005e73
 8005d28:	08005ccd 	.word	0x08005ccd
 8005d2c:	08005d7b 	.word	0x08005d7b
 8005d30:	08005ccd 	.word	0x08005ccd
 8005d34:	08005ccd 	.word	0x08005ccd
 8005d38:	08005e13 	.word	0x08005e13
 8005d3c:	6833      	ldr	r3, [r6, #0]
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6032      	str	r2, [r6, #0]
 8005d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e09d      	b.n	8005e8c <_printf_i+0x1e8>
 8005d50:	6833      	ldr	r3, [r6, #0]
 8005d52:	6820      	ldr	r0, [r4, #0]
 8005d54:	1d19      	adds	r1, r3, #4
 8005d56:	6031      	str	r1, [r6, #0]
 8005d58:	0606      	lsls	r6, r0, #24
 8005d5a:	d501      	bpl.n	8005d60 <_printf_i+0xbc>
 8005d5c:	681d      	ldr	r5, [r3, #0]
 8005d5e:	e003      	b.n	8005d68 <_printf_i+0xc4>
 8005d60:	0645      	lsls	r5, r0, #25
 8005d62:	d5fb      	bpl.n	8005d5c <_printf_i+0xb8>
 8005d64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d68:	2d00      	cmp	r5, #0
 8005d6a:	da03      	bge.n	8005d74 <_printf_i+0xd0>
 8005d6c:	232d      	movs	r3, #45	@ 0x2d
 8005d6e:	426d      	negs	r5, r5
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d74:	4859      	ldr	r0, [pc, #356]	@ (8005edc <_printf_i+0x238>)
 8005d76:	230a      	movs	r3, #10
 8005d78:	e011      	b.n	8005d9e <_printf_i+0xfa>
 8005d7a:	6821      	ldr	r1, [r4, #0]
 8005d7c:	6833      	ldr	r3, [r6, #0]
 8005d7e:	0608      	lsls	r0, r1, #24
 8005d80:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d84:	d402      	bmi.n	8005d8c <_printf_i+0xe8>
 8005d86:	0649      	lsls	r1, r1, #25
 8005d88:	bf48      	it	mi
 8005d8a:	b2ad      	uxthmi	r5, r5
 8005d8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d8e:	4853      	ldr	r0, [pc, #332]	@ (8005edc <_printf_i+0x238>)
 8005d90:	6033      	str	r3, [r6, #0]
 8005d92:	bf14      	ite	ne
 8005d94:	230a      	movne	r3, #10
 8005d96:	2308      	moveq	r3, #8
 8005d98:	2100      	movs	r1, #0
 8005d9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d9e:	6866      	ldr	r6, [r4, #4]
 8005da0:	60a6      	str	r6, [r4, #8]
 8005da2:	2e00      	cmp	r6, #0
 8005da4:	bfa2      	ittt	ge
 8005da6:	6821      	ldrge	r1, [r4, #0]
 8005da8:	f021 0104 	bicge.w	r1, r1, #4
 8005dac:	6021      	strge	r1, [r4, #0]
 8005dae:	b90d      	cbnz	r5, 8005db4 <_printf_i+0x110>
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	d04b      	beq.n	8005e4c <_printf_i+0x1a8>
 8005db4:	4616      	mov	r6, r2
 8005db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005dba:	fb03 5711 	mls	r7, r3, r1, r5
 8005dbe:	5dc7      	ldrb	r7, [r0, r7]
 8005dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005dc4:	462f      	mov	r7, r5
 8005dc6:	42bb      	cmp	r3, r7
 8005dc8:	460d      	mov	r5, r1
 8005dca:	d9f4      	bls.n	8005db6 <_printf_i+0x112>
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d10b      	bne.n	8005de8 <_printf_i+0x144>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	07df      	lsls	r7, r3, #31
 8005dd4:	d508      	bpl.n	8005de8 <_printf_i+0x144>
 8005dd6:	6923      	ldr	r3, [r4, #16]
 8005dd8:	6861      	ldr	r1, [r4, #4]
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	bfde      	ittt	le
 8005dde:	2330      	movle	r3, #48	@ 0x30
 8005de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005de4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005de8:	1b92      	subs	r2, r2, r6
 8005dea:	6122      	str	r2, [r4, #16]
 8005dec:	f8cd a000 	str.w	sl, [sp]
 8005df0:	464b      	mov	r3, r9
 8005df2:	aa03      	add	r2, sp, #12
 8005df4:	4621      	mov	r1, r4
 8005df6:	4640      	mov	r0, r8
 8005df8:	f7ff fee6 	bl	8005bc8 <_printf_common>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d14a      	bne.n	8005e96 <_printf_i+0x1f2>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	b004      	add	sp, #16
 8005e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f043 0320 	orr.w	r3, r3, #32
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	4833      	ldr	r0, [pc, #204]	@ (8005ee0 <_printf_i+0x23c>)
 8005e14:	2778      	movs	r7, #120	@ 0x78
 8005e16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	6831      	ldr	r1, [r6, #0]
 8005e1e:	061f      	lsls	r7, r3, #24
 8005e20:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e24:	d402      	bmi.n	8005e2c <_printf_i+0x188>
 8005e26:	065f      	lsls	r7, r3, #25
 8005e28:	bf48      	it	mi
 8005e2a:	b2ad      	uxthmi	r5, r5
 8005e2c:	6031      	str	r1, [r6, #0]
 8005e2e:	07d9      	lsls	r1, r3, #31
 8005e30:	bf44      	itt	mi
 8005e32:	f043 0320 	orrmi.w	r3, r3, #32
 8005e36:	6023      	strmi	r3, [r4, #0]
 8005e38:	b11d      	cbz	r5, 8005e42 <_printf_i+0x19e>
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	e7ac      	b.n	8005d98 <_printf_i+0xf4>
 8005e3e:	4827      	ldr	r0, [pc, #156]	@ (8005edc <_printf_i+0x238>)
 8005e40:	e7e9      	b.n	8005e16 <_printf_i+0x172>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	f023 0320 	bic.w	r3, r3, #32
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	e7f6      	b.n	8005e3a <_printf_i+0x196>
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	e7bd      	b.n	8005dcc <_printf_i+0x128>
 8005e50:	6833      	ldr	r3, [r6, #0]
 8005e52:	6825      	ldr	r5, [r4, #0]
 8005e54:	6961      	ldr	r1, [r4, #20]
 8005e56:	1d18      	adds	r0, r3, #4
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	062e      	lsls	r6, r5, #24
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	d501      	bpl.n	8005e64 <_printf_i+0x1c0>
 8005e60:	6019      	str	r1, [r3, #0]
 8005e62:	e002      	b.n	8005e6a <_printf_i+0x1c6>
 8005e64:	0668      	lsls	r0, r5, #25
 8005e66:	d5fb      	bpl.n	8005e60 <_printf_i+0x1bc>
 8005e68:	8019      	strh	r1, [r3, #0]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6123      	str	r3, [r4, #16]
 8005e6e:	4616      	mov	r6, r2
 8005e70:	e7bc      	b.n	8005dec <_printf_i+0x148>
 8005e72:	6833      	ldr	r3, [r6, #0]
 8005e74:	1d1a      	adds	r2, r3, #4
 8005e76:	6032      	str	r2, [r6, #0]
 8005e78:	681e      	ldr	r6, [r3, #0]
 8005e7a:	6862      	ldr	r2, [r4, #4]
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7fa f9b6 	bl	80001f0 <memchr>
 8005e84:	b108      	cbz	r0, 8005e8a <_printf_i+0x1e6>
 8005e86:	1b80      	subs	r0, r0, r6
 8005e88:	6060      	str	r0, [r4, #4]
 8005e8a:	6863      	ldr	r3, [r4, #4]
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e94:	e7aa      	b.n	8005dec <_printf_i+0x148>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	4632      	mov	r2, r6
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	47d0      	blx	sl
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d0ad      	beq.n	8005e00 <_printf_i+0x15c>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	079b      	lsls	r3, r3, #30
 8005ea8:	d413      	bmi.n	8005ed2 <_printf_i+0x22e>
 8005eaa:	68e0      	ldr	r0, [r4, #12]
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	4298      	cmp	r0, r3
 8005eb0:	bfb8      	it	lt
 8005eb2:	4618      	movlt	r0, r3
 8005eb4:	e7a6      	b.n	8005e04 <_printf_i+0x160>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4632      	mov	r2, r6
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	47d0      	blx	sl
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d09d      	beq.n	8005e00 <_printf_i+0x15c>
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	9903      	ldr	r1, [sp, #12]
 8005eca:	1a5b      	subs	r3, r3, r1
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dcf2      	bgt.n	8005eb6 <_printf_i+0x212>
 8005ed0:	e7eb      	b.n	8005eaa <_printf_i+0x206>
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	f104 0619 	add.w	r6, r4, #25
 8005ed8:	e7f5      	b.n	8005ec6 <_printf_i+0x222>
 8005eda:	bf00      	nop
 8005edc:	08006091 	.word	0x08006091
 8005ee0:	080060a2 	.word	0x080060a2

08005ee4 <memmove>:
 8005ee4:	4288      	cmp	r0, r1
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	eb01 0402 	add.w	r4, r1, r2
 8005eec:	d902      	bls.n	8005ef4 <memmove+0x10>
 8005eee:	4284      	cmp	r4, r0
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	d807      	bhi.n	8005f04 <memmove+0x20>
 8005ef4:	1e43      	subs	r3, r0, #1
 8005ef6:	42a1      	cmp	r1, r4
 8005ef8:	d008      	beq.n	8005f0c <memmove+0x28>
 8005efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f02:	e7f8      	b.n	8005ef6 <memmove+0x12>
 8005f04:	4402      	add	r2, r0
 8005f06:	4601      	mov	r1, r0
 8005f08:	428a      	cmp	r2, r1
 8005f0a:	d100      	bne.n	8005f0e <memmove+0x2a>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f16:	e7f7      	b.n	8005f08 <memmove+0x24>

08005f18 <_sbrk_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d06      	ldr	r5, [pc, #24]	@ (8005f34 <_sbrk_r+0x1c>)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	602b      	str	r3, [r5, #0]
 8005f24:	f7fc fca0 	bl	8002868 <_sbrk>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_sbrk_r+0x1a>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_sbrk_r+0x1a>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	20000318 	.word	0x20000318

08005f38 <memcpy>:
 8005f38:	440a      	add	r2, r1
 8005f3a:	4291      	cmp	r1, r2
 8005f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f40:	d100      	bne.n	8005f44 <memcpy+0xc>
 8005f42:	4770      	bx	lr
 8005f44:	b510      	push	{r4, lr}
 8005f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f4e:	4291      	cmp	r1, r2
 8005f50:	d1f9      	bne.n	8005f46 <memcpy+0xe>
 8005f52:	bd10      	pop	{r4, pc}

08005f54 <_realloc_r>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4615      	mov	r5, r2
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	b921      	cbnz	r1, 8005f6a <_realloc_r+0x16>
 8005f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f64:	4611      	mov	r1, r2
 8005f66:	f7ff bc4b 	b.w	8005800 <_malloc_r>
 8005f6a:	b92a      	cbnz	r2, 8005f78 <_realloc_r+0x24>
 8005f6c:	f7ff fbdc 	bl	8005728 <_free_r>
 8005f70:	2400      	movs	r4, #0
 8005f72:	4620      	mov	r0, r4
 8005f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f78:	f000 f81a 	bl	8005fb0 <_malloc_usable_size_r>
 8005f7c:	4285      	cmp	r5, r0
 8005f7e:	4606      	mov	r6, r0
 8005f80:	d802      	bhi.n	8005f88 <_realloc_r+0x34>
 8005f82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005f86:	d8f4      	bhi.n	8005f72 <_realloc_r+0x1e>
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	f7ff fc38 	bl	8005800 <_malloc_r>
 8005f90:	4607      	mov	r7, r0
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d0ec      	beq.n	8005f70 <_realloc_r+0x1c>
 8005f96:	42b5      	cmp	r5, r6
 8005f98:	462a      	mov	r2, r5
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	bf28      	it	cs
 8005f9e:	4632      	movcs	r2, r6
 8005fa0:	f7ff ffca 	bl	8005f38 <memcpy>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fbbe 	bl	8005728 <_free_r>
 8005fac:	463c      	mov	r4, r7
 8005fae:	e7e0      	b.n	8005f72 <_realloc_r+0x1e>

08005fb0 <_malloc_usable_size_r>:
 8005fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb4:	1f18      	subs	r0, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bfbc      	itt	lt
 8005fba:	580b      	ldrlt	r3, [r1, r0]
 8005fbc:	18c0      	addlt	r0, r0, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
